{
  "stats": {
    "suites": 27,
    "tests": 187,
    "passes": 187,
    "pending": 0,
    "failures": 0,
    "start": "2017-01-02T16:07:41.768Z",
    "end": "2017-01-02T16:07:45.179Z",
    "duration": 3411,
    "testsRegistered": 187,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "05891bd9-40d1-4acf-9418-309c53ca3d1c",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "96922c99-a9f0-42dc-bd68-07ae55332df6",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50b24b2c-e49b-4a82-b442-145ef068737e",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt die Kontaktangaben zurück",
            "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5e86360a-c1a7-41fd-801a-fcda72b40fbc",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "481fe7be-c4b6-46df-8ebc-17144dad002f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "05891bd9-40d1-4acf-9418-309c53ca3d1c",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "96922c99-a9f0-42dc-bd68-07ae55332df6",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50b24b2c-e49b-4a82-b442-145ef068737e",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          },
          {
            "title": "gibt die Kontaktangaben zurück",
            "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5e86360a-c1a7-41fd-801a-fcda72b40fbc",
            "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 46
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "941dcc13-f1c4-4e31-80d8-2bcf635e9b7e",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cd0df89b-5781-4b4e-9075-a7b169465903",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "78d37d29-5be4-4dd9-a1cd-6ecc0833d6f0",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cb48c345-8156-4239-89b0-7a1e91ca098a",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c719579b-7041-458b-bfad-a098b4d242d8",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b4a7badb-8689-4200-abf8-2afcbffce54a",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "941dcc13-f1c4-4e31-80d8-2bcf635e9b7e",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cd0df89b-5781-4b4e-9075-a7b169465903",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "78d37d29-5be4-4dd9-a1cd-6ecc0833d6f0",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cb48c345-8156-4239-89b0-7a1e91ca098a",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c719579b-7041-458b-bfad-a098b4d242d8",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b4a7badb-8689-4200-abf8-2afcbffce54a",
            "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 217
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5680c00b-1c45-4dc9-bd34-f32287e70a36",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f72a15db-781e-4903-8c5f-3c32b28b7230",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1d9fef05-8980-46b3-b78c-752c8e090d10",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "34195f33-dfdc-4b2c-9976-32c70abff9aa",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0117a2fd-9b7f-49bd-b87c-6b66969824bc",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52a6f5f8-a6c6-471a-96ef-021df1654dde",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "407b5626-1b7c-47e7-bff5-453d481e6370",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "28b13c41-d4f5-4017-b728-3d711d1aab00",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8439f60a-79cc-4f86-8b7f-15c7d701563f",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5380380b-ef1d-4aa1-ad20-9c37857cad2b",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5680c00b-1c45-4dc9-bd34-f32287e70a36",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f72a15db-781e-4903-8c5f-3c32b28b7230",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1d9fef05-8980-46b3-b78c-752c8e090d10",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "34195f33-dfdc-4b2c-9976-32c70abff9aa",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0117a2fd-9b7f-49bd-b87c-6b66969824bc",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52a6f5f8-a6c6-471a-96ef-021df1654dde",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "407b5626-1b7c-47e7-bff5-453d481e6370",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "28b13c41-d4f5-4017-b728-3d711d1aab00",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8439f60a-79cc-4f86-8b7f-15c7d701563f",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5380380b-ef1d-4aa1-ad20-9c37857cad2b",
            "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 283
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5ce34fec-2e6e-4a6a-a794-75c36b49d6f6",
            "parentUUID": "5d25c277-fc00-4bc6-81d1-588ab0724d4b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "5d25c277-fc00-4bc6-81d1-588ab0724d4b",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5ce34fec-2e6e-4a6a-a794-75c36b49d6f6",
            "parentUUID": "5d25c277-fc00-4bc6-81d1-588ab0724d4b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 16
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a671a70-142b-4022-b165-7ebe619e1763",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "63dff469-215a-441d-8e08-ce6c695ce645",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80848257-ea37-4969-bbba-51e10c65a6c2",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72088386-4b58-438a-877d-f382e81f77c6",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1676b37a-c58c-48a7-9a09-9beca1f028a2",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "02606366-d9cc-44c6-8caa-4398762f0a6b",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b247f27b-fb47-4b36-8eba-9242453dfa14",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6f22f7c7-3878-4961-8c27-ee7bb5606aaa",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "508bb680-f2c6-48c0-bf89-350963dfdc42",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a671a70-142b-4022-b165-7ebe619e1763",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "63dff469-215a-441d-8e08-ce6c695ce645",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80848257-ea37-4969-bbba-51e10c65a6c2",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72088386-4b58-438a-877d-f382e81f77c6",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1676b37a-c58c-48a7-9a09-9beca1f028a2",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "02606366-d9cc-44c6-8caa-4398762f0a6b",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b247f27b-fb47-4b36-8eba-9242453dfa14",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6f22f7c7-3878-4961-8c27-ee7bb5606aaa",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "508bb680-f2c6-48c0-bf89-350963dfdc42",
            "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 133
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b9b951a2-2476-44d1-9d16-00faa4ed6352",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c9a521b3-01b0-4a59-9cfb-49c4def7c2c0",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6352712d-485d-47be-afb2-f8d9ca979297",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd825b3b-1efd-4a7a-94d4-882f19c47a41",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e9b8b6e1-5476-4dcb-bdb5-00af1bb0204d",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "636aef2a-7b8c-49bb-9468-dd9438f460ad",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5664597d-8e2e-4038-8f72-6df7f8b214b3",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "74268ab9-e099-41bf-9f36-e07e421087c6",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd33bf60-1bb1-488f-a3ba-7e2fe5b310cb",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c0b45f43-d1ec-4f13-8684-e64a6c35e9c9",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "632669e6-4077-4bd3-b4d7-920468913026",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9d40b3d5-f80d-418e-8c10-3501861765e6",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c065011-3adf-45a9-99e8-09fa4316c7ae",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5f04bbe9-0c68-4773-8f27-1bd1403b854e",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "70b9c1e3-ccfa-4408-ae80-cb40fb65aba7",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "c877f551-27f1-4edc-98a9-adcc221b4e30",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b9b951a2-2476-44d1-9d16-00faa4ed6352",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c9a521b3-01b0-4a59-9cfb-49c4def7c2c0",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6352712d-485d-47be-afb2-f8d9ca979297",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd825b3b-1efd-4a7a-94d4-882f19c47a41",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e9b8b6e1-5476-4dcb-bdb5-00af1bb0204d",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "636aef2a-7b8c-49bb-9468-dd9438f460ad",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5664597d-8e2e-4038-8f72-6df7f8b214b3",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "74268ab9-e099-41bf-9f36-e07e421087c6",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd33bf60-1bb1-488f-a3ba-7e2fe5b310cb",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c0b45f43-d1ec-4f13-8684-e64a6c35e9c9",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "632669e6-4077-4bd3-b4d7-920468913026",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9d40b3d5-f80d-418e-8c10-3501861765e6",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c065011-3adf-45a9-99e8-09fa4316c7ae",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5f04bbe9-0c68-4773-8f27-1bd1403b854e",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "70b9c1e3-ccfa-4408-ae80-cb40fb65aba7",
            "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 15,
        "totalPasses": 15,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 381
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e51bf9af-f0ce-4b04-baa3-6eb6276863b7",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1fd6da98-8ecd-4281-bcb8-e55bbbd4118a",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc4c144d-211c-4daf-bc7d-ddf9f7ad40f3",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55c3e378-bc78-4885-8d61-e9681daafa0e",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a0302a52-7c25-452c-9883-9d30a2e74280",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen speichern",
            "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a75452b-c545-4233-acb7-27118a2b80bf",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen laden",
            "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dbb61e52-ce1d-457d-9931-ed39bcf80f11",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f461b65b-3c0a-4e71-85c6-b665e85c1f1b",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e51bf9af-f0ce-4b04-baa3-6eb6276863b7",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1fd6da98-8ecd-4281-bcb8-e55bbbd4118a",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc4c144d-211c-4daf-bc7d-ddf9f7ad40f3",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55c3e378-bc78-4885-8d61-e9681daafa0e",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a0302a52-7c25-452c-9883-9d30a2e74280",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen speichern",
            "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a75452b-c545-4233-acb7-27118a2b80bf",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen laden",
            "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dbb61e52-ce1d-457d-9931-ed39bcf80f11",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f461b65b-3c0a-4e71-85c6-b665e85c1f1b",
            "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 211
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6e6f0c5-f6bc-4ab7-9620-3635a55393b6",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(teamid);\n        expect(response.body[0].name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e05ec78-5369-4a91-99c1-38ef8c24fc8b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b590cff6-4996-4ae2-ab26-e95ec3ec2758",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11c03644-c197-4f03-b3f1-23d055ab1503",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a034f90-bbfa-4453-adbf-636fa80aced5",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd25caf4-1e80-41a8-b639-e5cdd1deae4b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2dc170b2-1789-4637-9ae3-3a5b3fc96954",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7467b165-aaf2-4bcc-afa7-69d46f77086e",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5ab4626d-8145-4f57-b52b-47950625f34a",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6ae929f5-b085-4f88-8447-3a2d6edb9aa2",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f85af43-789c-4b85-be63-2b8ec478754b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6e6f0c5-f6bc-4ab7-9620-3635a55393b6",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(teamid);\n        expect(response.body[0].name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e05ec78-5369-4a91-99c1-38ef8c24fc8b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b590cff6-4996-4ae2-ab26-e95ec3ec2758",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11c03644-c197-4f03-b3f1-23d055ab1503",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a034f90-bbfa-4453-adbf-636fa80aced5",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd25caf4-1e80-41a8-b639-e5cdd1deae4b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2dc170b2-1789-4637-9ae3-3a5b3fc96954",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7467b165-aaf2-4bcc-afa7-69d46f77086e",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5ab4626d-8145-4f57-b52b-47950625f34a",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6ae929f5-b085-4f88-8447-3a2d6edb9aa2",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f85af43-789c-4b85-be63-2b8ec478754b",
            "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 263
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b74af84-fd92-46a6-894a-42956ce7a9ec",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FEHLENDE_FELDER');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8929f623-d4c3-4838-b609-d86cb9cb168f",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', password: 'neuesPW', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2115f36b-6d71-4434-ae6f-51e8a4ab07a0",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send(user)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.token).to.exist;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "94e65885-9a75-447d-8a12-d67e7c9fc059",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cfa8fe93-701f-44c8-9242-e81fe2241bda",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9cf03c21-fdce-4655-bd04-34046ec1b1a4",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b34042a9-a661-44b6-bd85-c559a301a707",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "397fc652-8464-4edb-91d0-cff856b4466d",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ff9b90ce-cad7-4dbe-8379-ca57bc58c107",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4edfbd7d-e0be-4739-84cf-1b56651b9e87",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc5aee93-d4ab-4767-8817-40849c079027",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "82c9d089-e448-47cb-8283-0a49a7e59d51",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b74af84-fd92-46a6-894a-42956ce7a9ec",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FEHLENDE_FELDER');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8929f623-d4c3-4838-b609-d86cb9cb168f",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', password: 'neuesPW', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2115f36b-6d71-4434-ae6f-51e8a4ab07a0",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send(user)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.token).to.exist;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "94e65885-9a75-447d-8a12-d67e7c9fc059",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cfa8fe93-701f-44c8-9242-e81fe2241bda",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9cf03c21-fdce-4655-bd04-34046ec1b1a4",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b34042a9-a661-44b6-bd85-c559a301a707",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "397fc652-8464-4edb-91d0-cff856b4466d",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ff9b90ce-cad7-4dbe-8379-ca57bc58c107",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4edfbd7d-e0be-4739-84cf-1b56651b9e87",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc5aee93-d4ab-4767-8817-40849c079027",
            "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 145
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "22362aae-df21-4e49-a731-0997bcef4bac",
                "parentUUID": "daf1f650-acd4-407d-9ee0-2adb002e7767",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/authorization/authorization.spec.js",
            "uuid": "daf1f650-acd4-407d-9ee0-2adb002e7767",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "22362aae-df21-4e49-a731-0997bcef4bac",
                "parentUUID": "daf1f650-acd4-407d-9ee0-2adb002e7767",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 13
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f6f5550-4f04-4f9c-bcf7-ab70e22a35d6",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7d53e218-f763-43f5-9233-219fc6f8b689",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "05f405f5-a8c8-4d57-b446-d677fb4aa48f",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5bbefad6-7bf0-4871-bde0-56dc0f9c7e27",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7aab0a43-ba2f-4110-9e7b-b3a82cb8b4c1",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa5f650e-4cba-4562-bc3a-46afb4a03d0e",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/authorization/authorization.spec.js",
            "uuid": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f6f5550-4f04-4f9c-bcf7-ab70e22a35d6",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7d53e218-f763-43f5-9233-219fc6f8b689",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "05f405f5-a8c8-4d57-b446-d677fb4aa48f",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5bbefad6-7bf0-4871-bde0-56dc0f9c7e27",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7aab0a43-ba2f-4110-9e7b-b3a82cb8b4c1",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa5f650e-4cba-4562-bc3a-46afb4a03d0e",
                "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 54
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94b43cde-1314-41a0-82c0-b4b7c80b1f7d",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7011e5ad-c5f3-4c2a-9365-0ec0428b3f95",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a73374fd-9adc-4aaf-b057-33f394110239",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "4a196e54-b00b-40a9-bd95-967eea16f738",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94b43cde-1314-41a0-82c0-b4b7c80b1f7d",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7011e5ad-c5f3-4c2a-9365-0ec0428b3f95",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a73374fd-9adc-4aaf-b057-33f394110239",
                    "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "729e055b-a048-4f5e-8f9c-2a5284f3e7e7",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be66a32e-dbee-444d-89e5-0d09eb5e8b79",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c857082-8570-408c-855f-a50e560bc147",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "1c5af022-457f-4303-a72f-9b1f03067e42",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "729e055b-a048-4f5e-8f9c-2a5284f3e7e7",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be66a32e-dbee-444d-89e5-0d09eb5e8b79",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c857082-8570-408c-855f-a50e560bc147",
                    "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 36
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b5fdb9c-180f-4092-b37a-b9e408becfc7",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f343de9-1d32-4baa-ac2e-fc4a63046288",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "472d8ed9-a897-47ed-aaad-448255424d36",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fce828b-666b-4461-aefa-59d231d35396",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f1f8ab3-7853-4712-bb86-ef540d62df8c",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8e982c4-a8a1-4fa2-b4d7-9bdb3564779f",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b5fdb9c-180f-4092-b37a-b9e408becfc7",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f343de9-1d32-4baa-ac2e-fc4a63046288",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "472d8ed9-a897-47ed-aaad-448255424d36",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fce828b-666b-4461-aefa-59d231d35396",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f1f8ab3-7853-4712-bb86-ef540d62df8c",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8e982c4-a8a1-4fa2-b4d7-9bdb3564779f",
                    "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 50
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9827532-14eb-435f-9c75-6b7d75116e60",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b7cb186-3b4c-4e74-8729-4e152260ea02",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "739f9cef-54dd-474d-af9d-367a84fe2241",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c59b143-29b8-4de9-bcc6-45bc42b34e16",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eef8cb2c-e30c-49f7-855b-fcc640987e09",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1ed1a95-3156-4841-9734-19e88084b64a",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bb0f539-b737-4d29-8a8a-1444a1d597b5",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40531a22-2702-4794-a159-ea5a50799f76",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31a45f67-09e3-43db-92b7-b203b9d56d3f",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9827532-14eb-435f-9c75-6b7d75116e60",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b7cb186-3b4c-4e74-8729-4e152260ea02",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "739f9cef-54dd-474d-af9d-367a84fe2241",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c59b143-29b8-4de9-bcc6-45bc42b34e16",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eef8cb2c-e30c-49f7-855b-fcc640987e09",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1ed1a95-3156-4841-9734-19e88084b64a",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bb0f539-b737-4d29-8a8a-1444a1d597b5",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40531a22-2702-4794-a159-ea5a50799f76",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31a45f67-09e3-43db-92b7-b203b9d56d3f",
                    "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 119
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77f9db21-ccd0-4cdb-8f0e-ef4e8bc63dd7",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cbda61e-170e-4cf1-bcb2-8fb66f06e2de",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74c86748-456f-4616-af1c-b563743d8874",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06a7614b-c35c-40c9-bfeb-c78c4ecf7760",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "964e0fdb-b7fa-4b21-8a95-d80febbcd381",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe5a73e9-bb21-485b-8150-76e9fdc8f32c",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fa64712-67ee-436e-98c4-81db821aa57c",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "830c69d0-e87c-46fc-a0fc-ea44385f8478",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "237e9dd4-65fe-4de2-b34c-1a537c0f6109",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf13f67e-89d5-48ca-af0e-48e986a65c15",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f3efa6f-24c1-4080-bd45-6f71c16eb014",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b557305-cb47-4f9a-bd15-ea5f8d92fae0",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "0e192942-2180-42cf-902a-409903cc2125",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77f9db21-ccd0-4cdb-8f0e-ef4e8bc63dd7",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cbda61e-170e-4cf1-bcb2-8fb66f06e2de",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74c86748-456f-4616-af1c-b563743d8874",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06a7614b-c35c-40c9-bfeb-c78c4ecf7760",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "964e0fdb-b7fa-4b21-8a95-d80febbcd381",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe5a73e9-bb21-485b-8150-76e9fdc8f32c",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fa64712-67ee-436e-98c4-81db821aa57c",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "830c69d0-e87c-46fc-a0fc-ea44385f8478",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "237e9dd4-65fe-4de2-b34c-1a537c0f6109",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf13f67e-89d5-48ca-af0e-48e986a65c15",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f3efa6f-24c1-4080-bd45-6f71c16eb014",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b557305-cb47-4f9a-bd15-ea5f8d92fae0",
                    "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 121
              },
              {
                "title": "die Route /api/jugenden soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6330538-a62d-46c1-a38f-3fbbac5e35cc",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3cd0e398-bc72-4f12-9bd5-e512b22f9b30",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86db88bf-e677-4bbf-9a88-d1bdf41b7c73",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04452e8f-8af2-49ab-bd3b-e5fb66c95b36",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bda862a9-b5a7-45da-aeb9-d08311719bb2",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41f22f18-7c98-4894-a4a3-e764fd212536",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "466ab897-7d14-47cb-9c51-41102096b3c1",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6330538-a62d-46c1-a38f-3fbbac5e35cc",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3cd0e398-bc72-4f12-9bd5-e512b22f9b30",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86db88bf-e677-4bbf-9a88-d1bdf41b7c73",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04452e8f-8af2-49ab-bd3b-e5fb66c95b36",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bda862a9-b5a7-45da-aeb9-d08311719bb2",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41f22f18-7c98-4894-a4a3-e764fd212536",
                    "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 67
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b0822ea-e3e6-446e-b4e1-73494e160bd2",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58e3e793-9417-40c6-9271-8dda59893ced",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2b23b20-4156-4917-be0c-e96abd2e4700",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c306a34-7d06-4a80-89a4-2611ed238687",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea7d42ba-4bb8-4435-90c2-9a7d0fe0bea4",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04e3082b-f107-44d9-8069-51e2a67e57f6",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "0ae6f7fa-2411-4a51-9189-05069c372891",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b0822ea-e3e6-446e-b4e1-73494e160bd2",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58e3e793-9417-40c6-9271-8dda59893ced",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2b23b20-4156-4917-be0c-e96abd2e4700",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c306a34-7d06-4a80-89a4-2611ed238687",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea7d42ba-4bb8-4435-90c2-9a7d0fe0bea4",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04e3082b-f107-44d9-8069-51e2a67e57f6",
                    "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 65
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47a91266-628e-4ef7-87dd-ef70f9f446a7",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "966e1729-ad65-4f86-be4d-d28e08984feb",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d60dd8a-fb23-41de-886b-31804545172e",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5284de51-3999-4047-a1b3-a98f37212859",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6b9daa3-ac56-40e1-9911-f9801803f12a",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6d8211e-1e5d-491b-86d5-1f624ce51e42",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddbb6914-e01c-4627-916e-7fe866f009e9",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a70b81f8-4dee-4a9c-b0b8-61c8bdba7b21",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e50e9db-35c0-40f7-9514-39ca2b47e40f",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f70f292-7965-4a01-b310-d1b7214af3e2",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4e7b9a4-7251-4e65-a580-3b469be0a879",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf006f04-bc0b-4ee6-a48b-599b022a192a",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47a91266-628e-4ef7-87dd-ef70f9f446a7",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "966e1729-ad65-4f86-be4d-d28e08984feb",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d60dd8a-fb23-41de-886b-31804545172e",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5284de51-3999-4047-a1b3-a98f37212859",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6b9daa3-ac56-40e1-9911-f9801803f12a",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6d8211e-1e5d-491b-86d5-1f624ce51e42",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddbb6914-e01c-4627-916e-7fe866f009e9",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a70b81f8-4dee-4a9c-b0b8-61c8bdba7b21",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e50e9db-35c0-40f7-9514-39ca2b47e40f",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f70f292-7965-4a01-b310-d1b7214af3e2",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4e7b9a4-7251-4e65-a580-3b469be0a879",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf006f04-bc0b-4ee6-a48b-599b022a192a",
                    "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 122
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db9a550f-ea53-466c-a077-b3caa882bbb5",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6db3bc9-1d41-4872-a66e-00354d0cb21e",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6f65f70-f919-46c1-83b6-2af4dbe9a9d4",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac4f5a4f-e27c-4a34-a12e-cd257b31feef",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a9bc60b-9202-49b0-ab3f-083000e015cf",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea6a38ff-a54f-4b9a-bc6a-58178bc0a0b6",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db9a550f-ea53-466c-a077-b3caa882bbb5",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6db3bc9-1d41-4872-a66e-00354d0cb21e",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6f65f70-f919-46c1-83b6-2af4dbe9a9d4",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac4f5a4f-e27c-4a34-a12e-cd257b31feef",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a9bc60b-9202-49b0-ab3f-083000e015cf",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea6a38ff-a54f-4b9a-bc6a-58178bc0a0b6",
                    "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 50
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "baffe950-ac4b-4236-b8c7-8d2002d0bbf5",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80d846ed-a0d0-428f-887a-f3608c0f24b6",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 186,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cbadfc88-c1bd-47f5-a488-5e6fcca21271",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "baffe950-ac4b-4236-b8c7-8d2002d0bbf5",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80d846ed-a0d0-428f-887a-f3608c0f24b6",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 186,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cbadfc88-c1bd-47f5-a488-5e6fcca21271",
                    "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 224
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4963a60-3cf4-4b4b-90a2-6eacb1565064",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbd7a018-aedb-46b0-8b7a-de364b8fa586",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f038bcd4-f9b7-4ec4-8f8c-3521ab9c4baf",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4963a60-3cf4-4b4b-90a2-6eacb1565064",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbd7a018-aedb-46b0-8b7a-de364b8fa586",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f038bcd4-f9b7-4ec4-8f8c-3521ab9c4baf",
                    "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 15
              },
              {
                "title": "die Route /api/spielplan/ausnahmen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bb3f1d5-4c4b-4e2b-b049-2e20c952cbb3",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1f9bc18-9c74-4296-ae81-3221dba0c42b",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55eef82f-a545-4117-a45c-ae349ed18a90",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c438a4c-166b-4eb8-8360-0729064294f1",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "318a8705-627e-49f4-893b-fae3e735f7fe",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a258544-0f61-4299-a093-d8e0d74d158d",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d609763-19e2-428a-aaab-2fef8892a630",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "652a0651-9bb5-4a3f-a59f-b2f387d827ba",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b55f6c5-6d64-4b27-9093-8015bf898c75",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80ecaa8d-b3cf-4024-bb14-1c2f6759c381",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e0feb56-f64b-4aca-9cb1-4e7e7a0d3f0b",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53b9e6c5-ec98-4027-807e-9d8ab861e6d4",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bb3f1d5-4c4b-4e2b-b049-2e20c952cbb3",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1f9bc18-9c74-4296-ae81-3221dba0c42b",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55eef82f-a545-4117-a45c-ae349ed18a90",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c438a4c-166b-4eb8-8360-0729064294f1",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "318a8705-627e-49f4-893b-fae3e735f7fe",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a258544-0f61-4299-a093-d8e0d74d158d",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d609763-19e2-428a-aaab-2fef8892a630",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "652a0651-9bb5-4a3f-a59f-b2f387d827ba",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b55f6c5-6d64-4b27-9093-8015bf898c75",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80ecaa8d-b3cf-4024-bb14-1c2f6759c381",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e0feb56-f64b-4aca-9cb1-4e7e7a0d3f0b",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53b9e6c5-ec98-4027-807e-9d8ab861e6d4",
                    "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 90
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "662ac5cc-8afb-44c8-8b40-0a892debba05",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af0c0660-ec63-46ba-84d3-f833d2fc3494",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b78cf075-7f68-4e3e-93d7-ca37cd90befe",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d9813e4-9347-4b99-aa81-6fccbbe363f7",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c0a527b-8a33-4a84-83b9-78fad741d706",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64a986d0-485e-44e4-8ac1-04d6eabb328a",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44948fa2-7134-4702-8ea5-9267ee491d8b",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56150fdf-1a9a-43b4-9b60-6ef75b000dde",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a608f6e0-070b-4b3c-b37c-6ffc461efae0",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7bf7ed3-d98f-4936-b738-18d12558b42f",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e6bc20d-620d-49a5-a590-caa34f9fb2e7",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27a0036a-4af4-401a-b639-76c921e7eb02",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "a7287a10-3e5e-4594-8029-c25b4699e876",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "662ac5cc-8afb-44c8-8b40-0a892debba05",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af0c0660-ec63-46ba-84d3-f833d2fc3494",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b78cf075-7f68-4e3e-93d7-ca37cd90befe",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d9813e4-9347-4b99-aa81-6fccbbe363f7",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c0a527b-8a33-4a84-83b9-78fad741d706",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64a986d0-485e-44e4-8ac1-04d6eabb328a",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44948fa2-7134-4702-8ea5-9267ee491d8b",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56150fdf-1a9a-43b4-9b60-6ef75b000dde",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a608f6e0-070b-4b3c-b37c-6ffc461efae0",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7bf7ed3-d98f-4936-b738-18d12558b42f",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e6bc20d-620d-49a5-a590-caa34f9fb2e7",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27a0036a-4af4-401a-b639-76c921e7eb02",
                    "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 98
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebb70d3f-7ca6-449d-8e00-712329d00834",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b934acc-5230-42f2-b6f6-a5a89e71b855",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "957d25c4-17fd-40b0-ac5f-222fd92667c1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10a1c6fc-26bd-4e1f-866c-e0aa5aa64b44",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f39d47b-c6ba-4111-ae3e-a2abf4b21acc",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "906611f1-3675-4094-a8a3-4f4a7c41a52b",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13b8a0e0-52a2-4ed9-b2e4-300ef766165f",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "785161c2-f3d0-42ef-bc11-c1f1b21a4cb9",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f090a703-3f0c-476f-945e-e4d372b185e0",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78633010-b46c-41ab-89bd-7c44645c26a1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60365483-816f-4999-b33a-0e808a651ff1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "424ed110-8f8b-4dd2-81e2-1d65477ecf40",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/authorization/authorization.spec.js",
                "uuid": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebb70d3f-7ca6-449d-8e00-712329d00834",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b934acc-5230-42f2-b6f6-a5a89e71b855",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "957d25c4-17fd-40b0-ac5f-222fd92667c1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10a1c6fc-26bd-4e1f-866c-e0aa5aa64b44",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f39d47b-c6ba-4111-ae3e-a2abf4b21acc",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "906611f1-3675-4094-a8a3-4f4a7c41a52b",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13b8a0e0-52a2-4ed9-b2e4-300ef766165f",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "785161c2-f3d0-42ef-bc11-c1f1b21a4cb9",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f090a703-3f0c-476f-945e-e4d372b185e0",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78633010-b46c-41ab-89bd-7c44645c26a1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60365483-816f-4999-b33a-0e808a651ff1",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "424ed110-8f8b-4dd2-81e2-1d65477ecf40",
                    "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 112
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/authorization/authorization.spec.js",
            "uuid": "094b5068-58fa-4a04-8b3f-37ea3c9829c5",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/authorization/authorization.spec.js",
        "uuid": "834c9ed5-53d0-45ea-bddb-3813bb05ed17",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/authorization/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "a74360de-c4d4-4ac6-bc60-2180fad883bc",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "05891bd9-40d1-4acf-9418-309c53ca3d1c",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "96922c99-a9f0-42dc-bd68-07ae55332df6",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50b24b2c-e49b-4a82-b442-145ef068737e",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt die Kontaktangaben zurück",
      "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5e86360a-c1a7-41fd-801a-fcda72b40fbc",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "941dcc13-f1c4-4e31-80d8-2bcf635e9b7e",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd0df89b-5781-4b4e-9075-a7b169465903",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78d37d29-5be4-4dd9-a1cd-6ecc0833d6f0",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb48c345-8156-4239-89b0-7a1e91ca098a",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c719579b-7041-458b-bfad-a098b4d242d8",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b4a7badb-8689-4200-abf8-2afcbffce54a",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5680c00b-1c45-4dc9-bd34-f32287e70a36",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f72a15db-781e-4903-8c5f-3c32b28b7230",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d9fef05-8980-46b3-b78c-752c8e090d10",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34195f33-dfdc-4b2c-9976-32c70abff9aa",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0117a2fd-9b7f-49bd-b87c-6b66969824bc",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52a6f5f8-a6c6-471a-96ef-021df1654dde",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "407b5626-1b7c-47e7-bff5-453d481e6370",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28b13c41-d4f5-4017-b728-3d711d1aab00",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8439f60a-79cc-4f86-8b7f-15c7d701563f",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5380380b-ef1d-4aa1-ad20-9c37857cad2b",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ce34fec-2e6e-4a6a-a794-75c36b49d6f6",
      "parentUUID": "5d25c277-fc00-4bc6-81d1-588ab0724d4b",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a671a70-142b-4022-b165-7ebe619e1763",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63dff469-215a-441d-8e08-ce6c695ce645",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80848257-ea37-4969-bbba-51e10c65a6c2",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "72088386-4b58-438a-877d-f382e81f77c6",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1676b37a-c58c-48a7-9a09-9beca1f028a2",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "02606366-d9cc-44c6-8caa-4398762f0a6b",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b247f27b-fb47-4b36-8eba-9242453dfa14",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6f22f7c7-3878-4961-8c27-ee7bb5606aaa",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "508bb680-f2c6-48c0-bf89-350963dfdc42",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9b951a2-2476-44d1-9d16-00faa4ed6352",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c9a521b3-01b0-4a59-9cfb-49c4def7c2c0",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6352712d-485d-47be-afb2-f8d9ca979297",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd825b3b-1efd-4a7a-94d4-882f19c47a41",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9b8b6e1-5476-4dcb-bdb5-00af1bb0204d",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "636aef2a-7b8c-49bb-9468-dd9438f460ad",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5664597d-8e2e-4038-8f72-6df7f8b214b3",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74268ab9-e099-41bf-9f36-e07e421087c6",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd33bf60-1bb1-488f-a3ba-7e2fe5b310cb",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0b45f43-d1ec-4f13-8684-e64a6c35e9c9",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "632669e6-4077-4bd3-b4d7-920468913026",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d40b3d5-f80d-418e-8c10-3501861765e6",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c065011-3adf-45a9-99e8-09fa4316c7ae",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f04bbe9-0c68-4773-8f27-1bd1403b854e",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70b9c1e3-ccfa-4408-ae80-cb40fb65aba7",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e51bf9af-f0ce-4b04-baa3-6eb6276863b7",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fd6da98-8ecd-4281-bcb8-e55bbbd4118a",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc4c144d-211c-4daf-bc7d-ddf9f7ad40f3",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55c3e378-bc78-4885-8d61-e9681daafa0e",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0302a52-7c25-452c-9883-9d30a2e74280",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen speichern",
      "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a75452b-c545-4233-acb7-27118a2b80bf",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen laden",
      "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dbb61e52-ce1d-457d-9931-ed39bcf80f11",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f461b65b-3c0a-4e71-85c6-b665e85c1f1b",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6e6f0c5-f6bc-4ab7-9620-3635a55393b6",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(teamid);\n        expect(response.body[0].name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e05ec78-5369-4a91-99c1-38ef8c24fc8b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b590cff6-4996-4ae2-ab26-e95ec3ec2758",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11c03644-c197-4f03-b3f1-23d055ab1503",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a034f90-bbfa-4453-adbf-636fa80aced5",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd25caf4-1e80-41a8-b639-e5cdd1deae4b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2dc170b2-1789-4637-9ae3-3a5b3fc96954",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7467b165-aaf2-4bcc-afa7-69d46f77086e",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ab4626d-8145-4f57-b52b-47950625f34a",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ae929f5-b085-4f88-8447-3a2d6edb9aa2",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f85af43-789c-4b85-be63-2b8ec478754b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b74af84-fd92-46a6-894a-42956ce7a9ec",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FEHLENDE_FELDER');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8929f623-d4c3-4838-b609-d86cb9cb168f",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', password: 'neuesPW', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2115f36b-6d71-4434-ae6f-51e8a4ab07a0",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send(user)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.token).to.exist;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94e65885-9a75-447d-8a12-d67e7c9fc059",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cfa8fe93-701f-44c8-9242-e81fe2241bda",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cf03c21-fdce-4655-bd04-34046ec1b1a4",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b34042a9-a661-44b6-bd85-c559a301a707",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "397fc652-8464-4edb-91d0-cff856b4466d",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff9b90ce-cad7-4dbe-8379-ca57bc58c107",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4edfbd7d-e0be-4739-84cf-1b56651b9e87",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc5aee93-d4ab-4767-8817-40849c079027",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22362aae-df21-4e49-a731-0997bcef4bac",
      "parentUUID": "daf1f650-acd4-407d-9ee0-2adb002e7767",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f6f5550-4f04-4f9c-bcf7-ab70e22a35d6",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d53e218-f763-43f5-9233-219fc6f8b689",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05f405f5-a8c8-4d57-b446-d677fb4aa48f",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5bbefad6-7bf0-4871-bde0-56dc0f9c7e27",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7aab0a43-ba2f-4110-9e7b-b3a82cb8b4c1",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa5f650e-4cba-4562-bc3a-46afb4a03d0e",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94b43cde-1314-41a0-82c0-b4b7c80b1f7d",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7011e5ad-c5f3-4c2a-9365-0ec0428b3f95",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73374fd-9adc-4aaf-b057-33f394110239",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "729e055b-a048-4f5e-8f9c-2a5284f3e7e7",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be66a32e-dbee-444d-89e5-0d09eb5e8b79",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c857082-8570-408c-855f-a50e560bc147",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b5fdb9c-180f-4092-b37a-b9e408becfc7",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f343de9-1d32-4baa-ac2e-fc4a63046288",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "472d8ed9-a897-47ed-aaad-448255424d36",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fce828b-666b-4461-aefa-59d231d35396",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7f1f8ab3-7853-4712-bb86-ef540d62df8c",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8e982c4-a8a1-4fa2-b4d7-9bdb3564779f",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9827532-14eb-435f-9c75-6b7d75116e60",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b7cb186-3b4c-4e74-8729-4e152260ea02",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "739f9cef-54dd-474d-af9d-367a84fe2241",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c59b143-29b8-4de9-bcc6-45bc42b34e16",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eef8cb2c-e30c-49f7-855b-fcc640987e09",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1ed1a95-3156-4841-9734-19e88084b64a",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9bb0f539-b737-4d29-8a8a-1444a1d597b5",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40531a22-2702-4794-a159-ea5a50799f76",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "31a45f67-09e3-43db-92b7-b203b9d56d3f",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77f9db21-ccd0-4cdb-8f0e-ef4e8bc63dd7",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cbda61e-170e-4cf1-bcb2-8fb66f06e2de",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74c86748-456f-4616-af1c-b563743d8874",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06a7614b-c35c-40c9-bfeb-c78c4ecf7760",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "964e0fdb-b7fa-4b21-8a95-d80febbcd381",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe5a73e9-bb21-485b-8150-76e9fdc8f32c",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fa64712-67ee-436e-98c4-81db821aa57c",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "830c69d0-e87c-46fc-a0fc-ea44385f8478",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "237e9dd4-65fe-4de2-b34c-1a537c0f6109",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf13f67e-89d5-48ca-af0e-48e986a65c15",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f3efa6f-24c1-4080-bd45-6f71c16eb014",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b557305-cb47-4f9a-bd15-ea5f8d92fae0",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b6330538-a62d-46c1-a38f-3fbbac5e35cc",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cd0e398-bc72-4f12-9bd5-e512b22f9b30",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86db88bf-e677-4bbf-9a88-d1bdf41b7c73",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04452e8f-8af2-49ab-bd3b-e5fb66c95b36",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bda862a9-b5a7-45da-aeb9-d08311719bb2",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41f22f18-7c98-4894-a4a3-e764fd212536",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b0822ea-e3e6-446e-b4e1-73494e160bd2",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58e3e793-9417-40c6-9271-8dda59893ced",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2b23b20-4156-4917-be0c-e96abd2e4700",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c306a34-7d06-4a80-89a4-2611ed238687",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea7d42ba-4bb8-4435-90c2-9a7d0fe0bea4",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04e3082b-f107-44d9-8069-51e2a67e57f6",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47a91266-628e-4ef7-87dd-ef70f9f446a7",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "966e1729-ad65-4f86-be4d-d28e08984feb",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d60dd8a-fb23-41de-886b-31804545172e",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5284de51-3999-4047-a1b3-a98f37212859",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6b9daa3-ac56-40e1-9911-f9801803f12a",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6d8211e-1e5d-491b-86d5-1f624ce51e42",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddbb6914-e01c-4627-916e-7fe866f009e9",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a70b81f8-4dee-4a9c-b0b8-61c8bdba7b21",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1e50e9db-35c0-40f7-9514-39ca2b47e40f",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7f70f292-7965-4a01-b310-d1b7214af3e2",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4e7b9a4-7251-4e65-a580-3b469be0a879",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf006f04-bc0b-4ee6-a48b-599b022a192a",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db9a550f-ea53-466c-a077-b3caa882bbb5",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d6db3bc9-1d41-4872-a66e-00354d0cb21e",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6f65f70-f919-46c1-83b6-2af4dbe9a9d4",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac4f5a4f-e27c-4a34-a12e-cd257b31feef",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a9bc60b-9202-49b0-ab3f-083000e015cf",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea6a38ff-a54f-4b9a-bc6a-58178bc0a0b6",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "baffe950-ac4b-4236-b8c7-8d2002d0bbf5",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80d846ed-a0d0-428f-887a-f3608c0f24b6",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 186,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cbadfc88-c1bd-47f5-a488-5e6fcca21271",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f4963a60-3cf4-4b4b-90a2-6eacb1565064",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bbd7a018-aedb-46b0-8b7a-de364b8fa586",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f038bcd4-f9b7-4ec4-8f8c-3521ab9c4baf",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bb3f1d5-4c4b-4e2b-b049-2e20c952cbb3",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e1f9bc18-9c74-4296-ae81-3221dba0c42b",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55eef82f-a545-4117-a45c-ae349ed18a90",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c438a4c-166b-4eb8-8360-0729064294f1",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "318a8705-627e-49f4-893b-fae3e735f7fe",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a258544-0f61-4299-a093-d8e0d74d158d",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d609763-19e2-428a-aaab-2fef8892a630",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "652a0651-9bb5-4a3f-a59f-b2f387d827ba",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b55f6c5-6d64-4b27-9093-8015bf898c75",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80ecaa8d-b3cf-4024-bb14-1c2f6759c381",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e0feb56-f64b-4aca-9cb1-4e7e7a0d3f0b",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53b9e6c5-ec98-4027-807e-9d8ab861e6d4",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "662ac5cc-8afb-44c8-8b40-0a892debba05",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "af0c0660-ec63-46ba-84d3-f833d2fc3494",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b78cf075-7f68-4e3e-93d7-ca37cd90befe",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d9813e4-9347-4b99-aa81-6fccbbe363f7",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c0a527b-8a33-4a84-83b9-78fad741d706",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64a986d0-485e-44e4-8ac1-04d6eabb328a",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44948fa2-7134-4702-8ea5-9267ee491d8b",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "56150fdf-1a9a-43b4-9b60-6ef75b000dde",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a608f6e0-070b-4b3c-b37c-6ffc461efae0",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7bf7ed3-d98f-4936-b738-18d12558b42f",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e6bc20d-620d-49a5-a590-caa34f9fb2e7",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27a0036a-4af4-401a-b639-76c921e7eb02",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebb70d3f-7ca6-449d-8e00-712329d00834",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b934acc-5230-42f2-b6f6-a5a89e71b855",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "957d25c4-17fd-40b0-ac5f-222fd92667c1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10a1c6fc-26bd-4e1f-866c-e0aa5aa64b44",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f39d47b-c6ba-4111-ae3e-a2abf4b21acc",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "906611f1-3675-4094-a8a3-4f4a7c41a52b",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13b8a0e0-52a2-4ed9-b2e4-300ef766165f",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "785161c2-f3d0-42ef-bc11-c1f1b21a4cb9",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f090a703-3f0c-476f-945e-e4d372b185e0",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78633010-b46c-41ab-89bd-7c44645c26a1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60365483-816f-4999-b33a-0e808a651ff1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "424ed110-8f8b-4dd2-81e2-1d65477ecf40",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "05891bd9-40d1-4acf-9418-309c53ca3d1c",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "96922c99-a9f0-42dc-bd68-07ae55332df6",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50b24b2c-e49b-4a82-b442-145ef068737e",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "gibt die Kontaktangaben zurück",
      "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5e86360a-c1a7-41fd-801a-fcda72b40fbc",
      "parentUUID": "481fe7be-c4b6-46df-8ebc-17144dad002f",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "941dcc13-f1c4-4e31-80d8-2bcf635e9b7e",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd0df89b-5781-4b4e-9075-a7b169465903",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78d37d29-5be4-4dd9-a1cd-6ecc0833d6f0",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb48c345-8156-4239-89b0-7a1e91ca098a",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c719579b-7041-458b-bfad-a098b4d242d8",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b4a7badb-8689-4200-abf8-2afcbffce54a",
      "parentUUID": "f1b0a5fc-877e-4fe4-bf55-8aeda1e7be21",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5680c00b-1c45-4dc9-bd34-f32287e70a36",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f72a15db-781e-4903-8c5f-3c32b28b7230",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d9fef05-8980-46b3-b78c-752c8e090d10",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34195f33-dfdc-4b2c-9976-32c70abff9aa",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0117a2fd-9b7f-49bd-b87c-6b66969824bc",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52a6f5f8-a6c6-471a-96ef-021df1654dde",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "407b5626-1b7c-47e7-bff5-453d481e6370",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28b13c41-d4f5-4017-b728-3d711d1aab00",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8439f60a-79cc-4f86-8b7f-15c7d701563f",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5380380b-ef1d-4aa1-ad20-9c37857cad2b",
      "parentUUID": "eb0cf791-8948-4514-8794-dff1e1e6e1b8",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ce34fec-2e6e-4a6a-a794-75c36b49d6f6",
      "parentUUID": "5d25c277-fc00-4bc6-81d1-588ab0724d4b",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a671a70-142b-4022-b165-7ebe619e1763",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63dff469-215a-441d-8e08-ce6c695ce645",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80848257-ea37-4969-bbba-51e10c65a6c2",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "72088386-4b58-438a-877d-f382e81f77c6",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1676b37a-c58c-48a7-9a09-9beca1f028a2",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "02606366-d9cc-44c6-8caa-4398762f0a6b",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b247f27b-fb47-4b36-8eba-9242453dfa14",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6f22f7c7-3878-4961-8c27-ee7bb5606aaa",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "508bb680-f2c6-48c0-bf89-350963dfdc42",
      "parentUUID": "d1815920-e68e-4148-9270-04f2ddfc2aa7",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9b951a2-2476-44d1-9d16-00faa4ed6352",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c9a521b3-01b0-4a59-9cfb-49c4def7c2c0",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6352712d-485d-47be-afb2-f8d9ca979297",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd825b3b-1efd-4a7a-94d4-882f19c47a41",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9b8b6e1-5476-4dcb-bdb5-00af1bb0204d",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "636aef2a-7b8c-49bb-9468-dd9438f460ad",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5664597d-8e2e-4038-8f72-6df7f8b214b3",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74268ab9-e099-41bf-9f36-e07e421087c6",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd33bf60-1bb1-488f-a3ba-7e2fe5b310cb",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0b45f43-d1ec-4f13-8684-e64a6c35e9c9",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "632669e6-4077-4bd3-b4d7-920468913026",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d40b3d5-f80d-418e-8c10-3501861765e6",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c065011-3adf-45a9-99e8-09fa4316c7ae",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f04bbe9-0c68-4773-8f27-1bd1403b854e",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70b9c1e3-ccfa-4408-ae80-cb40fb65aba7",
      "parentUUID": "c877f551-27f1-4edc-98a9-adcc221b4e30",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e51bf9af-f0ce-4b04-baa3-6eb6276863b7",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fd6da98-8ecd-4281-bcb8-e55bbbd4118a",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc4c144d-211c-4daf-bc7d-ddf9f7ad40f3",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55c3e378-bc78-4885-8d61-e9681daafa0e",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0302a52-7c25-452c-9883-9d30a2e74280",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen speichern",
      "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a75452b-c545-4233-acb7-27118a2b80bf",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen laden",
      "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dbb61e52-ce1d-457d-9931-ed39bcf80f11",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f461b65b-3c0a-4e71-85c6-b665e85c1f1b",
      "parentUUID": "6b626b0e-a827-4ebf-8488-4ff1eb8777ab",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6e6f0c5-f6bc-4ab7-9620-3635a55393b6",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(teamid);\n        expect(response.body[0].name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e05ec78-5369-4a91-99c1-38ef8c24fc8b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b590cff6-4996-4ae2-ab26-e95ec3ec2758",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11c03644-c197-4f03-b3f1-23d055ab1503",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a034f90-bbfa-4453-adbf-636fa80aced5",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd25caf4-1e80-41a8-b639-e5cdd1deae4b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2dc170b2-1789-4637-9ae3-3a5b3fc96954",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7467b165-aaf2-4bcc-afa7-69d46f77086e",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ab4626d-8145-4f57-b52b-47950625f34a",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ae929f5-b085-4f88-8447-3a2d6edb9aa2",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f85af43-789c-4b85-be63-2b8ec478754b",
      "parentUUID": "1fbe2218-8db3-4e98-b7ad-0bb8ec6b6431",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b74af84-fd92-46a6-894a-42956ce7a9ec",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FEHLENDE_FELDER');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8929f623-d4c3-4838-b609-d86cb9cb168f",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', password: 'neuesPW', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2115f36b-6d71-4434-ae6f-51e8a4ab07a0",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send(user)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.token).to.exist;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94e65885-9a75-447d-8a12-d67e7c9fc059",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cfa8fe93-701f-44c8-9242-e81fe2241bda",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cf03c21-fdce-4655-bd04-34046ec1b1a4",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b34042a9-a661-44b6-bd85-c559a301a707",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "397fc652-8464-4edb-91d0-cff856b4466d",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff9b90ce-cad7-4dbe-8379-ca57bc58c107",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4edfbd7d-e0be-4739-84cf-1b56651b9e87",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc5aee93-d4ab-4767-8817-40849c079027",
      "parentUUID": "82c9d089-e448-47cb-8283-0a49a7e59d51",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22362aae-df21-4e49-a731-0997bcef4bac",
      "parentUUID": "daf1f650-acd4-407d-9ee0-2adb002e7767",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f6f5550-4f04-4f9c-bcf7-ab70e22a35d6",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d53e218-f763-43f5-9233-219fc6f8b689",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05f405f5-a8c8-4d57-b446-d677fb4aa48f",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5bbefad6-7bf0-4871-bde0-56dc0f9c7e27",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7aab0a43-ba2f-4110-9e7b-b3a82cb8b4c1",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa5f650e-4cba-4562-bc3a-46afb4a03d0e",
      "parentUUID": "51bdcfd4-578e-4e9a-bcd1-feba3eea1ca7",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94b43cde-1314-41a0-82c0-b4b7c80b1f7d",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7011e5ad-c5f3-4c2a-9365-0ec0428b3f95",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73374fd-9adc-4aaf-b057-33f394110239",
      "parentUUID": "4a196e54-b00b-40a9-bd95-967eea16f738",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "729e055b-a048-4f5e-8f9c-2a5284f3e7e7",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be66a32e-dbee-444d-89e5-0d09eb5e8b79",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c857082-8570-408c-855f-a50e560bc147",
      "parentUUID": "1c5af022-457f-4303-a72f-9b1f03067e42",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b5fdb9c-180f-4092-b37a-b9e408becfc7",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f343de9-1d32-4baa-ac2e-fc4a63046288",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "472d8ed9-a897-47ed-aaad-448255424d36",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fce828b-666b-4461-aefa-59d231d35396",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7f1f8ab3-7853-4712-bb86-ef540d62df8c",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8e982c4-a8a1-4fa2-b4d7-9bdb3564779f",
      "parentUUID": "64575f41-7bf2-49c2-9a5a-24e302eabe73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9827532-14eb-435f-9c75-6b7d75116e60",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b7cb186-3b4c-4e74-8729-4e152260ea02",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "739f9cef-54dd-474d-af9d-367a84fe2241",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c59b143-29b8-4de9-bcc6-45bc42b34e16",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eef8cb2c-e30c-49f7-855b-fcc640987e09",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1ed1a95-3156-4841-9734-19e88084b64a",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9bb0f539-b737-4d29-8a8a-1444a1d597b5",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40531a22-2702-4794-a159-ea5a50799f76",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "31a45f67-09e3-43db-92b7-b203b9d56d3f",
      "parentUUID": "5647bbe6-2d35-4884-b61f-4a0d478dae12",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77f9db21-ccd0-4cdb-8f0e-ef4e8bc63dd7",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cbda61e-170e-4cf1-bcb2-8fb66f06e2de",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74c86748-456f-4616-af1c-b563743d8874",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06a7614b-c35c-40c9-bfeb-c78c4ecf7760",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "964e0fdb-b7fa-4b21-8a95-d80febbcd381",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe5a73e9-bb21-485b-8150-76e9fdc8f32c",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fa64712-67ee-436e-98c4-81db821aa57c",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "830c69d0-e87c-46fc-a0fc-ea44385f8478",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "237e9dd4-65fe-4de2-b34c-1a537c0f6109",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf13f67e-89d5-48ca-af0e-48e986a65c15",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f3efa6f-24c1-4080-bd45-6f71c16eb014",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b557305-cb47-4f9a-bd15-ea5f8d92fae0",
      "parentUUID": "0e192942-2180-42cf-902a-409903cc2125",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b6330538-a62d-46c1-a38f-3fbbac5e35cc",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cd0e398-bc72-4f12-9bd5-e512b22f9b30",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86db88bf-e677-4bbf-9a88-d1bdf41b7c73",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04452e8f-8af2-49ab-bd3b-e5fb66c95b36",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bda862a9-b5a7-45da-aeb9-d08311719bb2",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41f22f18-7c98-4894-a4a3-e764fd212536",
      "parentUUID": "466ab897-7d14-47cb-9c51-41102096b3c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b0822ea-e3e6-446e-b4e1-73494e160bd2",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58e3e793-9417-40c6-9271-8dda59893ced",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2b23b20-4156-4917-be0c-e96abd2e4700",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c306a34-7d06-4a80-89a4-2611ed238687",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea7d42ba-4bb8-4435-90c2-9a7d0fe0bea4",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04e3082b-f107-44d9-8069-51e2a67e57f6",
      "parentUUID": "0ae6f7fa-2411-4a51-9189-05069c372891",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47a91266-628e-4ef7-87dd-ef70f9f446a7",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "966e1729-ad65-4f86-be4d-d28e08984feb",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d60dd8a-fb23-41de-886b-31804545172e",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5284de51-3999-4047-a1b3-a98f37212859",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6b9daa3-ac56-40e1-9911-f9801803f12a",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6d8211e-1e5d-491b-86d5-1f624ce51e42",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddbb6914-e01c-4627-916e-7fe866f009e9",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a70b81f8-4dee-4a9c-b0b8-61c8bdba7b21",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1e50e9db-35c0-40f7-9514-39ca2b47e40f",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7f70f292-7965-4a01-b310-d1b7214af3e2",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4e7b9a4-7251-4e65-a580-3b469be0a879",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf006f04-bc0b-4ee6-a48b-599b022a192a",
      "parentUUID": "a08b9df0-29da-4b38-a49d-5a135dc2d74d",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db9a550f-ea53-466c-a077-b3caa882bbb5",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d6db3bc9-1d41-4872-a66e-00354d0cb21e",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6f65f70-f919-46c1-83b6-2af4dbe9a9d4",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac4f5a4f-e27c-4a34-a12e-cd257b31feef",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a9bc60b-9202-49b0-ab3f-083000e015cf",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea6a38ff-a54f-4b9a-bc6a-58178bc0a0b6",
      "parentUUID": "fb1b3e2c-7bfb-4d48-8159-617ae1343652",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "baffe950-ac4b-4236-b8c7-8d2002d0bbf5",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80d846ed-a0d0-428f-887a-f3608c0f24b6",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 186,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cbadfc88-c1bd-47f5-a488-5e6fcca21271",
      "parentUUID": "9a4fd6e7-6d14-4ef9-9796-3a43fa6123c9",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f4963a60-3cf4-4b4b-90a2-6eacb1565064",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bbd7a018-aedb-46b0-8b7a-de364b8fa586",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f038bcd4-f9b7-4ec4-8f8c-3521ab9c4baf",
      "parentUUID": "4be87c67-4272-4d31-8c28-cade5dc03c8d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bb3f1d5-4c4b-4e2b-b049-2e20c952cbb3",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e1f9bc18-9c74-4296-ae81-3221dba0c42b",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55eef82f-a545-4117-a45c-ae349ed18a90",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c438a4c-166b-4eb8-8360-0729064294f1",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "318a8705-627e-49f4-893b-fae3e735f7fe",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a258544-0f61-4299-a093-d8e0d74d158d",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d609763-19e2-428a-aaab-2fef8892a630",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "652a0651-9bb5-4a3f-a59f-b2f387d827ba",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b55f6c5-6d64-4b27-9093-8015bf898c75",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80ecaa8d-b3cf-4024-bb14-1c2f6759c381",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e0feb56-f64b-4aca-9cb1-4e7e7a0d3f0b",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53b9e6c5-ec98-4027-807e-9d8ab861e6d4",
      "parentUUID": "c9c00cb6-f699-47d3-82a4-e35a28f1769d",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "662ac5cc-8afb-44c8-8b40-0a892debba05",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "af0c0660-ec63-46ba-84d3-f833d2fc3494",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b78cf075-7f68-4e3e-93d7-ca37cd90befe",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d9813e4-9347-4b99-aa81-6fccbbe363f7",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c0a527b-8a33-4a84-83b9-78fad741d706",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64a986d0-485e-44e4-8ac1-04d6eabb328a",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44948fa2-7134-4702-8ea5-9267ee491d8b",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "56150fdf-1a9a-43b4-9b60-6ef75b000dde",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a608f6e0-070b-4b3c-b37c-6ffc461efae0",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7bf7ed3-d98f-4936-b738-18d12558b42f",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e6bc20d-620d-49a5-a590-caa34f9fb2e7",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27a0036a-4af4-401a-b639-76c921e7eb02",
      "parentUUID": "a7287a10-3e5e-4594-8029-c25b4699e876",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebb70d3f-7ca6-449d-8e00-712329d00834",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b934acc-5230-42f2-b6f6-a5a89e71b855",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "957d25c4-17fd-40b0-ac5f-222fd92667c1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10a1c6fc-26bd-4e1f-866c-e0aa5aa64b44",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f39d47b-c6ba-4111-ae3e-a2abf4b21acc",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "906611f1-3675-4094-a8a3-4f4a7c41a52b",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13b8a0e0-52a2-4ed9-b2e4-300ef766165f",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "785161c2-f3d0-42ef-bc11-c1f1b21a4cb9",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f090a703-3f0c-476f-945e-e4d372b185e0",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78633010-b46c-41ab-89bd-7c44645c26a1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60365483-816f-4999-b33a-0e808a651ff1",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "424ed110-8f8b-4dd2-81e2-1d65477ecf40",
      "parentUUID": "715e0ce1-ee1f-44ad-adf4-f1eadbbc815a",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}