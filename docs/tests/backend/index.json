{
  "stats": {
    "suites": 73,
    "tests": 358,
    "passes": 358,
    "pending": 0,
    "failures": 0,
    "start": "2017-03-12T11:21:39.162Z",
    "end": "2017-03-12T11:21:46.082Z",
    "duration": 6920,
    "testsRegistered": 358,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Ansprechpartner",
        "suites": [
          {
            "title": "soll einen Ansprechpartner ändern können",
            "suites": [],
            "tests": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5fd56a3b-ce7b-490d-8d2f-874cc64049c3",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "adbdea89-494d-4a89-ad7e-a743c6b98583",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b32ec1eb-f3cc-46c0-8950-54cb2e96903b",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c26639c7-c033-440b-b3f5-97fe180f0f89",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0463fec7-1c1f-4e78-a7c5-39779ceeec5b",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/ansprechpartner.spec.js",
            "uuid": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
            "passes": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5fd56a3b-ce7b-490d-8d2f-874cc64049c3",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "adbdea89-494d-4a89-ad7e-a743c6b98583",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b32ec1eb-f3cc-46c0-8950-54cb2e96903b",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c26639c7-c033-440b-b3f5-97fe180f0f89",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0463fec7-1c1f-4e78-a7c5-39779ceeec5b",
                "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 120
          }
        ],
        "tests": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 88,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f2255339-cd28-4a43-a8bb-ada62e37502d",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fe7401d-dbeb-4c18-b25c-f6225f38ff69",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8d1e4ce8-970e-48cd-a469-ccfa94ba6e6d",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "26eaf8cb-a3af-4b2b-baa9-3b6771d812a9",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/ansprechpartner.spec.js",
        "uuid": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
        "passes": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 88,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f2255339-cd28-4a43-a8bb-ada62e37502d",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fe7401d-dbeb-4c18-b25c-f6225f38ff69",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8d1e4ce8-970e-48cd-a469-ccfa94ba6e6d",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "26eaf8cb-a3af-4b2b-baa9-3b6771d812a9",
            "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 162
      },
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c4bd1a7d-25fd-4334-b2cc-18967147fbb2",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "75b578ff-70c9-42ec-8ad2-6e14ccd79893",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "127202ba-c075-4ce4-9093-7467335f40b1",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "98eea83e-535c-4c9f-8da7-43a75aaaecf7",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c4bd1a7d-25fd-4334-b2cc-18967147fbb2",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "75b578ff-70c9-42ec-8ad2-6e14ccd79893",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "127202ba-c075-4ce4-9093-7467335f40b1",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "98eea83e-535c-4c9f-8da7-43a75aaaecf7",
            "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 58
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "952e0a8b-c430-4535-89a9-3c9650e1897c",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55f522bb-1b06-48b7-baea-100010d646c3",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1f5ac41-6bee-439b-a6b5-e3766cf549a5",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "57eaf454-19ac-4805-a244-128930f706d7",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "205dbc4c-876c-43c7-810f-c29e05be0293",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4627ccb1-54d2-48da-aa97-283dfd3024b2",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aa6b717e-2d33-4457-a877-bbd20b878c5f",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "952e0a8b-c430-4535-89a9-3c9650e1897c",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55f522bb-1b06-48b7-baea-100010d646c3",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1f5ac41-6bee-439b-a6b5-e3766cf549a5",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "57eaf454-19ac-4805-a244-128930f706d7",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "205dbc4c-876c-43c7-810f-c29e05be0293",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4627ccb1-54d2-48da-aa97-283dfd3024b2",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aa6b717e-2d33-4457-a877-bbd20b878c5f",
            "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 177
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9e48a953-8306-432c-a5ba-8e4622fd888f",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ed6ed91-35b2-4482-80e3-cd8801894ce4",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55a39b78-d5e5-4d58-bdf5-418ac414f945",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cafd84fc-91ce-4520-a912-1f62b039ac1c",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "79644123-41b7-47b5-aa40-fe04f51c8e7e",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6cec396c-57a2-4371-8a27-b67074e99e87",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "749b8286-22fe-4d78-8ada-d69b37db095a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a95474a0-506f-405b-b141-85f92d579f92",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0c934217-b8d8-4c78-94e0-d3d3ba4fc29a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7cc9280b-02d9-49f5-9e96-298b97a8694a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9e48a953-8306-432c-a5ba-8e4622fd888f",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ed6ed91-35b2-4482-80e3-cd8801894ce4",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55a39b78-d5e5-4d58-bdf5-418ac414f945",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cafd84fc-91ce-4520-a912-1f62b039ac1c",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "79644123-41b7-47b5-aa40-fe04f51c8e7e",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6cec396c-57a2-4371-8a27-b67074e99e87",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "749b8286-22fe-4d78-8ada-d69b37db095a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a95474a0-506f-405b-b141-85f92d579f92",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0c934217-b8d8-4c78-94e0-d3d3ba4fc29a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7cc9280b-02d9-49f5-9e96-298b97a8694a",
            "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 243
      },
      {
        "title": "Handlers",
        "suites": [
          {
            "title": "handle Error and send Response",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "6535f81d-0008-4586-9884-dea661d22489",
                "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "e4ed0a66-a75f-45f4-afe3-32fd045df0a0",
                "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "5afa8100-39fc-4795-aada-5339b349b960",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "6535f81d-0008-4586-9884-dea661d22489",
                "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "e4ed0a66-a75f-45f4-afe3-32fd045df0a0",
                "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "handle Error and send Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "9b8897a1-fed0-49ae-87b5-11a9efde3fdf",
                "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "6ba63db3-6742-4016-a332-f907a654c4a9",
                "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "9b8897a1-fed0-49ae-87b5-11a9efde3fdf",
                "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "6ba63db3-6742-4016-a332-f907a654c4a9",
                "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "handle Error and send Success-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "cfd9b287-126c-42c6-8ab2-7fb5aaedf98f",
                "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "45fc0d77-e62a-4452-8f50-716ffde4f99a",
                "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "cfd9b287-126c-42c6-8ab2-7fb5aaedf98f",
                "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "45fc0d77-e62a-4452-8f50-716ffde4f99a",
                "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "handle Error and send Deleted-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "aad848a5-2317-43f0-b8bb-e59b8a9aac66",
                "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "5a86fd10-0e1a-40ff-aa67-e6efb2a866a0",
                "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "a065c81b-4325-4d5f-b852-d44a8edf957c",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "aad848a5-2317-43f0-b8bb-e59b8a9aac66",
                "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "5a86fd10-0e1a-40ff-aa67-e6efb2a866a0",
                "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "handle Query Response",
            "suites": [],
            "tests": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "537ef645-0a61-414a-a13f-ef88272c7140",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "c396ec8a-0b53-41e8-8e71-a3c0c95b0a8d",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "bdddbb97-c7fc-4836-895a-75409a5db976",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "f536e438-98d6-4218-8060-d8c20fd68581",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "537ef645-0a61-414a-a13f-ef88272c7140",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "c396ec8a-0b53-41e8-8e71-a3c0c95b0a8d",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "bdddbb97-c7fc-4836-895a-75409a5db976",
                "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/handler.spec.js",
        "uuid": "051393dc-5bb1-4ef1-9b45-5b15f23e7be8",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Helpers",
        "suites": [
          {
            "title": "soll die Datenbank query basierend auf Parametern laden",
            "suites": [],
            "tests": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "62cec7be-2a91-4ba4-ba02-2834ee6a2cdf",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "995be7f9-4b48-40b9-a7b6-b4f2bc8af6e4",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "2a9518cc-7971-4878-ae3b-12fbdbdea7cd",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "56bf103f-529f-4bf8-8947-4312e09fb3a8",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "ef92e73e-06f8-4177-9e61-28d8d55a0bb2",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "62cec7be-2a91-4ba4-ba02-2834ee6a2cdf",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "995be7f9-4b48-40b9-a7b6-b4f2bc8af6e4",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "2a9518cc-7971-4878-ae3b-12fbdbdea7cd",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "56bf103f-529f-4bf8-8947-4312e09fb3a8",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "ef92e73e-06f8-4177-9e61-28d8d55a0bb2",
                "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "soll das Team-Ergebnis zurücksetzen können",
            "suites": [],
            "tests": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "bcd42575-b8ea-4f55-9c3f-f0f9f2208053",
                "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "8704d732-a738-4070-b8f5-4c444b180f99",
                "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "bcd42575-b8ea-4f55-9c3f-f0f9f2208053",
                "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "8704d732-a738-4070-b8f5-4c444b180f99",
                "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll den letzten Slash bei einem Pfad entfernen können",
            "suites": [],
            "tests": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "83eea74f-620e-4ac0-8495-feea755cecf8",
                "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "42cd554f-eb46-4cfd-8a74-2586bc2f17ef",
                "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "83eea74f-620e-4ac0-8495-feea755cecf8",
                "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "42cd554f-eb46-4cfd-8a74-2586bc2f17ef",
                "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "soll die Route-Konfiguration laden",
            "suites": [],
            "tests": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "3ddb68cd-0f4f-4d56-9844-23f9972aae6e",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "25730cf2-e53b-44dd-92a4-40b6ba70552c",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "4a62a88e-5952-4006-8355-ff266c1ebc69",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "b86da3fb-3706-42b6-972e-e3eadddc0585",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "7304ac0f-b313-4c3c-8806-bd98f6b716c5",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "c1ef8f52-0590-41df-b12c-44c26b34bcf2",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "f9c5b931-d4d4-49bc-aef8-189bee285a5d",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "e7f5009d-9cd2-48dd-a727-688ec60b99fa",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "1129395c-1e43-46d3-84e2-32de3e8158dd",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "3ddb68cd-0f4f-4d56-9844-23f9972aae6e",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "25730cf2-e53b-44dd-92a4-40b6ba70552c",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "4a62a88e-5952-4006-8355-ff266c1ebc69",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "b86da3fb-3706-42b6-972e-e3eadddc0585",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "7304ac0f-b313-4c3c-8806-bd98f6b716c5",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "c1ef8f52-0590-41df-b12c-44c26b34bcf2",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "f9c5b931-d4d4-49bc-aef8-189bee285a5d",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "e7f5009d-9cd2-48dd-a727-688ec60b99fa",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "1129395c-1e43-46d3-84e2-32de3e8158dd",
                "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 9,
            "totalPasses": 9,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "soll den Spielplan auf Korrektheit prüfen",
            "suites": [],
            "tests": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "c062d52a-be91-4977-9fdb-2bef007bc1f3",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "da90dc80-461e-4df2-9044-92b367363bd4",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "8752cc7b-9719-4339-97dc-1f56d4fbce03",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "68db9efc-d358-4480-b05f-158e80209f61",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "c062d52a-be91-4977-9fdb-2bef007bc1f3",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "da90dc80-461e-4df2-9044-92b367363bd4",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "8752cc7b-9719-4339-97dc-1f56d4fbce03",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "68db9efc-d358-4480-b05f-158e80209f61",
                "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll das richtige Datum und Zeit für ein Spiel berechnen",
            "suites": [
              {
                "title": "Eintägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eaabd5fa-bc3f-4fb4-8e0c-71880ee0cb78",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c6fb56eb-d6e5-4474-b60b-319177c39b8c",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3490a5c4-b46c-4071-9fdc-ef2557f37f49",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "63bafeb0-de30-44af-970a-49d8f89d229b",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0a697ccc-fd14-4131-a44e-4dc23263b526",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eaabd5fa-bc3f-4fb4-8e0c-71880ee0cb78",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c6fb56eb-d6e5-4474-b60b-319177c39b8c",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3490a5c4-b46c-4071-9fdc-ef2557f37f49",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "63bafeb0-de30-44af-970a-49d8f89d229b",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0a697ccc-fd14-4131-a44e-4dc23263b526",
                        "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 12
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa918bc2-4a45-4d0c-84da-03fd37ab1740",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "44c66a2f-bef8-4bbc-bb64-f188f80699a0",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71242b14-70c9-4300-8787-34a6038250e1",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "43e393fd-4c24-4101-a832-75bfd1524767",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7dfb86a-3f07-4c3d-8f31-b9d80d7c59a3",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "0630ab93-3575-4425-be3a-55e66a04c733",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa918bc2-4a45-4d0c-84da-03fd37ab1740",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "44c66a2f-bef8-4bbc-bb64-f188f80699a0",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71242b14-70c9-4300-8787-34a6038250e1",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "43e393fd-4c24-4101-a832-75bfd1524767",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7dfb86a-3f07-4c3d-8f31-b9d80d7c59a3",
                        "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "d7e04ed8-14e1-4fbe-b488-505778289a6b",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "Zweitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f24a7755-5803-4781-8236-964ed5c83e48",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b05cbf33-d2ed-496f-8678-b084d5bb1d84",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e6287070-44da-4c3d-b9c4-e7b88d49d43c",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "627fe598-e577-487c-a33d-bd4e4f406dbb",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dfc8c743-aca2-4b98-87cf-16ac07f17b63",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1a1f00ac-69d3-4ccd-b7d9-1c5c7b0eb3af",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7bee6c92-4f06-42ed-a4c9-58e91f063f6b",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f24a7755-5803-4781-8236-964ed5c83e48",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b05cbf33-d2ed-496f-8678-b084d5bb1d84",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e6287070-44da-4c3d-b9c4-e7b88d49d43c",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "627fe598-e577-487c-a33d-bd4e4f406dbb",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dfc8c743-aca2-4b98-87cf-16ac07f17b63",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1a1f00ac-69d3-4ccd-b7d9-1c5c7b0eb3af",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7bee6c92-4f06-42ed-a4c9-58e91f063f6b",
                        "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a1af8b08-9abe-4507-a1be-71423a2abfc4",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "57e9b575-dee6-4f7e-8913-130406c3e45f",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c347c42b-d959-4062-83d4-0779ab0d3ec0",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "82c3b893-b75c-45a2-8408-8ebc49839ec9",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1dffc1d0-3653-4bd8-83e0-eb77db0dba71",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e381973-8489-4e16-9962-8e7d318a5cd2",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "086c43ab-eefe-4cff-ba32-203f31a564db",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a1af8b08-9abe-4507-a1be-71423a2abfc4",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "57e9b575-dee6-4f7e-8913-130406c3e45f",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c347c42b-d959-4062-83d4-0779ab0d3ec0",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "82c3b893-b75c-45a2-8408-8ebc49839ec9",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1dffc1d0-3653-4bd8-83e0-eb77db0dba71",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e381973-8489-4e16-9962-8e7d318a5cd2",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "086c43ab-eefe-4cff-ba32-203f31a564db",
                        "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "6abdfbc8-6791-42ac-aeed-459ba923d32f",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "Dreitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6d20762c-5a12-4ada-af5f-3c47a24f4947",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c0d9023c-90b5-4ef0-976d-d4d7a5921d66",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "db8dfc5d-867a-4adf-a5d3-aa554234c861",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "effc0567-3d61-425d-9f7f-16ffa7448c2e",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ea8f076b-3892-4c7d-8e03-4d856c3ddf61",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2348490e-5198-4ce2-9338-bee6f669eda3",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f755207f-71d2-415b-9b93-5122078d5d1a",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b7da3589-a1f2-4535-bb34-51de48a1be37",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7b006b5b-9f96-4a77-952a-142c324ff6aa",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "86795386-770f-4328-ab9f-5756be5478db",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6d20762c-5a12-4ada-af5f-3c47a24f4947",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c0d9023c-90b5-4ef0-976d-d4d7a5921d66",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "db8dfc5d-867a-4adf-a5d3-aa554234c861",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "effc0567-3d61-425d-9f7f-16ffa7448c2e",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ea8f076b-3892-4c7d-8e03-4d856c3ddf61",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2348490e-5198-4ce2-9338-bee6f669eda3",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f755207f-71d2-415b-9b93-5122078d5d1a",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b7da3589-a1f2-4535-bb34-51de48a1be37",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7b006b5b-9f96-4a77-952a-142c324ff6aa",
                        "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 9
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ac627cb6-87ef-4b92-9bc1-33219a93f604",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef8c4462-c390-4764-b16a-d662deafe47b",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ed935ac-4910-40ad-824b-a2b6bd141c56",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92cd9b83-0839-4b16-b537-db6df1505bd0",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b96cb51-0717-45e0-93fe-95e83bf13f0f",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d2d05290-cb79-4c30-a062-843632a6f96a",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "31d8610a-8098-4995-a043-cc8e3c0a248c",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0bac733a-3871-411c-995e-d723aa82c886",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c20f99f4-831a-4aea-ba26-19f863714e59",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ac627cb6-87ef-4b92-9bc1-33219a93f604",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef8c4462-c390-4764-b16a-d662deafe47b",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ed935ac-4910-40ad-824b-a2b6bd141c56",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92cd9b83-0839-4b16-b537-db6df1505bd0",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b96cb51-0717-45e0-93fe-95e83bf13f0f",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d2d05290-cb79-4c30-a062-843632a6f96a",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "31d8610a-8098-4995-a043-cc8e3c0a248c",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0bac733a-3871-411c-995e-d723aa82c886",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c20f99f4-831a-4aea-ba26-19f863714e59",
                        "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 4
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "66cc9f3f-ef06-45fe-8895-f28d665cb36a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "ba7c8c4f-1be7-42f3-9b86-d4a799539769",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "7a2d7905-0bd4-4b7b-addf-45e3a8cc1455",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "33cfb9cc-2254-4c30-a05b-bdac0ae25f5b",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "f00075ce-8629-440c-bb34-6760fced7b63",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "4f9580b6-ce78-4464-98fa-7ed929f4db1c",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "8bdc4c8c-0d75-41bf-9d61-d5e2efb471d7",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/helpers.spec.js",
        "uuid": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
        "passes": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "7a2d7905-0bd4-4b7b-addf-45e3a8cc1455",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "33cfb9cc-2254-4c30-a05b-bdac0ae25f5b",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "f00075ce-8629-440c-bb34-6760fced7b63",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "4f9580b6-ce78-4464-98fa-7ed929f4db1c",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "8bdc4c8c-0d75-41bf-9d61-d5e2efb471d7",
            "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "40812c84-8b5f-4649-acb1-a4a9c3184011",
            "parentUUID": "0b7fed2f-1fde-47ef-9d38-407c2a644ce5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "0b7fed2f-1fde-47ef-9d38-407c2a644ce5",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "40812c84-8b5f-4649-acb1-a4a9c3184011",
            "parentUUID": "0b7fed2f-1fde-47ef-9d38-407c2a644ce5",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 10
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f1ee4d36-16cd-4055-85d7-9bf94ec4c770",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "424874c0-913b-4dcf-afaf-0ac66c537f26",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "595799b6-3e3a-4e52-bdc1-952a8c44a017",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5c8fd187-9710-47ad-b43f-ef1b5d2441bd",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "60daabf4-696e-4d96-be41-95bea37ba774",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a66d828-84e4-4528-ad78-a9da1ce67bfe",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "023ec0fb-891a-4496-a1cb-eb365f4f73a1",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80a3429e-1979-4a4d-a7e3-0f9ba5d8f7d2",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "31f000b1-3f2b-43a8-905a-8ff46adbc3bf",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "56499a30-2725-4661-840e-c19abb69884d",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f1ee4d36-16cd-4055-85d7-9bf94ec4c770",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "424874c0-913b-4dcf-afaf-0ac66c537f26",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "595799b6-3e3a-4e52-bdc1-952a8c44a017",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5c8fd187-9710-47ad-b43f-ef1b5d2441bd",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "60daabf4-696e-4d96-be41-95bea37ba774",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a66d828-84e4-4528-ad78-a9da1ce67bfe",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "023ec0fb-891a-4496-a1cb-eb365f4f73a1",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80a3429e-1979-4a4d-a7e3-0f9ba5d8f7d2",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "31f000b1-3f2b-43a8-905a-8ff46adbc3bf",
            "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 179
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c016212-8ad5-4ee2-a898-3479ea2bf041",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e243aaaa-5db1-4108-9af5-c6e0a8046679",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a932c9fb-a8fa-4163-b14e-7da445adbc99",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d5ae398a-95bc-4b63-9040-11f6f0b7db43",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a73c14b0-c2a6-4a33-a39c-de1292270744",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a1a3253-d7d4-4e5d-ae76-c2dc0f2a744a",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b4105fb-722c-43d3-a942-f7d91a2c742f",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2d077f60-8881-449e-a29c-e08feb8c0747",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15101407-cbcc-471e-b3d8-aaaf8bfde0b1",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1154d6a5-931a-43d4-bd2d-c1df4f2c53cb",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c1c7e122-446a-4851-8770-3bd70224c457",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 50,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ce90ea00-c545-4be3-90da-5e6f67e7100d",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "37a99761-f0b9-4ab6-ab85-612c8dbb3e98",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "453a1462-073b-40a3-8d20-100fe50b1fb3",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1451b589-4ab6-41ab-999e-c2bb0d7a96f8",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5d69a072-bcd0-463c-a356-9c32437ba9df",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "0b543f71-0481-4364-ab1a-8c564d988b84",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c016212-8ad5-4ee2-a898-3479ea2bf041",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e243aaaa-5db1-4108-9af5-c6e0a8046679",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a932c9fb-a8fa-4163-b14e-7da445adbc99",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d5ae398a-95bc-4b63-9040-11f6f0b7db43",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a73c14b0-c2a6-4a33-a39c-de1292270744",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a1a3253-d7d4-4e5d-ae76-c2dc0f2a744a",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b4105fb-722c-43d3-a942-f7d91a2c742f",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2d077f60-8881-449e-a29c-e08feb8c0747",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15101407-cbcc-471e-b3d8-aaaf8bfde0b1",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1154d6a5-931a-43d4-bd2d-c1df4f2c53cb",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c1c7e122-446a-4851-8770-3bd70224c457",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 50,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ce90ea00-c545-4be3-90da-5e6f67e7100d",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "37a99761-f0b9-4ab6-ab85-612c8dbb3e98",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "453a1462-073b-40a3-8d20-100fe50b1fb3",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1451b589-4ab6-41ab-999e-c2bb0d7a96f8",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5d69a072-bcd0-463c-a356-9c32437ba9df",
            "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 16,
        "totalPasses": 16,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 494
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "42a8bae8-a580-4825-a2c1-7027b93adacd",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "45d8c875-ddfb-4b85-86d1-b13428d4c901",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5e1c4ad5-fa4e-4951-875a-1dc1089350eb",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fc7a8c5f-0adf-4d6a-8b1e-68a75c436073",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2f30f08-f163-42cf-b1e9-f4b48d34dce6",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "732336f4-6f81-411f-a376-de81d07fc22d",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "730a7995-fb29-4d29-b94f-d8a0426fd95e",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 180,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "77bc6aaf-c8d2-44e5-a6f2-b75c89d3613c",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "952210bf-0429-4f78-8fb3-848f0ef75964",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "42a8bae8-a580-4825-a2c1-7027b93adacd",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "45d8c875-ddfb-4b85-86d1-b13428d4c901",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5e1c4ad5-fa4e-4951-875a-1dc1089350eb",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fc7a8c5f-0adf-4d6a-8b1e-68a75c436073",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2f30f08-f163-42cf-b1e9-f4b48d34dce6",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "732336f4-6f81-411f-a376-de81d07fc22d",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "730a7995-fb29-4d29-b94f-d8a0426fd95e",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 180,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "77bc6aaf-c8d2-44e5-a6f2-b75c89d3613c",
            "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 281
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "61648ddf-8186-4392-b0f3-20c0a08ee62c",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "187c77ad-7c96-4966-ae3d-551c43e09454",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e373ced-870d-4fcc-88a5-b50b4dac91db",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "86233cc9-888a-410e-916a-861e51f1fdb8",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fde081df-ddc7-4036-91d9-91feed65cad0",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "25e13e9a-2f6a-440a-ba69-59adc1dcc346",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7fa4458-91e2-4a6a-a543-cd31f35af4b1",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d3081d66-b3fa-44fb-8e06-7fb10d9c516f",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "779b8414-b86e-42c9-aee1-0bc6e25227b7",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "53c9e497-3279-4130-b2e4-58e57eb6abaa",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eb826b9e-ffbb-4ddb-bcc9-1401ed49625f",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "61648ddf-8186-4392-b0f3-20c0a08ee62c",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "187c77ad-7c96-4966-ae3d-551c43e09454",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e373ced-870d-4fcc-88a5-b50b4dac91db",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "86233cc9-888a-410e-916a-861e51f1fdb8",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fde081df-ddc7-4036-91d9-91feed65cad0",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "25e13e9a-2f6a-440a-ba69-59adc1dcc346",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7fa4458-91e2-4a6a-a543-cd31f35af4b1",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d3081d66-b3fa-44fb-8e06-7fb10d9c516f",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "779b8414-b86e-42c9-aee1-0bc6e25227b7",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "53c9e497-3279-4130-b2e4-58e57eb6abaa",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eb826b9e-ffbb-4ddb-bcc9-1401ed49625f",
            "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 165
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 198,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0195963f-d912-45cb-9242-df0a0518a575",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c23e11c0-7d0d-4a83-97c2-7f804bc22cde",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9a977edb-c18e-4e8a-b2a9-7c2a8e938715",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 373,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1f120325-607d-4a7d-99d7-b8bffeba9e9e",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15f5aca7-a90a-4877-991a-953a41531eb0",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d676ea3c-48c3-40a5-be12-3fd1b7ff17fd",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7a1acd8c-2864-4ec4-a706-5f04c8bcaeea",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "113350de-cdfe-4de9-a3f2-b471a2029220",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a5e95ff-49de-4cf7-92b6-aab347f66503",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d754e84f-ea7b-4b31-a352-6590ade4c461",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9ceb9004-9c4e-4f20-bb5e-b9189169218d",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4f14217e-c38c-459e-9645-cc0a6096b9f7",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b40e260-0a7c-425a-aaad-ba49b0f1cbe3",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9d436238-a100-4a85-8502-41d403f343da",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e79307b-6418-4896-b4f8-8822049e3a3a",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "73e04ba6-912e-40aa-b805-830f10ad0894",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2a0a7bb2-5db3-4d5f-831a-89c05a576d52",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5f38a238-d763-4bd6-83ee-5cefa29557fa",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "d2471a5e-5076-4699-b12d-c51bbc159649",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 198,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0195963f-d912-45cb-9242-df0a0518a575",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c23e11c0-7d0d-4a83-97c2-7f804bc22cde",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9a977edb-c18e-4e8a-b2a9-7c2a8e938715",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 373,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1f120325-607d-4a7d-99d7-b8bffeba9e9e",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15f5aca7-a90a-4877-991a-953a41531eb0",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d676ea3c-48c3-40a5-be12-3fd1b7ff17fd",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7a1acd8c-2864-4ec4-a706-5f04c8bcaeea",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "113350de-cdfe-4de9-a3f2-b471a2029220",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a5e95ff-49de-4cf7-92b6-aab347f66503",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d754e84f-ea7b-4b31-a352-6590ade4c461",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9ceb9004-9c4e-4f20-bb5e-b9189169218d",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4f14217e-c38c-459e-9645-cc0a6096b9f7",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b40e260-0a7c-425a-aaad-ba49b0f1cbe3",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9d436238-a100-4a85-8502-41d403f343da",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e79307b-6418-4896-b4f8-8822049e3a3a",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "73e04ba6-912e-40aa-b805-830f10ad0894",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2a0a7bb2-5db3-4d5f-831a-89c05a576d52",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5f38a238-d763-4bd6-83ee-5cefa29557fa",
            "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1316
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1c3b2450-932d-44c5-b9ea-bc608a16e0b9",
                "parentUUID": "9de56423-5087-4b5a-91b4-156b2f664830",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "9de56423-5087-4b5a-91b4-156b2f664830",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1c3b2450-932d-44c5-b9ea-bc608a16e0b9",
                "parentUUID": "9de56423-5087-4b5a-91b4-156b2f664830",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 15
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "07ee61e7-8181-43bd-8c4c-b6c5de9c3d46",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "701ee7a8-b76d-4cac-9eb6-f865b35094a2",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8d843f4d-4b1a-497a-889c-dd388f47cb8f",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa0747fb-bb1e-461f-9467-f8b1995b6e82",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f408219-8459-4281-aeaf-1e7bb17656e1",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4d0fa38-5396-4b7a-9b0d-42b45a44b0d2",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "459105e2-b310-4f05-8e3c-e55d39b4dd74",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "07ee61e7-8181-43bd-8c4c-b6c5de9c3d46",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "701ee7a8-b76d-4cac-9eb6-f865b35094a2",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8d843f4d-4b1a-497a-889c-dd388f47cb8f",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa0747fb-bb1e-461f-9467-f8b1995b6e82",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f408219-8459-4281-aeaf-1e7bb17656e1",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4d0fa38-5396-4b7a-9b0d-42b45a44b0d2",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "459105e2-b310-4f05-8e3c-e55d39b4dd74",
                "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 81
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a19e58c9-7717-4611-9ff4-d855a577ce82",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99ee67ae-183d-42dc-bb58-44c3c465db34",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd1d4210-0de4-4244-8610-a81bce7a5c6e",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a19e58c9-7717-4611-9ff4-d855a577ce82",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99ee67ae-183d-42dc-bb58-44c3c465db34",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd1d4210-0de4-4244-8610-a81bce7a5c6e",
                    "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 26
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f9cbae1d-0da6-42a3-ac69-8ab4128ad697",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "301d7821-fbcc-46b8-9d77-6d3c06fffa3f",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeff3e6b-d37b-46c8-ad59-e4e19ef1eefb",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f9cbae1d-0da6-42a3-ac69-8ab4128ad697",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "301d7821-fbcc-46b8-9d77-6d3c06fffa3f",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeff3e6b-d37b-46c8-ad59-e4e19ef1eefb",
                    "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 71
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef359cee-9509-4882-9a3c-09521be23bbd",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd20fbf4-222f-45cf-82cd-7eaee49ab815",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1be55b8a-e670-489a-b1f5-ddfabd091497",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d83963e-8102-4704-a463-4f641ec196a6",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc0aabe3-0353-4fc5-8b77-d44e46758f72",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe99a67f-3c60-4878-ba32-5b3bc14257b2",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "857ce2f5-0511-4418-b338-8917303947f6",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef359cee-9509-4882-9a3c-09521be23bbd",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd20fbf4-222f-45cf-82cd-7eaee49ab815",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1be55b8a-e670-489a-b1f5-ddfabd091497",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d83963e-8102-4704-a463-4f641ec196a6",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc0aabe3-0353-4fc5-8b77-d44e46758f72",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe99a67f-3c60-4878-ba32-5b3bc14257b2",
                    "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 89
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6ee5a80-d09c-417a-9cbe-1c07cb7f79d1",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a92c86c0-981a-4024-a75f-dbbd1c67bc57",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77ac4d85-c9b9-421c-b9dc-122b5f9e4f4c",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fc5162b-5f0d-41f0-a3bf-c6041c2832db",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abd370a4-a261-4208-83f8-165b4bf6565d",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54cf3611-57f5-40fb-be08-0073eefbb58d",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2c2b861-9826-4dc7-bc8b-10d57a5aa5dc",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f95b654-41ad-4324-aa36-48309c50481e",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e73d4e88-71e1-4e6b-bcac-7d12d2e30f30",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6ee5a80-d09c-417a-9cbe-1c07cb7f79d1",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a92c86c0-981a-4024-a75f-dbbd1c67bc57",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77ac4d85-c9b9-421c-b9dc-122b5f9e4f4c",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fc5162b-5f0d-41f0-a3bf-c6041c2832db",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abd370a4-a261-4208-83f8-165b4bf6565d",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54cf3611-57f5-40fb-be08-0073eefbb58d",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2c2b861-9826-4dc7-bc8b-10d57a5aa5dc",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f95b654-41ad-4324-aa36-48309c50481e",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e73d4e88-71e1-4e6b-bcac-7d12d2e30f30",
                    "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 108
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9103e648-5d1a-4d4e-8801-a3a520b27390",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dd8a5e6-1024-49d2-b9ad-a21bc7687138",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47413df9-039e-432f-a04a-b33f5c0625f0",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fed0df5-6081-46d5-9505-c5a451751935",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38fe0e2b-f31d-4e6b-b0b3-ee07e27cd13f",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "340b6d6d-72ba-4d66-99a8-2e2f726110ea",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0aa11177-4d50-4080-ab65-1e88b5bfa3a6",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5733261a-6973-45a2-a3f2-38a59bad79d2",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fb2beb5-1beb-4f78-9f7e-5f1756bb04a4",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2debc1a-cc26-46c3-ac9d-1e653c159aec",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69499a32-481d-4f81-8208-71133dc9d319",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fce4e8c2-b3a9-449c-a75b-76b406824b6d",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "106c68f5-9247-467a-bc36-41f7b616854e",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9103e648-5d1a-4d4e-8801-a3a520b27390",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dd8a5e6-1024-49d2-b9ad-a21bc7687138",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47413df9-039e-432f-a04a-b33f5c0625f0",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fed0df5-6081-46d5-9505-c5a451751935",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38fe0e2b-f31d-4e6b-b0b3-ee07e27cd13f",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "340b6d6d-72ba-4d66-99a8-2e2f726110ea",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0aa11177-4d50-4080-ab65-1e88b5bfa3a6",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5733261a-6973-45a2-a3f2-38a59bad79d2",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fb2beb5-1beb-4f78-9f7e-5f1756bb04a4",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2debc1a-cc26-46c3-ac9d-1e653c159aec",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69499a32-481d-4f81-8208-71133dc9d319",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fce4e8c2-b3a9-449c-a75b-76b406824b6d",
                    "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 166
              },
              {
                "title": "die Route /api/jugenden soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eda04a27-af3d-40f7-a66b-ba11921a372c",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84131587-4422-461a-8179-0416682a4c2c",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07dff3c7-e645-4f29-91da-6df2f0790af2",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40550117-fa11-474b-96e5-9f73d92c9f94",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7227124f-6571-4600-b063-7296b1332dbe",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71e29160-ae94-46b2-af78-7d46c845207a",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eda04a27-af3d-40f7-a66b-ba11921a372c",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84131587-4422-461a-8179-0416682a4c2c",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07dff3c7-e645-4f29-91da-6df2f0790af2",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40550117-fa11-474b-96e5-9f73d92c9f94",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7227124f-6571-4600-b063-7296b1332dbe",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71e29160-ae94-46b2-af78-7d46c845207a",
                    "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 50
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c1e841b-2761-4320-b1ae-7ac54fd6d7b0",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb92e486-8ecf-45c8-8d92-461d12ebfe12",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9418ae78-7e64-4fda-8667-d5fdc1df7293",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f40a7ec1-d034-4fd2-a3af-2f3534e9577a",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77384cc6-0323-4928-be18-34745af66ea8",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "626025cf-6516-4e46-b27b-4d3a036a6841",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c1e841b-2761-4320-b1ae-7ac54fd6d7b0",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb92e486-8ecf-45c8-8d92-461d12ebfe12",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9418ae78-7e64-4fda-8667-d5fdc1df7293",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f40a7ec1-d034-4fd2-a3af-2f3534e9577a",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77384cc6-0323-4928-be18-34745af66ea8",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "626025cf-6516-4e46-b27b-4d3a036a6841",
                    "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 93
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46ddeec6-0bb7-4213-88b7-0c50b57fb181",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77962c89-767b-46aa-886a-502f73cd73e1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23528684-b42b-448d-a8d3-07d1462916e5",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc7b2d42-938a-46c1-b5c4-ec69b1cc53d4",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4941d5fd-5cb0-461e-8ee3-ba13aefe86a1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c572c858-6187-4c22-ab43-443bde199833",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1bf7eac-f271-4ed8-9be0-5de68577f2e1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b8f878a-63d6-4713-a628-adede310f177",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca58036c-b4f7-43f9-9f20-ca704117c3c1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "134eabf5-9b25-4be0-9eea-7234f75a2797",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26ff7cf2-656f-43bc-b947-f2b2b82ff490",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2f0c7d0-4682-43d1-8277-7faaa3d6b548",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46ddeec6-0bb7-4213-88b7-0c50b57fb181",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77962c89-767b-46aa-886a-502f73cd73e1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23528684-b42b-448d-a8d3-07d1462916e5",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc7b2d42-938a-46c1-b5c4-ec69b1cc53d4",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4941d5fd-5cb0-461e-8ee3-ba13aefe86a1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c572c858-6187-4c22-ab43-443bde199833",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1bf7eac-f271-4ed8-9be0-5de68577f2e1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b8f878a-63d6-4713-a628-adede310f177",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca58036c-b4f7-43f9-9f20-ca704117c3c1",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "134eabf5-9b25-4be0-9eea-7234f75a2797",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26ff7cf2-656f-43bc-b947-f2b2b82ff490",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2f0c7d0-4682-43d1-8277-7faaa3d6b548",
                    "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 138
              },
              {
                "title": "die Route /api/spiele/order soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15c9962d-a233-4dc4-b0bd-3fe92f37d7d6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97a07fbc-9c5f-41d1-b9bc-af28255620f8",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9566241f-dba1-405b-9e43-a5a04d1484e1",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c31e8766-e3e1-4e12-987f-4e191598cb40",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68397d78-49f6-4f89-94db-b345b70b82a0",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57f641cb-07cb-4361-ad9b-a6983f7d5bf1",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5d72ba4-0585-45f4-8f36-b956d532cb10",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7c97cee-7efb-4852-8fb5-5dae894a1ad6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64d21ed5-0c95-4f31-89f3-ba7d463cdeba",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5917db0-9c5f-4dde-bd46-6049f0a18680",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90d4021e-01e0-4114-ad0a-cc60b50ccd2d",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c95c10a-ef87-4be9-916f-b0ba099c1cf6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15c9962d-a233-4dc4-b0bd-3fe92f37d7d6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97a07fbc-9c5f-41d1-b9bc-af28255620f8",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9566241f-dba1-405b-9e43-a5a04d1484e1",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c31e8766-e3e1-4e12-987f-4e191598cb40",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68397d78-49f6-4f89-94db-b345b70b82a0",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57f641cb-07cb-4361-ad9b-a6983f7d5bf1",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5d72ba4-0585-45f4-8f36-b956d532cb10",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7c97cee-7efb-4852-8fb5-5dae894a1ad6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64d21ed5-0c95-4f31-89f3-ba7d463cdeba",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5917db0-9c5f-4dde-bd46-6049f0a18680",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90d4021e-01e0-4114-ad0a-cc60b50ccd2d",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c95c10a-ef87-4be9-916f-b0ba099c1cf6",
                    "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 152
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff07af6e-c21f-4344-aff5-bf81c77f37ca",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "022c7aa8-c1e9-4573-bba2-7fd3dc4e2854",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d404e365-1efa-42e8-ba12-91538757a4e3",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13001f2f-c705-41ef-b236-6c16dce78e82",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4f33937-b102-42f6-9d6a-e1ca22cbb9d9",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5016221-2d66-4e67-8f22-dbf88c7ce0f4",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0666cf33-07f1-4379-9399-7406d3da30af",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff07af6e-c21f-4344-aff5-bf81c77f37ca",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "022c7aa8-c1e9-4573-bba2-7fd3dc4e2854",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d404e365-1efa-42e8-ba12-91538757a4e3",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13001f2f-c705-41ef-b236-6c16dce78e82",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4f33937-b102-42f6-9d6a-e1ca22cbb9d9",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5016221-2d66-4e67-8f22-dbf88c7ce0f4",
                    "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 71
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d8c10c7-4b0f-4beb-b885-693b5679203d",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aae3f0b6-fda9-4591-b8ed-60472f4c9e64",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 212,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cfb59329-af15-4260-bc5c-4b1e13694490",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d8c10c7-4b0f-4beb-b885-693b5679203d",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aae3f0b6-fda9-4591-b8ed-60472f4c9e64",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 212,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cfb59329-af15-4260-bc5c-4b1e13694490",
                    "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 233
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a25d9df-5a2b-4d5d-beba-371e0a48f4b4",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b2f5c3f-f2a0-4236-ad7b-63f9d3294970",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c615859d-8f84-4442-806e-e8c42989c515",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a25d9df-5a2b-4d5d-beba-371e0a48f4b4",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b2f5c3f-f2a0-4236-ad7b-63f9d3294970",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c615859d-8f84-4442-806e-e8c42989c515",
                    "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03269c73-d08a-43a4-9d46-7119bd75ba70",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "183f49e2-b26e-466a-b438-e8991664caba",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b75ac0a-2d0d-4d0a-829b-40271418244f",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49ebd68d-b41f-4b21-aefa-676c05863fc9",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aad1ad48-f050-4121-9fa0-c535b35a8e08",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a454c77-f1fa-4792-a628-ddb76ec6b1d5",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9ce230b9-0b70-4d7b-ae10-258ae556a664",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9714d6a6-057d-417e-becb-0f7594a0cde0",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c7825cd-c5bf-45f9-bc17-3859f523be45",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a05c37f-5289-43a1-b38a-3f5e7b42e4f7",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f50fdca-1f1b-4ea4-a46c-deaea01f6e8c",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23316d6d-3512-4ebd-b9ed-0ec6c2f0475e",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03269c73-d08a-43a4-9d46-7119bd75ba70",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "183f49e2-b26e-466a-b438-e8991664caba",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b75ac0a-2d0d-4d0a-829b-40271418244f",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49ebd68d-b41f-4b21-aefa-676c05863fc9",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aad1ad48-f050-4121-9fa0-c535b35a8e08",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a454c77-f1fa-4792-a628-ddb76ec6b1d5",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9ce230b9-0b70-4d7b-ae10-258ae556a664",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9714d6a6-057d-417e-becb-0f7594a0cde0",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c7825cd-c5bf-45f9-bc17-3859f523be45",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a05c37f-5289-43a1-b38a-3f5e7b42e4f7",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f50fdca-1f1b-4ea4-a46c-deaea01f6e8c",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23316d6d-3512-4ebd-b9ed-0ec6c2f0475e",
                    "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 172
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4cbbe7c2-45c6-42bd-9c98-d6f1fb2dbe5e",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d360b258-afd2-481b-afb0-ce53381ed849",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75103ae2-0553-47b4-8f1a-ae39c6b198e8",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fde4768-478a-4501-a2d7-32504ff38233",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be21f555-9014-495f-b0b8-6901d1400280",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01e6a7ad-b13f-418f-a3ab-f971d547eba3",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b31e8cd-e205-40ea-bb21-e20d980f431f",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29dbb670-1696-417f-9e42-66ce875681f9",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7c23b55-0c4c-44c4-9b5d-53b9aa52a127",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3caec86c-a530-4a7a-882f-fc2862cfabd6",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "704a397c-d692-4686-b5b5-a4cfb7ea3a8c",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba52b0ac-af48-47a4-bd8f-391de858aa83",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "239f5877-d503-44c0-b1fa-d50931a0f983",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4cbbe7c2-45c6-42bd-9c98-d6f1fb2dbe5e",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d360b258-afd2-481b-afb0-ce53381ed849",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75103ae2-0553-47b4-8f1a-ae39c6b198e8",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fde4768-478a-4501-a2d7-32504ff38233",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be21f555-9014-495f-b0b8-6901d1400280",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01e6a7ad-b13f-418f-a3ab-f971d547eba3",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b31e8cd-e205-40ea-bb21-e20d980f431f",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29dbb670-1696-417f-9e42-66ce875681f9",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7c23b55-0c4c-44c4-9b5d-53b9aa52a127",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3caec86c-a530-4a7a-882f-fc2862cfabd6",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "704a397c-d692-4686-b5b5-a4cfb7ea3a8c",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba52b0ac-af48-47a4-bd8f-391de858aa83",
                    "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 171
              },
              {
                "title": "die Route /api/users/userDetails soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19717450-ca58-47e5-abfa-85f843029920",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f462faaa-07e6-4f8f-addd-0c7e0f17fb6e",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c6245cd-8928-49f0-af23-d8e75e715056",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a7c99e1-9c3f-4762-a09c-9b0619dece78",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cffd477b-2f24-4709-8574-5036dcdf1d30",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d147642c-dd79-41d0-b045-cd1bea535ab7",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39e63738-96fd-4bd1-ae05-0d48a06fe8eb",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd3db62d-0dc0-402c-bca0-eb7e4cc387b7",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a952a8bb-41c1-4efa-a221-0285ee411294",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf9652c3-feb0-4d30-8a39-9e6dcc5f1008",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7557e0b8-76a8-4996-b5d0-88782fda9d34",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba8ceff2-a560-49e6-a68b-beaac26c3d9d",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "f4fedd61-4706-4f7a-8c32-63399048d491",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19717450-ca58-47e5-abfa-85f843029920",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f462faaa-07e6-4f8f-addd-0c7e0f17fb6e",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c6245cd-8928-49f0-af23-d8e75e715056",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a7c99e1-9c3f-4762-a09c-9b0619dece78",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cffd477b-2f24-4709-8574-5036dcdf1d30",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d147642c-dd79-41d0-b045-cd1bea535ab7",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39e63738-96fd-4bd1-ae05-0d48a06fe8eb",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd3db62d-0dc0-402c-bca0-eb7e4cc387b7",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a952a8bb-41c1-4efa-a221-0285ee411294",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf9652c3-feb0-4d30-8a39-9e6dcc5f1008",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7557e0b8-76a8-4996-b5d0-88782fda9d34",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba8ceff2-a560-49e6-a68b-beaac26c3d9d",
                    "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 163
              },
              {
                "title": "die Route /api/ansprechpartner soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d874795-0596-4a6d-9fed-1c0e5606b163",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6266115b-2e16-4c4f-bdb3-a6745f807210",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ed68e3e-67cc-4d64-b77e-461d68f4fdc2",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67f883a1-8f7d-42aa-b933-dd6cc4014fa5",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "843b530c-ce8b-4126-90f7-a3cdbd1cdae4",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23c0b4c4-0c62-4d77-b3a2-9f09409b1b8a",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f565edd-e5dc-4524-8fec-18cd7a5b938c",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18eb658a-3ccd-4111-aed0-22404d9c3e89",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf31ab6a-d94e-4a90-b3d2-7cd03dc5e7c4",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d874795-0596-4a6d-9fed-1c0e5606b163",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6266115b-2e16-4c4f-bdb3-a6745f807210",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ed68e3e-67cc-4d64-b77e-461d68f4fdc2",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67f883a1-8f7d-42aa-b933-dd6cc4014fa5",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "843b530c-ce8b-4126-90f7-a3cdbd1cdae4",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23c0b4c4-0c62-4d77-b3a2-9f09409b1b8a",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f565edd-e5dc-4524-8fec-18cd7a5b938c",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18eb658a-3ccd-4111-aed0-22404d9c3e89",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf31ab6a-d94e-4a90-b3d2-7cd03dc5e7c4",
                    "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 91
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "4659b356-4d96-46e1-aa96-cb32538efd81",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/authorization.spec.js",
        "uuid": "cc9cbce4-7091-4ed7-8ae9-76360c4cc87d",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Bad Request Handler",
        "suites": [
          {
            "title": "es soll geprüft werden ob benötigte Parameter vorhanden sind",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8b7ad1a4-7d15-49ea-b427-82c43a95df9d",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e3d17681-e65d-4794-9157-499e757562c6",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cb2349ba-ef21-4af8-80a8-403d67944696",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8b7ad1a4-7d15-49ea-b427-82c43a95df9d",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e3d17681-e65d-4794-9157-499e757562c6",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cb2349ba-ef21-4af8-80a8-403d67944696",
                "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "840399eb-36a7-48eb-9046-4977e81fd283",
                    "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23e71f26-5f4a-4238-9e24-301f674bf739",
                    "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "840399eb-36a7-48eb-9046-4977e81fd283",
                    "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23e71f26-5f4a-4238-9e24-301f674bf739",
                    "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 28
              },
              {
                "title": "die Route /api/email/subscriber hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e2fc0d0-a30e-4852-aec9-749b22afa709",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb6cf3b5-1b6a-474b-b66e-482a5a776826",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9a8d3ad-4c63-435b-ac4d-9901c3ec5245",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7a1ff6b-4ebc-4308-abbb-1d8b4015e076",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "4162d447-e630-4888-b46e-2dc948f51040",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e2fc0d0-a30e-4852-aec9-749b22afa709",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb6cf3b5-1b6a-474b-b66e-482a5a776826",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9a8d3ad-4c63-435b-ac4d-9901c3ec5245",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7a1ff6b-4ebc-4308-abbb-1d8b4015e076",
                    "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 18
              },
              {
                "title": "die Route /api/email/bug hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f848dc64-fc30-466c-af2e-4c40f12eda81",
                    "parentUUID": "fc691432-4ad5-4451-b77a-55a873381c59",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "fc691432-4ad5-4451-b77a-55a873381c59",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f848dc64-fc30-466c-af2e-4c40f12eda81",
                    "parentUUID": "fc691432-4ad5-4451-b77a-55a873381c59",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              },
              {
                "title": "die Route /api/gruppen hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b42614d-a334-40f9-80c7-99f7f8311f0f",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e72fe74-ffdb-46a3-8ea7-a51490823f83",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47dc5241-b09d-491c-80d5-35ed67b4ae72",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "33deea87-9c27-417a-987a-0184196d4485",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b42614d-a334-40f9-80c7-99f7f8311f0f",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e72fe74-ffdb-46a3-8ea7-a51490823f83",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47dc5241-b09d-491c-80d5-35ed67b4ae72",
                    "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 22
              },
              {
                "title": "die Route /api/teams hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f437765-97c7-45ca-8db4-d20562236306",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7882f724-a67d-4d46-8993-6da90f51597a",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e32aae7-4cfc-4897-92bb-530127c7958d",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "302b746a-cf4f-4c96-be30-900893a2686e",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd0caf9f-afdd-4c8c-90a6-d4a2392da4fc",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f437765-97c7-45ca-8db4-d20562236306",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7882f724-a67d-4d46-8993-6da90f51597a",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e32aae7-4cfc-4897-92bb-530127c7958d",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "302b746a-cf4f-4c96-be30-900893a2686e",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd0caf9f-afdd-4c8c-90a6-d4a2392da4fc",
                    "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 36
              },
              {
                "title": "die Route /api/jugenden hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3f46c2c-5df8-4369-b4ea-cd932bd36a41",
                    "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d8570fc-7894-453e-850e-cfb052856a15",
                    "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3f46c2c-5df8-4369-b4ea-cd932bd36a41",
                    "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d8570fc-7894-453e-850e-cfb052856a15",
                    "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 17
              },
              {
                "title": "die Route /api/spiele hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71309367-718e-400e-8c6d-490b9269fb5a",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ec0d013-878c-464e-ae85-e9ea6fe1ed94",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9745e8d-04ed-458c-8aaa-dcb840eb5271",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71309367-718e-400e-8c6d-490b9269fb5a",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ec0d013-878c-464e-ae85-e9ea6fe1ed94",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9745e8d-04ed-458c-8aaa-dcb840eb5271",
                    "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 29
              },
              {
                "title": "die Route /api/spiele/tore hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3a1e2e7-3295-47b4-a77b-f21dd556c3c3",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca0096c3-dd23-4d62-a646-5725d38ffbf8",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df227cd2-235e-4ebd-b9e7-afd34e9ecf73",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "595d37c7-a7de-4d7a-9601-f0bef0fb9a8a",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "72f9e99f-e933-400d-a669-d5858ccd2387",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3a1e2e7-3295-47b4-a77b-f21dd556c3c3",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca0096c3-dd23-4d62-a646-5725d38ffbf8",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df227cd2-235e-4ebd-b9e7-afd34e9ecf73",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "595d37c7-a7de-4d7a-9601-f0bef0fb9a8a",
                    "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 25
              },
              {
                "title": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91fd76de-5409-4b11-a9db-b2776afaf551",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b6ee33f-ed7e-41fd-8f61-e738a5cd73c4",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17231a23-f845-4a8f-903c-604817a8868b",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8ad226a-89cc-4a00-adf7-b0ea72ec7c4a",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c088197-e62b-4a41-9bac-ffd91ff05090",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fd1f2b5-6477-44f3-ad9c-a0fca930088d",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91fd76de-5409-4b11-a9db-b2776afaf551",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b6ee33f-ed7e-41fd-8f61-e738a5cd73c4",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17231a23-f845-4a8f-903c-604817a8868b",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8ad226a-89cc-4a00-adf7-b0ea72ec7c4a",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c088197-e62b-4a41-9bac-ffd91ff05090",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fd1f2b5-6477-44f3-ad9c-a0fca930088d",
                    "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 88
              },
              {
                "title": "die Route /api/users/register hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "567e168e-9d3b-4235-800d-5d8c1e0cc76f",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0aa2d25a-7ec4-4c5d-a1d1-669e6338e633",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b605f9b-4fc7-404f-8bb2-ed94ecfa6b34",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "567e168e-9d3b-4235-800d-5d8c1e0cc76f",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0aa2d25a-7ec4-4c5d-a1d1-669e6338e633",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b605f9b-4fc7-404f-8bb2-ed94ecfa6b34",
                    "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 40
              },
              {
                "title": "die Route /api/users/login hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b123cb4-87fb-475b-9efa-6df0509c6c28",
                    "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc92f2c8-230c-488a-b25f-d8d29e116385",
                    "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b123cb4-87fb-475b-9efa-6df0509c6c28",
                    "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc92f2c8-230c-488a-b25f-d8d29e116385",
                    "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 10
              },
              {
                "title": "die Route /api/users/delete hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82f41fa3-4639-45ae-b831-578c58b61260",
                    "parentUUID": "681a8639-9442-47ab-a6a2-b161d8f0365a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "681a8639-9442-47ab-a6a2-b161d8f0365a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82f41fa3-4639-45ae-b831-578c58b61260",
                    "parentUUID": "681a8639-9442-47ab-a6a2-b161d8f0365a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 8
              },
              {
                "title": "die Route /api/users/password-forgot hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b96c501-dde0-4c3f-9d1e-9c0f7e13dbfe",
                    "parentUUID": "05ff19f0-38af-4bc0-aef2-757972f16a43",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "05ff19f0-38af-4bc0-aef2-757972f16a43",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b96c501-dde0-4c3f-9d1e-9c0f7e13dbfe",
                    "parentUUID": "05ff19f0-38af-4bc0-aef2-757972f16a43",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5
              },
              {
                "title": "die Route /api/users/password-reset/check hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bec97d06-8438-4e6a-a02b-1cfef5df0b8f",
                    "parentUUID": "2f0b64ea-4e1d-40fd-88d7-e3c36c1c3b3b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "2f0b64ea-4e1d-40fd-88d7-e3c36c1c3b3b",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bec97d06-8438-4e6a-a02b-1cfef5df0b8f",
                    "parentUUID": "2f0b64ea-4e1d-40fd-88d7-e3c36c1c3b3b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 8
              },
              {
                "title": "die Route /api/users/password-reset hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "735caa13-67a8-46cf-b889-907abd4dd21a",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "945d245c-e0e5-40f4-87da-8a179b294e86",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09ae9366-e29e-4553-81dc-ea42a5b6085a",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "735caa13-67a8-46cf-b889-907abd4dd21a",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "945d245c-e0e5-40f4-87da-8a179b294e86",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09ae9366-e29e-4553-81dc-ea42a5b6085a",
                    "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 9
              },
              {
                "title": "die Route /api/users/userDetails hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dbb3be7-daa8-400f-8020-73cb33e8d666",
                    "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c695aba4-a6e3-4fa7-80e9-dbfd638e189f",
                    "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dbb3be7-daa8-400f-8020-73cb33e8d666",
                    "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c695aba4-a6e3-4fa7-80e9-dbfd638e189f",
                    "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 18
              },
              {
                "title": "die Route /api/ansprechpartner hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91a737d0-492d-4d96-b91c-14a57471cd77",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9522d167-5d7b-4579-a082-af445c11f03a",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7f6e17a-13be-4cf1-9350-1584c2e0de12",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc833a9d-f1b4-4e76-b45a-af9b2815e36a",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28b2541c-8e96-4c03-a35d-be947a21ffdf",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91a737d0-492d-4d96-b91c-14a57471cd77",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9522d167-5d7b-4579-a082-af445c11f03a",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7f6e17a-13be-4cf1-9350-1584c2e0de12",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc833a9d-f1b4-4e76-b45a-af9b2815e36a",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28b2541c-8e96-4c03-a35d-be947a21ffdf",
                    "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 68
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "124f9384-5f52-4644-ad1b-0c3a4eb649fa",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/badRequestHandler.spec.js",
        "uuid": "fb697296-22da-49d3-bd87-91037ff61916",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "8dce08ce-e07d-4b58-9569-378b27e6bd02",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 88,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f2255339-cd28-4a43-a8bb-ada62e37502d",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fe7401d-dbeb-4c18-b25c-f6225f38ff69",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d1e4ce8-970e-48cd-a469-ccfa94ba6e6d",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "26eaf8cb-a3af-4b2b-baa9-3b6771d812a9",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fd56a3b-ce7b-490d-8d2f-874cc64049c3",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "adbdea89-494d-4a89-ad7e-a743c6b98583",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b32ec1eb-f3cc-46c0-8950-54cb2e96903b",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c26639c7-c033-440b-b3f5-97fe180f0f89",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0463fec7-1c1f-4e78-a7c5-39779ceeec5b",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c4bd1a7d-25fd-4334-b2cc-18967147fbb2",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "75b578ff-70c9-42ec-8ad2-6e14ccd79893",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "127202ba-c075-4ce4-9093-7467335f40b1",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "98eea83e-535c-4c9f-8da7-43a75aaaecf7",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "952e0a8b-c430-4535-89a9-3c9650e1897c",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55f522bb-1b06-48b7-baea-100010d646c3",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1f5ac41-6bee-439b-a6b5-e3766cf549a5",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57eaf454-19ac-4805-a244-128930f706d7",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "205dbc4c-876c-43c7-810f-c29e05be0293",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4627ccb1-54d2-48da-aa97-283dfd3024b2",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa6b717e-2d33-4457-a877-bbd20b878c5f",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e48a953-8306-432c-a5ba-8e4622fd888f",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ed6ed91-35b2-4482-80e3-cd8801894ce4",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55a39b78-d5e5-4d58-bdf5-418ac414f945",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cafd84fc-91ce-4520-a912-1f62b039ac1c",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "79644123-41b7-47b5-aa40-fe04f51c8e7e",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cec396c-57a2-4371-8a27-b67074e99e87",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "749b8286-22fe-4d78-8ada-d69b37db095a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a95474a0-506f-405b-b141-85f92d579f92",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c934217-b8d8-4c78-94e0-d3d3ba4fc29a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7cc9280b-02d9-49f5-9e96-298b97a8694a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "6535f81d-0008-4586-9884-dea661d22489",
      "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "e4ed0a66-a75f-45f4-afe3-32fd045df0a0",
      "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "9b8897a1-fed0-49ae-87b5-11a9efde3fdf",
      "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "6ba63db3-6742-4016-a332-f907a654c4a9",
      "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "cfd9b287-126c-42c6-8ab2-7fb5aaedf98f",
      "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "45fc0d77-e62a-4452-8f50-716ffde4f99a",
      "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "aad848a5-2317-43f0-b8bb-e59b8a9aac66",
      "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "5a86fd10-0e1a-40ff-aa67-e6efb2a866a0",
      "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "537ef645-0a61-414a-a13f-ef88272c7140",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "c396ec8a-0b53-41e8-8e71-a3c0c95b0a8d",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "bdddbb97-c7fc-4836-895a-75409a5db976",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "7a2d7905-0bd4-4b7b-addf-45e3a8cc1455",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "33cfb9cc-2254-4c30-a05b-bdac0ae25f5b",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "f00075ce-8629-440c-bb34-6760fced7b63",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "4f9580b6-ce78-4464-98fa-7ed929f4db1c",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "8bdc4c8c-0d75-41bf-9d61-d5e2efb471d7",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "62cec7be-2a91-4ba4-ba02-2834ee6a2cdf",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "995be7f9-4b48-40b9-a7b6-b4f2bc8af6e4",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "2a9518cc-7971-4878-ae3b-12fbdbdea7cd",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "56bf103f-529f-4bf8-8947-4312e09fb3a8",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "ef92e73e-06f8-4177-9e61-28d8d55a0bb2",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bcd42575-b8ea-4f55-9c3f-f0f9f2208053",
      "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "8704d732-a738-4070-b8f5-4c444b180f99",
      "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "83eea74f-620e-4ac0-8495-feea755cecf8",
      "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "42cd554f-eb46-4cfd-8a74-2586bc2f17ef",
      "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "3ddb68cd-0f4f-4d56-9844-23f9972aae6e",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "25730cf2-e53b-44dd-92a4-40b6ba70552c",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "4a62a88e-5952-4006-8355-ff266c1ebc69",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "b86da3fb-3706-42b6-972e-e3eadddc0585",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "7304ac0f-b313-4c3c-8806-bd98f6b716c5",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "c1ef8f52-0590-41df-b12c-44c26b34bcf2",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "f9c5b931-d4d4-49bc-aef8-189bee285a5d",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "e7f5009d-9cd2-48dd-a727-688ec60b99fa",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "1129395c-1e43-46d3-84e2-32de3e8158dd",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "c062d52a-be91-4977-9fdb-2bef007bc1f3",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "da90dc80-461e-4df2-9044-92b367363bd4",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "8752cc7b-9719-4339-97dc-1f56d4fbce03",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "68db9efc-d358-4480-b05f-158e80209f61",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "eaabd5fa-bc3f-4fb4-8e0c-71880ee0cb78",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c6fb56eb-d6e5-4474-b60b-319177c39b8c",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3490a5c4-b46c-4071-9fdc-ef2557f37f49",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "63bafeb0-de30-44af-970a-49d8f89d229b",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "0a697ccc-fd14-4131-a44e-4dc23263b526",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "aa918bc2-4a45-4d0c-84da-03fd37ab1740",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "44c66a2f-bef8-4bbc-bb64-f188f80699a0",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "71242b14-70c9-4300-8787-34a6038250e1",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "43e393fd-4c24-4101-a832-75bfd1524767",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c7dfb86a-3f07-4c3d-8f31-b9d80d7c59a3",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f24a7755-5803-4781-8236-964ed5c83e48",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "b05cbf33-d2ed-496f-8678-b084d5bb1d84",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e6287070-44da-4c3d-b9c4-e7b88d49d43c",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "627fe598-e577-487c-a33d-bd4e4f406dbb",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dfc8c743-aca2-4b98-87cf-16ac07f17b63",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1a1f00ac-69d3-4ccd-b7d9-1c5c7b0eb3af",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7bee6c92-4f06-42ed-a4c9-58e91f063f6b",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a1af8b08-9abe-4507-a1be-71423a2abfc4",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "57e9b575-dee6-4f7e-8913-130406c3e45f",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c347c42b-d959-4062-83d4-0779ab0d3ec0",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "82c3b893-b75c-45a2-8408-8ebc49839ec9",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1dffc1d0-3653-4bd8-83e0-eb77db0dba71",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8e381973-8489-4e16-9962-8e7d318a5cd2",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "086c43ab-eefe-4cff-ba32-203f31a564db",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6d20762c-5a12-4ada-af5f-3c47a24f4947",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c0d9023c-90b5-4ef0-976d-d4d7a5921d66",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "db8dfc5d-867a-4adf-a5d3-aa554234c861",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "effc0567-3d61-425d-9f7f-16ffa7448c2e",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ea8f076b-3892-4c7d-8e03-4d856c3ddf61",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2348490e-5198-4ce2-9338-bee6f669eda3",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "f755207f-71d2-415b-9b93-5122078d5d1a",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "b7da3589-a1f2-4535-bb34-51de48a1be37",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7b006b5b-9f96-4a77-952a-142c324ff6aa",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ac627cb6-87ef-4b92-9bc1-33219a93f604",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "ef8c4462-c390-4764-b16a-d662deafe47b",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "0ed935ac-4910-40ad-824b-a2b6bd141c56",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "92cd9b83-0839-4b16-b537-db6df1505bd0",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5b96cb51-0717-45e0-93fe-95e83bf13f0f",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d2d05290-cb79-4c30-a062-843632a6f96a",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "31d8610a-8098-4995-a043-cc8e3c0a248c",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bac733a-3871-411c-995e-d723aa82c886",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c20f99f4-831a-4aea-ba26-19f863714e59",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40812c84-8b5f-4649-acb1-a4a9c3184011",
      "parentUUID": "0b7fed2f-1fde-47ef-9d38-407c2a644ce5",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1ee4d36-16cd-4055-85d7-9bf94ec4c770",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "424874c0-913b-4dcf-afaf-0ac66c537f26",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "595799b6-3e3a-4e52-bdc1-952a8c44a017",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5c8fd187-9710-47ad-b43f-ef1b5d2441bd",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60daabf4-696e-4d96-be41-95bea37ba774",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a66d828-84e4-4528-ad78-a9da1ce67bfe",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "023ec0fb-891a-4496-a1cb-eb365f4f73a1",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80a3429e-1979-4a4d-a7e3-0f9ba5d8f7d2",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "31f000b1-3f2b-43a8-905a-8ff46adbc3bf",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c016212-8ad5-4ee2-a898-3479ea2bf041",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e243aaaa-5db1-4108-9af5-c6e0a8046679",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a932c9fb-a8fa-4163-b14e-7da445adbc99",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d5ae398a-95bc-4b63-9040-11f6f0b7db43",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73c14b0-c2a6-4a33-a39c-de1292270744",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a1a3253-d7d4-4e5d-ae76-c2dc0f2a744a",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b4105fb-722c-43d3-a942-f7d91a2c742f",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d077f60-8881-449e-a29c-e08feb8c0747",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15101407-cbcc-471e-b3d8-aaaf8bfde0b1",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1154d6a5-931a-43d4-bd2d-c1df4f2c53cb",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 58,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c1c7e122-446a-4851-8770-3bd70224c457",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce90ea00-c545-4be3-90da-5e6f67e7100d",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "37a99761-f0b9-4ab6-ab85-612c8dbb3e98",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "453a1462-073b-40a3-8d20-100fe50b1fb3",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 60,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1451b589-4ab6-41ab-999e-c2bb0d7a96f8",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d69a072-bcd0-463c-a356-9c32437ba9df",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42a8bae8-a580-4825-a2c1-7027b93adacd",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "45d8c875-ddfb-4b85-86d1-b13428d4c901",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e1c4ad5-fa4e-4951-875a-1dc1089350eb",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fc7a8c5f-0adf-4d6a-8b1e-68a75c436073",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2f30f08-f163-42cf-b1e9-f4b48d34dce6",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "732336f4-6f81-411f-a376-de81d07fc22d",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "730a7995-fb29-4d29-b94f-d8a0426fd95e",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 180,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77bc6aaf-c8d2-44e5-a6f2-b75c89d3613c",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "61648ddf-8186-4392-b0f3-20c0a08ee62c",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "187c77ad-7c96-4966-ae3d-551c43e09454",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e373ced-870d-4fcc-88a5-b50b4dac91db",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86233cc9-888a-410e-916a-861e51f1fdb8",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fde081df-ddc7-4036-91d9-91feed65cad0",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25e13e9a-2f6a-440a-ba69-59adc1dcc346",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7fa4458-91e2-4a6a-a543-cd31f35af4b1",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3081d66-b3fa-44fb-8e06-7fb10d9c516f",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "779b8414-b86e-42c9-aee1-0bc6e25227b7",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53c9e497-3279-4130-b2e4-58e57eb6abaa",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eb826b9e-ffbb-4ddb-bcc9-1401ed49625f",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0195963f-d912-45cb-9242-df0a0518a575",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c23e11c0-7d0d-4a83-97c2-7f804bc22cde",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a977edb-c18e-4e8a-b2a9-7c2a8e938715",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 373,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1f120325-607d-4a7d-99d7-b8bffeba9e9e",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15f5aca7-a90a-4877-991a-953a41531eb0",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d676ea3c-48c3-40a5-be12-3fd1b7ff17fd",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a1acd8c-2864-4ec4-a706-5f04c8bcaeea",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "113350de-cdfe-4de9-a3f2-b471a2029220",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a5e95ff-49de-4cf7-92b6-aab347f66503",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d754e84f-ea7b-4b31-a352-6590ade4c461",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ceb9004-9c4e-4f20-bb5e-b9189169218d",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4f14217e-c38c-459e-9645-cc0a6096b9f7",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 208,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b40e260-0a7c-425a-aaad-ba49b0f1cbe3",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d436238-a100-4a85-8502-41d403f343da",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e79307b-6418-4896-b4f8-8822049e3a3a",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "73e04ba6-912e-40aa-b805-830f10ad0894",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a0a7bb2-5db3-4d5f-831a-89c05a576d52",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f38a238-d763-4bd6-83ee-5cefa29557fa",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c3b2450-932d-44c5-b9ea-bc608a16e0b9",
      "parentUUID": "9de56423-5087-4b5a-91b4-156b2f664830",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07ee61e7-8181-43bd-8c4c-b6c5de9c3d46",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "701ee7a8-b76d-4cac-9eb6-f865b35094a2",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d843f4d-4b1a-497a-889c-dd388f47cb8f",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa0747fb-bb1e-461f-9467-f8b1995b6e82",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f408219-8459-4281-aeaf-1e7bb17656e1",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4d0fa38-5396-4b7a-9b0d-42b45a44b0d2",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "459105e2-b310-4f05-8e3c-e55d39b4dd74",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a19e58c9-7717-4611-9ff4-d855a577ce82",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99ee67ae-183d-42dc-bb58-44c3c465db34",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd1d4210-0de4-4244-8610-a81bce7a5c6e",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9cbae1d-0da6-42a3-ac69-8ab4128ad697",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "301d7821-fbcc-46b8-9d77-6d3c06fffa3f",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aeff3e6b-d37b-46c8-ad59-e4e19ef1eefb",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ef359cee-9509-4882-9a3c-09521be23bbd",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd20fbf4-222f-45cf-82cd-7eaee49ab815",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1be55b8a-e670-489a-b1f5-ddfabd091497",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d83963e-8102-4704-a463-4f641ec196a6",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc0aabe3-0353-4fc5-8b77-d44e46758f72",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe99a67f-3c60-4878-ba32-5b3bc14257b2",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6ee5a80-d09c-417a-9cbe-1c07cb7f79d1",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a92c86c0-981a-4024-a75f-dbbd1c67bc57",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77ac4d85-c9b9-421c-b9dc-122b5f9e4f4c",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fc5162b-5f0d-41f0-a3bf-c6041c2832db",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "abd370a4-a261-4208-83f8-165b4bf6565d",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "54cf3611-57f5-40fb-be08-0073eefbb58d",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2c2b861-9826-4dc7-bc8b-10d57a5aa5dc",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f95b654-41ad-4324-aa36-48309c50481e",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e73d4e88-71e1-4e6b-bcac-7d12d2e30f30",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9103e648-5d1a-4d4e-8801-a3a520b27390",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dd8a5e6-1024-49d2-b9ad-a21bc7687138",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47413df9-039e-432f-a04a-b33f5c0625f0",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fed0df5-6081-46d5-9505-c5a451751935",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "38fe0e2b-f31d-4e6b-b0b3-ee07e27cd13f",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "340b6d6d-72ba-4d66-99a8-2e2f726110ea",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0aa11177-4d50-4080-ab65-1e88b5bfa3a6",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5733261a-6973-45a2-a3f2-38a59bad79d2",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fb2beb5-1beb-4f78-9f7e-5f1756bb04a4",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2debc1a-cc26-46c3-ac9d-1e653c159aec",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69499a32-481d-4f81-8208-71133dc9d319",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fce4e8c2-b3a9-449c-a75b-76b406824b6d",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eda04a27-af3d-40f7-a66b-ba11921a372c",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84131587-4422-461a-8179-0416682a4c2c",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07dff3c7-e645-4f29-91da-6df2f0790af2",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40550117-fa11-474b-96e5-9f73d92c9f94",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7227124f-6571-4600-b063-7296b1332dbe",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "71e29160-ae94-46b2-af78-7d46c845207a",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c1e841b-2761-4320-b1ae-7ac54fd6d7b0",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb92e486-8ecf-45c8-8d92-461d12ebfe12",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9418ae78-7e64-4fda-8667-d5fdc1df7293",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f40a7ec1-d034-4fd2-a3af-2f3534e9577a",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77384cc6-0323-4928-be18-34745af66ea8",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "626025cf-6516-4e46-b27b-4d3a036a6841",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "46ddeec6-0bb7-4213-88b7-0c50b57fb181",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77962c89-767b-46aa-886a-502f73cd73e1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23528684-b42b-448d-a8d3-07d1462916e5",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fc7b2d42-938a-46c1-b5c4-ec69b1cc53d4",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4941d5fd-5cb0-461e-8ee3-ba13aefe86a1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c572c858-6187-4c22-ab43-443bde199833",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1bf7eac-f271-4ed8-9be0-5de68577f2e1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b8f878a-63d6-4713-a628-adede310f177",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca58036c-b4f7-43f9-9f20-ca704117c3c1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "134eabf5-9b25-4be0-9eea-7234f75a2797",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "26ff7cf2-656f-43bc-b947-f2b2b82ff490",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2f0c7d0-4682-43d1-8277-7faaa3d6b548",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15c9962d-a233-4dc4-b0bd-3fe92f37d7d6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97a07fbc-9c5f-41d1-b9bc-af28255620f8",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9566241f-dba1-405b-9e43-a5a04d1484e1",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c31e8766-e3e1-4e12-987f-4e191598cb40",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68397d78-49f6-4f89-94db-b345b70b82a0",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57f641cb-07cb-4361-ad9b-a6983f7d5bf1",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e5d72ba4-0585-45f4-8f36-b956d532cb10",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7c97cee-7efb-4852-8fb5-5dae894a1ad6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64d21ed5-0c95-4f31-89f3-ba7d463cdeba",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5917db0-9c5f-4dde-bd46-6049f0a18680",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "90d4021e-01e0-4114-ad0a-cc60b50ccd2d",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c95c10a-ef87-4be9-916f-b0ba099c1cf6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff07af6e-c21f-4344-aff5-bf81c77f37ca",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "022c7aa8-c1e9-4573-bba2-7fd3dc4e2854",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d404e365-1efa-42e8-ba12-91538757a4e3",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13001f2f-c705-41ef-b236-6c16dce78e82",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4f33937-b102-42f6-9d6a-e1ca22cbb9d9",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b5016221-2d66-4e67-8f22-dbf88c7ce0f4",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d8c10c7-4b0f-4beb-b885-693b5679203d",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aae3f0b6-fda9-4591-b8ed-60472f4c9e64",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 212,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cfb59329-af15-4260-bc5c-4b1e13694490",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a25d9df-5a2b-4d5d-beba-371e0a48f4b4",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b2f5c3f-f2a0-4236-ad7b-63f9d3294970",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c615859d-8f84-4442-806e-e8c42989c515",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03269c73-d08a-43a4-9d46-7119bd75ba70",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "183f49e2-b26e-466a-b438-e8991664caba",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b75ac0a-2d0d-4d0a-829b-40271418244f",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "49ebd68d-b41f-4b21-aefa-676c05863fc9",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aad1ad48-f050-4121-9fa0-c535b35a8e08",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a454c77-f1fa-4792-a628-ddb76ec6b1d5",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ce230b9-0b70-4d7b-ae10-258ae556a664",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9714d6a6-057d-417e-becb-0f7594a0cde0",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c7825cd-c5bf-45f9-bc17-3859f523be45",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a05c37f-5289-43a1-b38a-3f5e7b42e4f7",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f50fdca-1f1b-4ea4-a46c-deaea01f6e8c",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23316d6d-3512-4ebd-b9ed-0ec6c2f0475e",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4cbbe7c2-45c6-42bd-9c98-d6f1fb2dbe5e",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d360b258-afd2-481b-afb0-ce53381ed849",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75103ae2-0553-47b4-8f1a-ae39c6b198e8",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4fde4768-478a-4501-a2d7-32504ff38233",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be21f555-9014-495f-b0b8-6901d1400280",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "01e6a7ad-b13f-418f-a3ab-f971d547eba3",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b31e8cd-e205-40ea-bb21-e20d980f431f",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "29dbb670-1696-417f-9e42-66ce875681f9",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e7c23b55-0c4c-44c4-9b5d-53b9aa52a127",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3caec86c-a530-4a7a-882f-fc2862cfabd6",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "704a397c-d692-4686-b5b5-a4cfb7ea3a8c",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba52b0ac-af48-47a4-bd8f-391de858aa83",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19717450-ca58-47e5-abfa-85f843029920",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f462faaa-07e6-4f8f-addd-0c7e0f17fb6e",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c6245cd-8928-49f0-af23-d8e75e715056",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a7c99e1-9c3f-4762-a09c-9b0619dece78",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cffd477b-2f24-4709-8574-5036dcdf1d30",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d147642c-dd79-41d0-b045-cd1bea535ab7",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "39e63738-96fd-4bd1-ae05-0d48a06fe8eb",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd3db62d-0dc0-402c-bca0-eb7e4cc387b7",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a952a8bb-41c1-4efa-a221-0285ee411294",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf9652c3-feb0-4d30-8a39-9e6dcc5f1008",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7557e0b8-76a8-4996-b5d0-88782fda9d34",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba8ceff2-a560-49e6-a68b-beaac26c3d9d",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6d874795-0596-4a6d-9fed-1c0e5606b163",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6266115b-2e16-4c4f-bdb3-a6745f807210",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ed68e3e-67cc-4d64-b77e-461d68f4fdc2",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67f883a1-8f7d-42aa-b933-dd6cc4014fa5",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "843b530c-ce8b-4126-90f7-a3cdbd1cdae4",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23c0b4c4-0c62-4d77-b3a2-9f09409b1b8a",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f565edd-e5dc-4524-8fec-18cd7a5b938c",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18eb658a-3ccd-4111-aed0-22404d9c3e89",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cf31ab6a-d94e-4a90-b3d2-7cd03dc5e7c4",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b7ad1a4-7d15-49ea-b427-82c43a95df9d",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3d17681-e65d-4794-9157-499e757562c6",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb2349ba-ef21-4af8-80a8-403d67944696",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "840399eb-36a7-48eb-9046-4977e81fd283",
      "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23e71f26-5f4a-4238-9e24-301f674bf739",
      "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e2fc0d0-a30e-4852-aec9-749b22afa709",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb6cf3b5-1b6a-474b-b66e-482a5a776826",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9a8d3ad-4c63-435b-ac4d-9901c3ec5245",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c7a1ff6b-4ebc-4308-abbb-1d8b4015e076",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f848dc64-fc30-466c-af2e-4c40f12eda81",
      "parentUUID": "fc691432-4ad5-4451-b77a-55a873381c59",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b42614d-a334-40f9-80c7-99f7f8311f0f",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e72fe74-ffdb-46a3-8ea7-a51490823f83",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47dc5241-b09d-491c-80d5-35ed67b4ae72",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f437765-97c7-45ca-8db4-d20562236306",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7882f724-a67d-4d46-8993-6da90f51597a",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e32aae7-4cfc-4897-92bb-530127c7958d",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "302b746a-cf4f-4c96-be30-900893a2686e",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd0caf9f-afdd-4c8c-90a6-d4a2392da4fc",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3f46c2c-5df8-4369-b4ea-cd932bd36a41",
      "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d8570fc-7894-453e-850e-cfb052856a15",
      "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "71309367-718e-400e-8c6d-490b9269fb5a",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ec0d013-878c-464e-ae85-e9ea6fe1ed94",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9745e8d-04ed-458c-8aaa-dcb840eb5271",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c3a1e2e7-3295-47b4-a77b-f21dd556c3c3",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca0096c3-dd23-4d62-a646-5725d38ffbf8",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df227cd2-235e-4ebd-b9e7-afd34e9ecf73",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "595d37c7-a7de-4d7a-9601-f0bef0fb9a8a",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91fd76de-5409-4b11-a9db-b2776afaf551",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b6ee33f-ed7e-41fd-8f61-e738a5cd73c4",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "17231a23-f845-4a8f-903c-604817a8868b",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8ad226a-89cc-4a00-adf7-b0ea72ec7c4a",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c088197-e62b-4a41-9bac-ffd91ff05090",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fd1f2b5-6477-44f3-ad9c-a0fca930088d",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "567e168e-9d3b-4235-800d-5d8c1e0cc76f",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0aa2d25a-7ec4-4c5d-a1d1-669e6338e633",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b605f9b-4fc7-404f-8bb2-ed94ecfa6b34",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b123cb4-87fb-475b-9efa-6df0509c6c28",
      "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc92f2c8-230c-488a-b25f-d8d29e116385",
      "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "82f41fa3-4639-45ae-b831-578c58b61260",
      "parentUUID": "681a8639-9442-47ab-a6a2-b161d8f0365a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b96c501-dde0-4c3f-9d1e-9c0f7e13dbfe",
      "parentUUID": "05ff19f0-38af-4bc0-aef2-757972f16a43",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bec97d06-8438-4e6a-a02b-1cfef5df0b8f",
      "parentUUID": "2f0b64ea-4e1d-40fd-88d7-e3c36c1c3b3b",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "735caa13-67a8-46cf-b889-907abd4dd21a",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "945d245c-e0e5-40f4-87da-8a179b294e86",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "09ae9366-e29e-4553-81dc-ea42a5b6085a",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dbb3be7-daa8-400f-8020-73cb33e8d666",
      "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c695aba4-a6e3-4fa7-80e9-dbfd638e189f",
      "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91a737d0-492d-4d96-b91c-14a57471cd77",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9522d167-5d7b-4579-a082-af445c11f03a",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7f6e17a-13be-4cf1-9350-1584c2e0de12",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc833a9d-f1b4-4e76-b45a-af9b2815e36a",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28b2541c-8e96-4c03-a35d-be947a21ffdf",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 88,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f2255339-cd28-4a43-a8bb-ada62e37502d",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fe7401d-dbeb-4c18-b25c-f6225f38ff69",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d1e4ce8-970e-48cd-a469-ccfa94ba6e6d",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "26eaf8cb-a3af-4b2b-baa9-3b6771d812a9",
      "parentUUID": "9bbad3aa-41a5-4fd3-b617-8023549b23ad",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fd56a3b-ce7b-490d-8d2f-874cc64049c3",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "adbdea89-494d-4a89-ad7e-a743c6b98583",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b32ec1eb-f3cc-46c0-8950-54cb2e96903b",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c26639c7-c033-440b-b3f5-97fe180f0f89",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0463fec7-1c1f-4e78-a7c5-39779ceeec5b",
      "parentUUID": "5912a7b4-0a5d-411a-ab05-fa8e47c9bf49",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c4bd1a7d-25fd-4334-b2cc-18967147fbb2",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "75b578ff-70c9-42ec-8ad2-6e14ccd79893",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "127202ba-c075-4ce4-9093-7467335f40b1",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "98eea83e-535c-4c9f-8da7-43a75aaaecf7",
      "parentUUID": "1486f8dd-9e1a-4ec7-9681-1dc3b669c42f",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "952e0a8b-c430-4535-89a9-3c9650e1897c",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55f522bb-1b06-48b7-baea-100010d646c3",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1f5ac41-6bee-439b-a6b5-e3766cf549a5",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57eaf454-19ac-4805-a244-128930f706d7",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "205dbc4c-876c-43c7-810f-c29e05be0293",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4627ccb1-54d2-48da-aa97-283dfd3024b2",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa6b717e-2d33-4457-a877-bbd20b878c5f",
      "parentUUID": "fb77f2c6-bab9-48e1-9d2e-6ebba662b797",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e48a953-8306-432c-a5ba-8e4622fd888f",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ed6ed91-35b2-4482-80e3-cd8801894ce4",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55a39b78-d5e5-4d58-bdf5-418ac414f945",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cafd84fc-91ce-4520-a912-1f62b039ac1c",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "79644123-41b7-47b5-aa40-fe04f51c8e7e",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cec396c-57a2-4371-8a27-b67074e99e87",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "749b8286-22fe-4d78-8ada-d69b37db095a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a95474a0-506f-405b-b141-85f92d579f92",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c934217-b8d8-4c78-94e0-d3d3ba4fc29a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7cc9280b-02d9-49f5-9e96-298b97a8694a",
      "parentUUID": "7ffeebbf-df10-4b7f-a3d0-1aabbeaf4d61",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "6535f81d-0008-4586-9884-dea661d22489",
      "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "e4ed0a66-a75f-45f4-afe3-32fd045df0a0",
      "parentUUID": "5afa8100-39fc-4795-aada-5339b349b960",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "9b8897a1-fed0-49ae-87b5-11a9efde3fdf",
      "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "6ba63db3-6742-4016-a332-f907a654c4a9",
      "parentUUID": "febb3dff-7a9b-45ab-a6f1-d6ffb7ed1c48",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "cfd9b287-126c-42c6-8ab2-7fb5aaedf98f",
      "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "45fc0d77-e62a-4452-8f50-716ffde4f99a",
      "parentUUID": "d65d2f70-5a10-452d-90cf-905dd4f6d0c9",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "aad848a5-2317-43f0-b8bb-e59b8a9aac66",
      "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "5a86fd10-0e1a-40ff-aa67-e6efb2a866a0",
      "parentUUID": "a065c81b-4325-4d5f-b852-d44a8edf957c",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "537ef645-0a61-414a-a13f-ef88272c7140",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "c396ec8a-0b53-41e8-8e71-a3c0c95b0a8d",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "bdddbb97-c7fc-4836-895a-75409a5db976",
      "parentUUID": "f536e438-98d6-4218-8060-d8c20fd68581",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "7a2d7905-0bd4-4b7b-addf-45e3a8cc1455",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "33cfb9cc-2254-4c30-a05b-bdac0ae25f5b",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "f00075ce-8629-440c-bb34-6760fced7b63",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "4f9580b6-ce78-4464-98fa-7ed929f4db1c",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "8bdc4c8c-0d75-41bf-9d61-d5e2efb471d7",
      "parentUUID": "bdd3ecac-26d4-4aed-84b5-4d1fb721b5ed",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "62cec7be-2a91-4ba4-ba02-2834ee6a2cdf",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "995be7f9-4b48-40b9-a7b6-b4f2bc8af6e4",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "2a9518cc-7971-4878-ae3b-12fbdbdea7cd",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "56bf103f-529f-4bf8-8947-4312e09fb3a8",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "ef92e73e-06f8-4177-9e61-28d8d55a0bb2",
      "parentUUID": "b2853b19-62a4-4050-bf2e-4a6dbf7f135e",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bcd42575-b8ea-4f55-9c3f-f0f9f2208053",
      "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "8704d732-a738-4070-b8f5-4c444b180f99",
      "parentUUID": "ac499bcf-a8fd-4982-b5a2-f1cb303ecac9",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "83eea74f-620e-4ac0-8495-feea755cecf8",
      "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "42cd554f-eb46-4cfd-8a74-2586bc2f17ef",
      "parentUUID": "3c65edb1-3eb5-45c1-b720-cccd0b0bd65d",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "3ddb68cd-0f4f-4d56-9844-23f9972aae6e",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "25730cf2-e53b-44dd-92a4-40b6ba70552c",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "4a62a88e-5952-4006-8355-ff266c1ebc69",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "b86da3fb-3706-42b6-972e-e3eadddc0585",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "7304ac0f-b313-4c3c-8806-bd98f6b716c5",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "c1ef8f52-0590-41df-b12c-44c26b34bcf2",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "f9c5b931-d4d4-49bc-aef8-189bee285a5d",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "e7f5009d-9cd2-48dd-a727-688ec60b99fa",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "1129395c-1e43-46d3-84e2-32de3e8158dd",
      "parentUUID": "383591ce-4c50-498e-ae5b-8ad5a6cd8d7f",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "c062d52a-be91-4977-9fdb-2bef007bc1f3",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "da90dc80-461e-4df2-9044-92b367363bd4",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "8752cc7b-9719-4339-97dc-1f56d4fbce03",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "68db9efc-d358-4480-b05f-158e80209f61",
      "parentUUID": "c2076e96-7d71-4b8b-a967-2d402a8dec61",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "eaabd5fa-bc3f-4fb4-8e0c-71880ee0cb78",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c6fb56eb-d6e5-4474-b60b-319177c39b8c",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3490a5c4-b46c-4071-9fdc-ef2557f37f49",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "63bafeb0-de30-44af-970a-49d8f89d229b",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "0a697ccc-fd14-4131-a44e-4dc23263b526",
      "parentUUID": "c2b7b91a-2110-4751-89bc-78974e70ce01",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "aa918bc2-4a45-4d0c-84da-03fd37ab1740",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "44c66a2f-bef8-4bbc-bb64-f188f80699a0",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "71242b14-70c9-4300-8787-34a6038250e1",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "43e393fd-4c24-4101-a832-75bfd1524767",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c7dfb86a-3f07-4c3d-8f31-b9d80d7c59a3",
      "parentUUID": "0630ab93-3575-4425-be3a-55e66a04c733",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f24a7755-5803-4781-8236-964ed5c83e48",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "b05cbf33-d2ed-496f-8678-b084d5bb1d84",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e6287070-44da-4c3d-b9c4-e7b88d49d43c",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "627fe598-e577-487c-a33d-bd4e4f406dbb",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dfc8c743-aca2-4b98-87cf-16ac07f17b63",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1a1f00ac-69d3-4ccd-b7d9-1c5c7b0eb3af",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7bee6c92-4f06-42ed-a4c9-58e91f063f6b",
      "parentUUID": "e478bc43-d50f-46f8-9674-ea09fd2cc1be",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a1af8b08-9abe-4507-a1be-71423a2abfc4",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "57e9b575-dee6-4f7e-8913-130406c3e45f",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c347c42b-d959-4062-83d4-0779ab0d3ec0",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "82c3b893-b75c-45a2-8408-8ebc49839ec9",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1dffc1d0-3653-4bd8-83e0-eb77db0dba71",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8e381973-8489-4e16-9962-8e7d318a5cd2",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "086c43ab-eefe-4cff-ba32-203f31a564db",
      "parentUUID": "0b701771-0fb1-4e8c-9201-a765aa0e9402",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6d20762c-5a12-4ada-af5f-3c47a24f4947",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c0d9023c-90b5-4ef0-976d-d4d7a5921d66",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "db8dfc5d-867a-4adf-a5d3-aa554234c861",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "effc0567-3d61-425d-9f7f-16ffa7448c2e",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ea8f076b-3892-4c7d-8e03-4d856c3ddf61",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2348490e-5198-4ce2-9338-bee6f669eda3",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "f755207f-71d2-415b-9b93-5122078d5d1a",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "b7da3589-a1f2-4535-bb34-51de48a1be37",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7b006b5b-9f96-4a77-952a-142c324ff6aa",
      "parentUUID": "86795386-770f-4328-ab9f-5756be5478db",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ac627cb6-87ef-4b92-9bc1-33219a93f604",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "ef8c4462-c390-4764-b16a-d662deafe47b",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "0ed935ac-4910-40ad-824b-a2b6bd141c56",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "92cd9b83-0839-4b16-b537-db6df1505bd0",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5b96cb51-0717-45e0-93fe-95e83bf13f0f",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d2d05290-cb79-4c30-a062-843632a6f96a",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "31d8610a-8098-4995-a043-cc8e3c0a248c",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bac733a-3871-411c-995e-d723aa82c886",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c20f99f4-831a-4aea-ba26-19f863714e59",
      "parentUUID": "f64740fe-b2e2-4a42-b586-d56f4fcedfa2",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40812c84-8b5f-4649-acb1-a4a9c3184011",
      "parentUUID": "0b7fed2f-1fde-47ef-9d38-407c2a644ce5",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1ee4d36-16cd-4055-85d7-9bf94ec4c770",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "424874c0-913b-4dcf-afaf-0ac66c537f26",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "595799b6-3e3a-4e52-bdc1-952a8c44a017",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5c8fd187-9710-47ad-b43f-ef1b5d2441bd",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60daabf4-696e-4d96-be41-95bea37ba774",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a66d828-84e4-4528-ad78-a9da1ce67bfe",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "023ec0fb-891a-4496-a1cb-eb365f4f73a1",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80a3429e-1979-4a4d-a7e3-0f9ba5d8f7d2",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "31f000b1-3f2b-43a8-905a-8ff46adbc3bf",
      "parentUUID": "56499a30-2725-4661-840e-c19abb69884d",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c016212-8ad5-4ee2-a898-3479ea2bf041",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e243aaaa-5db1-4108-9af5-c6e0a8046679",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a932c9fb-a8fa-4163-b14e-7da445adbc99",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d5ae398a-95bc-4b63-9040-11f6f0b7db43",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73c14b0-c2a6-4a33-a39c-de1292270744",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a1a3253-d7d4-4e5d-ae76-c2dc0f2a744a",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b4105fb-722c-43d3-a942-f7d91a2c742f",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d077f60-8881-449e-a29c-e08feb8c0747",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15101407-cbcc-471e-b3d8-aaaf8bfde0b1",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1154d6a5-931a-43d4-bd2d-c1df4f2c53cb",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 58,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c1c7e122-446a-4851-8770-3bd70224c457",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce90ea00-c545-4be3-90da-5e6f67e7100d",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "37a99761-f0b9-4ab6-ab85-612c8dbb3e98",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "453a1462-073b-40a3-8d20-100fe50b1fb3",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 60,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1451b589-4ab6-41ab-999e-c2bb0d7a96f8",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d69a072-bcd0-463c-a356-9c32437ba9df",
      "parentUUID": "0b543f71-0481-4364-ab1a-8c564d988b84",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42a8bae8-a580-4825-a2c1-7027b93adacd",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "45d8c875-ddfb-4b85-86d1-b13428d4c901",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e1c4ad5-fa4e-4951-875a-1dc1089350eb",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fc7a8c5f-0adf-4d6a-8b1e-68a75c436073",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2f30f08-f163-42cf-b1e9-f4b48d34dce6",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "732336f4-6f81-411f-a376-de81d07fc22d",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "730a7995-fb29-4d29-b94f-d8a0426fd95e",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 180,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77bc6aaf-c8d2-44e5-a6f2-b75c89d3613c",
      "parentUUID": "952210bf-0429-4f78-8fb3-848f0ef75964",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "61648ddf-8186-4392-b0f3-20c0a08ee62c",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "187c77ad-7c96-4966-ae3d-551c43e09454",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e373ced-870d-4fcc-88a5-b50b4dac91db",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86233cc9-888a-410e-916a-861e51f1fdb8",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fde081df-ddc7-4036-91d9-91feed65cad0",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25e13e9a-2f6a-440a-ba69-59adc1dcc346",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7fa4458-91e2-4a6a-a543-cd31f35af4b1",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3081d66-b3fa-44fb-8e06-7fb10d9c516f",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "779b8414-b86e-42c9-aee1-0bc6e25227b7",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53c9e497-3279-4130-b2e4-58e57eb6abaa",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eb826b9e-ffbb-4ddb-bcc9-1401ed49625f",
      "parentUUID": "5c50513f-e3dd-48e5-b44c-da62fe7abae7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0195963f-d912-45cb-9242-df0a0518a575",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c23e11c0-7d0d-4a83-97c2-7f804bc22cde",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a977edb-c18e-4e8a-b2a9-7c2a8e938715",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 373,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1f120325-607d-4a7d-99d7-b8bffeba9e9e",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15f5aca7-a90a-4877-991a-953a41531eb0",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d676ea3c-48c3-40a5-be12-3fd1b7ff17fd",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a1acd8c-2864-4ec4-a706-5f04c8bcaeea",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "113350de-cdfe-4de9-a3f2-b471a2029220",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a5e95ff-49de-4cf7-92b6-aab347f66503",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d754e84f-ea7b-4b31-a352-6590ade4c461",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ceb9004-9c4e-4f20-bb5e-b9189169218d",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4f14217e-c38c-459e-9645-cc0a6096b9f7",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 208,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b40e260-0a7c-425a-aaad-ba49b0f1cbe3",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d436238-a100-4a85-8502-41d403f343da",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e79307b-6418-4896-b4f8-8822049e3a3a",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "73e04ba6-912e-40aa-b805-830f10ad0894",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a0a7bb2-5db3-4d5f-831a-89c05a576d52",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f38a238-d763-4bd6-83ee-5cefa29557fa",
      "parentUUID": "d2471a5e-5076-4699-b12d-c51bbc159649",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c3b2450-932d-44c5-b9ea-bc608a16e0b9",
      "parentUUID": "9de56423-5087-4b5a-91b4-156b2f664830",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07ee61e7-8181-43bd-8c4c-b6c5de9c3d46",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "701ee7a8-b76d-4cac-9eb6-f865b35094a2",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d843f4d-4b1a-497a-889c-dd388f47cb8f",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa0747fb-bb1e-461f-9467-f8b1995b6e82",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f408219-8459-4281-aeaf-1e7bb17656e1",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4d0fa38-5396-4b7a-9b0d-42b45a44b0d2",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "459105e2-b310-4f05-8e3c-e55d39b4dd74",
      "parentUUID": "ca2cb9a8-0b99-4c7b-9c89-6287963fae55",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a19e58c9-7717-4611-9ff4-d855a577ce82",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99ee67ae-183d-42dc-bb58-44c3c465db34",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd1d4210-0de4-4244-8610-a81bce7a5c6e",
      "parentUUID": "21c76e1b-eb29-4b36-8def-98ff46c6f55d",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9cbae1d-0da6-42a3-ac69-8ab4128ad697",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "301d7821-fbcc-46b8-9d77-6d3c06fffa3f",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aeff3e6b-d37b-46c8-ad59-e4e19ef1eefb",
      "parentUUID": "0650e3ba-5bfb-4163-8cec-4457770fb574",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ef359cee-9509-4882-9a3c-09521be23bbd",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd20fbf4-222f-45cf-82cd-7eaee49ab815",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1be55b8a-e670-489a-b1f5-ddfabd091497",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d83963e-8102-4704-a463-4f641ec196a6",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc0aabe3-0353-4fc5-8b77-d44e46758f72",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe99a67f-3c60-4878-ba32-5b3bc14257b2",
      "parentUUID": "857ce2f5-0511-4418-b338-8917303947f6",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6ee5a80-d09c-417a-9cbe-1c07cb7f79d1",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a92c86c0-981a-4024-a75f-dbbd1c67bc57",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77ac4d85-c9b9-421c-b9dc-122b5f9e4f4c",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fc5162b-5f0d-41f0-a3bf-c6041c2832db",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "abd370a4-a261-4208-83f8-165b4bf6565d",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "54cf3611-57f5-40fb-be08-0073eefbb58d",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2c2b861-9826-4dc7-bc8b-10d57a5aa5dc",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f95b654-41ad-4324-aa36-48309c50481e",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e73d4e88-71e1-4e6b-bcac-7d12d2e30f30",
      "parentUUID": "32c0f490-9ca4-4555-ba8c-8252087bf197",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9103e648-5d1a-4d4e-8801-a3a520b27390",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dd8a5e6-1024-49d2-b9ad-a21bc7687138",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47413df9-039e-432f-a04a-b33f5c0625f0",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fed0df5-6081-46d5-9505-c5a451751935",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "38fe0e2b-f31d-4e6b-b0b3-ee07e27cd13f",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "340b6d6d-72ba-4d66-99a8-2e2f726110ea",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0aa11177-4d50-4080-ab65-1e88b5bfa3a6",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5733261a-6973-45a2-a3f2-38a59bad79d2",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fb2beb5-1beb-4f78-9f7e-5f1756bb04a4",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2debc1a-cc26-46c3-ac9d-1e653c159aec",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69499a32-481d-4f81-8208-71133dc9d319",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fce4e8c2-b3a9-449c-a75b-76b406824b6d",
      "parentUUID": "106c68f5-9247-467a-bc36-41f7b616854e",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eda04a27-af3d-40f7-a66b-ba11921a372c",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84131587-4422-461a-8179-0416682a4c2c",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07dff3c7-e645-4f29-91da-6df2f0790af2",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40550117-fa11-474b-96e5-9f73d92c9f94",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7227124f-6571-4600-b063-7296b1332dbe",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "71e29160-ae94-46b2-af78-7d46c845207a",
      "parentUUID": "830bfa62-c0ba-4f1e-882e-c1e3e93b72f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c1e841b-2761-4320-b1ae-7ac54fd6d7b0",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb92e486-8ecf-45c8-8d92-461d12ebfe12",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9418ae78-7e64-4fda-8667-d5fdc1df7293",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f40a7ec1-d034-4fd2-a3af-2f3534e9577a",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77384cc6-0323-4928-be18-34745af66ea8",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "626025cf-6516-4e46-b27b-4d3a036a6841",
      "parentUUID": "426e935b-b9f4-4d21-a0ab-21861ba1d1d9",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "46ddeec6-0bb7-4213-88b7-0c50b57fb181",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77962c89-767b-46aa-886a-502f73cd73e1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23528684-b42b-448d-a8d3-07d1462916e5",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fc7b2d42-938a-46c1-b5c4-ec69b1cc53d4",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4941d5fd-5cb0-461e-8ee3-ba13aefe86a1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c572c858-6187-4c22-ab43-443bde199833",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1bf7eac-f271-4ed8-9be0-5de68577f2e1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b8f878a-63d6-4713-a628-adede310f177",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca58036c-b4f7-43f9-9f20-ca704117c3c1",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "134eabf5-9b25-4be0-9eea-7234f75a2797",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "26ff7cf2-656f-43bc-b947-f2b2b82ff490",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2f0c7d0-4682-43d1-8277-7faaa3d6b548",
      "parentUUID": "ed123687-b8ae-4c04-95f7-a22dc113aeb4",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15c9962d-a233-4dc4-b0bd-3fe92f37d7d6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97a07fbc-9c5f-41d1-b9bc-af28255620f8",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9566241f-dba1-405b-9e43-a5a04d1484e1",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c31e8766-e3e1-4e12-987f-4e191598cb40",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68397d78-49f6-4f89-94db-b345b70b82a0",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57f641cb-07cb-4361-ad9b-a6983f7d5bf1",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e5d72ba4-0585-45f4-8f36-b956d532cb10",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7c97cee-7efb-4852-8fb5-5dae894a1ad6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64d21ed5-0c95-4f31-89f3-ba7d463cdeba",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5917db0-9c5f-4dde-bd46-6049f0a18680",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "90d4021e-01e0-4114-ad0a-cc60b50ccd2d",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c95c10a-ef87-4be9-916f-b0ba099c1cf6",
      "parentUUID": "1ba47e7b-b7db-4931-8f74-ecafe5298b37",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff07af6e-c21f-4344-aff5-bf81c77f37ca",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "022c7aa8-c1e9-4573-bba2-7fd3dc4e2854",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d404e365-1efa-42e8-ba12-91538757a4e3",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13001f2f-c705-41ef-b236-6c16dce78e82",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4f33937-b102-42f6-9d6a-e1ca22cbb9d9",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b5016221-2d66-4e67-8f22-dbf88c7ce0f4",
      "parentUUID": "0666cf33-07f1-4379-9399-7406d3da30af",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d8c10c7-4b0f-4beb-b885-693b5679203d",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aae3f0b6-fda9-4591-b8ed-60472f4c9e64",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 212,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cfb59329-af15-4260-bc5c-4b1e13694490",
      "parentUUID": "67fdca58-5113-4aa8-8713-e42876d3a1bd",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a25d9df-5a2b-4d5d-beba-371e0a48f4b4",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b2f5c3f-f2a0-4236-ad7b-63f9d3294970",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c615859d-8f84-4442-806e-e8c42989c515",
      "parentUUID": "50bab37a-2767-4cf5-8591-0e7777e66c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03269c73-d08a-43a4-9d46-7119bd75ba70",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "183f49e2-b26e-466a-b438-e8991664caba",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b75ac0a-2d0d-4d0a-829b-40271418244f",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "49ebd68d-b41f-4b21-aefa-676c05863fc9",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aad1ad48-f050-4121-9fa0-c535b35a8e08",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a454c77-f1fa-4792-a628-ddb76ec6b1d5",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ce230b9-0b70-4d7b-ae10-258ae556a664",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9714d6a6-057d-417e-becb-0f7594a0cde0",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c7825cd-c5bf-45f9-bc17-3859f523be45",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a05c37f-5289-43a1-b38a-3f5e7b42e4f7",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f50fdca-1f1b-4ea4-a46c-deaea01f6e8c",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23316d6d-3512-4ebd-b9ed-0ec6c2f0475e",
      "parentUUID": "956d6fbd-54be-480a-8cb5-e0edb169922f",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4cbbe7c2-45c6-42bd-9c98-d6f1fb2dbe5e",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d360b258-afd2-481b-afb0-ce53381ed849",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75103ae2-0553-47b4-8f1a-ae39c6b198e8",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4fde4768-478a-4501-a2d7-32504ff38233",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be21f555-9014-495f-b0b8-6901d1400280",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "01e6a7ad-b13f-418f-a3ab-f971d547eba3",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b31e8cd-e205-40ea-bb21-e20d980f431f",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "29dbb670-1696-417f-9e42-66ce875681f9",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e7c23b55-0c4c-44c4-9b5d-53b9aa52a127",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3caec86c-a530-4a7a-882f-fc2862cfabd6",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "704a397c-d692-4686-b5b5-a4cfb7ea3a8c",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba52b0ac-af48-47a4-bd8f-391de858aa83",
      "parentUUID": "239f5877-d503-44c0-b1fa-d50931a0f983",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19717450-ca58-47e5-abfa-85f843029920",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f462faaa-07e6-4f8f-addd-0c7e0f17fb6e",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c6245cd-8928-49f0-af23-d8e75e715056",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a7c99e1-9c3f-4762-a09c-9b0619dece78",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cffd477b-2f24-4709-8574-5036dcdf1d30",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d147642c-dd79-41d0-b045-cd1bea535ab7",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "39e63738-96fd-4bd1-ae05-0d48a06fe8eb",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd3db62d-0dc0-402c-bca0-eb7e4cc387b7",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a952a8bb-41c1-4efa-a221-0285ee411294",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf9652c3-feb0-4d30-8a39-9e6dcc5f1008",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7557e0b8-76a8-4996-b5d0-88782fda9d34",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba8ceff2-a560-49e6-a68b-beaac26c3d9d",
      "parentUUID": "f4fedd61-4706-4f7a-8c32-63399048d491",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6d874795-0596-4a6d-9fed-1c0e5606b163",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6266115b-2e16-4c4f-bdb3-a6745f807210",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ed68e3e-67cc-4d64-b77e-461d68f4fdc2",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67f883a1-8f7d-42aa-b933-dd6cc4014fa5",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "843b530c-ce8b-4126-90f7-a3cdbd1cdae4",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23c0b4c4-0c62-4d77-b3a2-9f09409b1b8a",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f565edd-e5dc-4524-8fec-18cd7a5b938c",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18eb658a-3ccd-4111-aed0-22404d9c3e89",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cf31ab6a-d94e-4a90-b3d2-7cd03dc5e7c4",
      "parentUUID": "91fbb5af-bb3c-4814-893b-4e041bad224b",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b7ad1a4-7d15-49ea-b427-82c43a95df9d",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3d17681-e65d-4794-9157-499e757562c6",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb2349ba-ef21-4af8-80a8-403d67944696",
      "parentUUID": "eb2ae66f-29eb-42e8-89f7-01d9f09f7808",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "840399eb-36a7-48eb-9046-4977e81fd283",
      "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23e71f26-5f4a-4238-9e24-301f674bf739",
      "parentUUID": "54a9fee0-9df6-441f-9f5d-e58b8a827ee0",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e2fc0d0-a30e-4852-aec9-749b22afa709",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb6cf3b5-1b6a-474b-b66e-482a5a776826",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9a8d3ad-4c63-435b-ac4d-9901c3ec5245",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c7a1ff6b-4ebc-4308-abbb-1d8b4015e076",
      "parentUUID": "4162d447-e630-4888-b46e-2dc948f51040",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f848dc64-fc30-466c-af2e-4c40f12eda81",
      "parentUUID": "fc691432-4ad5-4451-b77a-55a873381c59",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b42614d-a334-40f9-80c7-99f7f8311f0f",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e72fe74-ffdb-46a3-8ea7-a51490823f83",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47dc5241-b09d-491c-80d5-35ed67b4ae72",
      "parentUUID": "33deea87-9c27-417a-987a-0184196d4485",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f437765-97c7-45ca-8db4-d20562236306",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7882f724-a67d-4d46-8993-6da90f51597a",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e32aae7-4cfc-4897-92bb-530127c7958d",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "302b746a-cf4f-4c96-be30-900893a2686e",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd0caf9f-afdd-4c8c-90a6-d4a2392da4fc",
      "parentUUID": "73ded8b4-548b-4b33-95be-b9dd434a7717",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3f46c2c-5df8-4369-b4ea-cd932bd36a41",
      "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d8570fc-7894-453e-850e-cfb052856a15",
      "parentUUID": "f1e8b28b-e698-4588-b44e-74f193dc95fb",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "71309367-718e-400e-8c6d-490b9269fb5a",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ec0d013-878c-464e-ae85-e9ea6fe1ed94",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9745e8d-04ed-458c-8aaa-dcb840eb5271",
      "parentUUID": "cc799a4a-4065-42a9-ba67-1051f7ddac01",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c3a1e2e7-3295-47b4-a77b-f21dd556c3c3",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca0096c3-dd23-4d62-a646-5725d38ffbf8",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df227cd2-235e-4ebd-b9e7-afd34e9ecf73",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "595d37c7-a7de-4d7a-9601-f0bef0fb9a8a",
      "parentUUID": "72f9e99f-e933-400d-a669-d5858ccd2387",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91fd76de-5409-4b11-a9db-b2776afaf551",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b6ee33f-ed7e-41fd-8f61-e738a5cd73c4",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "17231a23-f845-4a8f-903c-604817a8868b",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8ad226a-89cc-4a00-adf7-b0ea72ec7c4a",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c088197-e62b-4a41-9bac-ffd91ff05090",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fd1f2b5-6477-44f3-ad9c-a0fca930088d",
      "parentUUID": "7e84209b-461f-42b0-b215-f1e1d9ebf3a6",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "567e168e-9d3b-4235-800d-5d8c1e0cc76f",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0aa2d25a-7ec4-4c5d-a1d1-669e6338e633",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b605f9b-4fc7-404f-8bb2-ed94ecfa6b34",
      "parentUUID": "181573f5-1bc7-4cf9-b819-70cf06e4f00a",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b123cb4-87fb-475b-9efa-6df0509c6c28",
      "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc92f2c8-230c-488a-b25f-d8d29e116385",
      "parentUUID": "b2c6a353-dd6b-4795-9265-fcef7fcb8b8f",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "82f41fa3-4639-45ae-b831-578c58b61260",
      "parentUUID": "681a8639-9442-47ab-a6a2-b161d8f0365a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b96c501-dde0-4c3f-9d1e-9c0f7e13dbfe",
      "parentUUID": "05ff19f0-38af-4bc0-aef2-757972f16a43",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bec97d06-8438-4e6a-a02b-1cfef5df0b8f",
      "parentUUID": "2f0b64ea-4e1d-40fd-88d7-e3c36c1c3b3b",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "735caa13-67a8-46cf-b889-907abd4dd21a",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "945d245c-e0e5-40f4-87da-8a179b294e86",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "09ae9366-e29e-4553-81dc-ea42a5b6085a",
      "parentUUID": "fcc056f1-38aa-45ca-a1ee-5ea957095ac6",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dbb3be7-daa8-400f-8020-73cb33e8d666",
      "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c695aba4-a6e3-4fa7-80e9-dbfd638e189f",
      "parentUUID": "e195b119-4e37-45b2-a3e6-d780a5ae4979",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91a737d0-492d-4d96-b91c-14a57471cd77",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9522d167-5d7b-4579-a082-af445c11f03a",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7f6e17a-13be-4cf1-9350-1584c2e0de12",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc833a9d-f1b4-4e76-b45a-af9b2815e36a",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28b2541c-8e96-4c03-a35d-be947a21ffdf",
      "parentUUID": "84696e72-8a3a-45a0-963d-100e23bfed2c",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}