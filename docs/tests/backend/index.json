{
  "stats": {
    "suites": 59,
    "tests": 334,
    "passes": 334,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-01T15:28:47.775Z",
    "end": "2017-05-01T15:28:52.305Z",
    "duration": 4530,
    "testsRegistered": 334,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Ansprechpartner",
        "suites": [
          {
            "title": "soll einen Ansprechpartner ändern können",
            "suites": [],
            "tests": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df5dcc6a-73b3-4332-ab6b-2b41c9afd1d7",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "072a93a6-8037-43ba-b51c-3d38aa5aa6d6",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a5bb2729-a231-4ef1-8014-8a7208bec7ac",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a22d7835-301c-4389-83a6-9207fe9d14ac",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc638241-ab33-4a79-a34f-b9b2992b739d",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/ansprechpartner.spec.js",
            "uuid": "1f650e08-f51e-49e1-9c41-856346da5638",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
            "passes": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df5dcc6a-73b3-4332-ab6b-2b41c9afd1d7",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "072a93a6-8037-43ba-b51c-3d38aa5aa6d6",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a5bb2729-a231-4ef1-8014-8a7208bec7ac",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a22d7835-301c-4389-83a6-9207fe9d14ac",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc638241-ab33-4a79-a34f-b9b2992b739d",
                "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 162,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 157,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ec341e85-fb67-41b0-a088-257b9da7be72",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8dd0d7c4-03af-41df-8eae-614950691a14",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ac7ee43-a8a4-4eca-ad3a-6759fa53addf",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ec4a9ee-053b-49ec-9fed-c7d3d7a561f9",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/ansprechpartner.spec.js",
        "uuid": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
        "passes": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 157,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ec341e85-fb67-41b0-a088-257b9da7be72",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8dd0d7c4-03af-41df-8eae-614950691a14",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ac7ee43-a8a4-4eca-ad3a-6759fa53addf",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ec4a9ee-053b-49ec-9fed-c7d3d7a561f9",
            "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 253,
        "rootEmpty": false
      },
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze', 'spielmodus', 'mannschaftslisten']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3',\n        spielmodus: 'normal',\n        mannschaftslisten: 'false'\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f724e9bb-6e48-4454-a6a6-87548fe8be0a",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a7ebf10-74c3-442f-b62d-1e8c1d86c182",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "369c6718-ce74-431b-9792-73c98b4d123f",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ccc655f4-7196-42d1-b5ad-bafaac0b9b93",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die Anzahl PLätze zurück",
            "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a91a6322-43b9-482e-ad02-7f65bb5bcff9",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze', 'spielmodus', 'mannschaftslisten']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3',\n        spielmodus: 'normal',\n        mannschaftslisten: 'false'\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f724e9bb-6e48-4454-a6a6-87548fe8be0a",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a7ebf10-74c3-442f-b62d-1e8c1d86c182",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "369c6718-ce74-431b-9792-73c98b4d123f",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ccc655f4-7196-42d1-b5ad-bafaac0b9b93",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          },
          {
            "title": "gibt die Anzahl PLätze zurück",
            "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a91a6322-43b9-482e-ad02-7f65bb5bcff9",
            "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 28,
        "rootEmpty": false
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2947424c-7b5c-4988-8cb6-c8de95853b56",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b4c572dc-4c7d-4e37-b46d-baf8dd4b594f",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "271e99f1-d466-46ec-be0f-cb0febb79695",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "22c009fd-6a1e-4026-ae73-c3d018276d5b",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7db91dbc-20c0-4cff-9bb4-0de5a868c512",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8b80366c-6d4b-4ec5-9826-ca0624d409e6",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "936fb5da-a5ee-4143-9253-363056252935",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2947424c-7b5c-4988-8cb6-c8de95853b56",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b4c572dc-4c7d-4e37-b46d-baf8dd4b594f",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "271e99f1-d466-46ec-be0f-cb0febb79695",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "22c009fd-6a1e-4026-ae73-c3d018276d5b",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7db91dbc-20c0-4cff-9bb4-0de5a868c512",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8b80366c-6d4b-4ec5-9826-ca0624d409e6",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "936fb5da-a5ee-4143-9253-363056252935",
            "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 157,
        "rootEmpty": false
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bf9b99e9-a0d4-42e0-91ca-e9d61dc0032a",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f5393296-db5f-4663-9edd-b9ae86826399",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e6e38fb1-6e62-49f5-a8f6-a95b56311e02",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5824e994-050e-4565-a345-2450eb137a26",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8eea856f-66a8-4c01-bf5b-caacd5e38f53",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "58a2cc30-400f-42f5-a274-2a74d8f49093",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bcad2315-c4f4-437a-ae20-d1c91b6d00e5",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cf584ea8-cc1f-433e-b0de-9b65747f8b75",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 78,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d22d061d-eea8-4123-ad89-d109d85bac26",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bf9b99e9-a0d4-42e0-91ca-e9d61dc0032a",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f5393296-db5f-4663-9edd-b9ae86826399",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e6e38fb1-6e62-49f5-a8f6-a95b56311e02",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5824e994-050e-4565-a345-2450eb137a26",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8eea856f-66a8-4c01-bf5b-caacd5e38f53",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "58a2cc30-400f-42f5-a274-2a74d8f49093",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bcad2315-c4f4-437a-ae20-d1c91b6d00e5",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cf584ea8-cc1f-433e-b0de-9b65747f8b75",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 78,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d22d061d-eea8-4123-ad89-d109d85bac26",
            "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 310,
        "rootEmpty": false
      },
      {
        "title": "Handlers",
        "suites": [
          {
            "title": "handle Error and send Response",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "d640fd2a-5a5c-4414-b808-354abbcffb00",
                "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "a2e492d0-176f-421b-8a61-0a0709c9bdaa",
                "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "d640fd2a-5a5c-4414-b808-354abbcffb00",
                "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "a2e492d0-176f-421b-8a61-0a0709c9bdaa",
                "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "c0461039-b960-41cf-afdc-76231327bf1f",
                "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "1dbe3884-75ba-46c8-9dbd-b3ca7c3bcb52",
                "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "c0461039-b960-41cf-afdc-76231327bf1f",
                "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "1dbe3884-75ba-46c8-9dbd-b3ca7c3bcb52",
                "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Success-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "a932f7d0-a62e-4edf-b25c-9306bd819d16",
                "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "1e093379-e1c0-4ab0-9a81-4491be407c58",
                "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "a932f7d0-a62e-4edf-b25c-9306bd819d16",
                "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "1e093379-e1c0-4ab0-9a81-4491be407c58",
                "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Deleted-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "8e123217-d988-48fe-9f45-e1b955ff417c",
                "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "5e8c019d-6dad-4fe3-b935-2c0012e8a3db",
                "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "8e123217-d988-48fe-9f45-e1b955ff417c",
                "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "5e8c019d-6dad-4fe3-b935-2c0012e8a3db",
                "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "handle Query Response",
            "suites": [],
            "tests": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "056adfc7-3b4f-4a98-92f8-ba45addcfa42",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "2cc5a2e7-731b-4b5e-8af6-d55d62b3450e",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "b4e95474-184c-425e-9314-33d458e94946",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "056adfc7-3b4f-4a98-92f8-ba45addcfa42",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "2cc5a2e7-731b-4b5e-8af6-d55d62b3450e",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "b4e95474-184c-425e-9314-33d458e94946",
                "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/handler.spec.js",
        "uuid": "8d1d531d-1054-455b-a620-a383513d1b04",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Helpers",
        "suites": [
          {
            "title": "soll die Datenbank query basierend auf Parametern laden",
            "suites": [],
            "tests": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "204eb310-bf8d-4892-b1b2-441c5b7baafd",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "ecc909c1-fe3e-4f69-852b-278e0543d7f1",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "22a15f31-908d-4fb3-b4e3-3754e33d1219",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "6e83670b-8bfe-4172-a825-1ae0257fc93f",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "339807c5-73cc-41a2-b05c-6df755ecd22c",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "204eb310-bf8d-4892-b1b2-441c5b7baafd",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "ecc909c1-fe3e-4f69-852b-278e0543d7f1",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "22a15f31-908d-4fb3-b4e3-3754e33d1219",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "6e83670b-8bfe-4172-a825-1ae0257fc93f",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "339807c5-73cc-41a2-b05c-6df755ecd22c",
                "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "soll den letzten Slash bei einem Pfad entfernen können",
            "suites": [],
            "tests": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "6b6b8941-a525-46b0-ba93-dccee07ac427",
                "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "008a79b9-a6af-4754-82af-afa73ed82d8e",
                "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "af9c48d8-df68-454d-a430-0aaf035486ab",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "6b6b8941-a525-46b0-ba93-dccee07ac427",
                "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "008a79b9-a6af-4754-82af-afa73ed82d8e",
                "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "soll die Route-Konfiguration laden",
            "suites": [],
            "tests": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "b7d8e0f9-c7a2-45d1-8053-408c8ec4b1a9",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "702c217c-f6d4-4ace-a163-3d580fbdaec1",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6e2f31c3-8b7f-49e9-92cf-fe630436b01d",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6544b686-6f14-42bb-b165-72049043d59e",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data.join(' '));",
                "err": {},
                "isRoot": false,
                "uuid": "d993c21c-659a-40eb-a416-1eb073917a18",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "a4308468-4b63-409a-92b2-ada1f931414b",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "a22a9700-c457-4b1d-8ed2-5551d001b44d",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "b0ed504a-fee8-4bbd-b4d5-d5389bdbba9b",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ed79936b-d8e0-4b79-9c5e-649751c0fd87",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "733cc37b-413c-4d2d-af96-7be3a2218738",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "b7d8e0f9-c7a2-45d1-8053-408c8ec4b1a9",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "702c217c-f6d4-4ace-a163-3d580fbdaec1",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6e2f31c3-8b7f-49e9-92cf-fe630436b01d",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6544b686-6f14-42bb-b165-72049043d59e",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data.join(' '));",
                "err": {},
                "isRoot": false,
                "uuid": "d993c21c-659a-40eb-a416-1eb073917a18",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "a4308468-4b63-409a-92b2-ada1f931414b",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "a22a9700-c457-4b1d-8ed2-5551d001b44d",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.be.undefined;",
                "err": {},
                "isRoot": false,
                "uuid": "b0ed504a-fee8-4bbd-b4d5-d5389bdbba9b",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ed79936b-d8e0-4b79-9c5e-649751c0fd87",
                "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 9,
            "totalPasses": 9,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6,
            "rootEmpty": false
          },
          {
            "title": "soll den Spielplan auf Korrektheit prüfen",
            "suites": [],
            "tests": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "7c7a8766-1cdd-4327-8b90-68beceb9b44b",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "54bc4c48-1248-4859-bd87-8954ad8e85db",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "55939ed3-7f36-4dbe-a8d0-da925e1491a1",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "c87df2b9-a78a-4532-8772-7e9111114f73",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "3673298e-960b-4fb0-933f-3e7018e90063",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "7c7a8766-1cdd-4327-8b90-68beceb9b44b",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "54bc4c48-1248-4859-bd87-8954ad8e85db",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "55939ed3-7f36-4dbe-a8d0-da925e1491a1",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "c87df2b9-a78a-4532-8772-7e9111114f73",
                "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5,
            "rootEmpty": false
          },
          {
            "title": "soll das richtige Datum und Zeit für ein Spiel berechnen",
            "suites": [
              {
                "title": "Eintägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "883eaeb3-2a1b-4f0d-b36b-794d33c355a0",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bb461c05-db65-4493-912d-173b98fb64fb",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a07be3c2-54d1-4a49-9ebf-b7b74c5a2664",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a21b63fc-8bec-4ef2-9d9a-c8699bb4717b",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b816d7aa-b362-4d74-ba9e-55125163a616",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "883eaeb3-2a1b-4f0d-b36b-794d33c355a0",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bb461c05-db65-4493-912d-173b98fb64fb",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a07be3c2-54d1-4a49-9ebf-b7b74c5a2664",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a21b63fc-8bec-4ef2-9d9a-c8699bb4717b",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b816d7aa-b362-4d74-ba9e-55125163a616",
                        "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 14,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2f6db6bf-4917-4d9b-8942-fb23d35dae1a",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12190194-de78-461e-8d60-16db838491b2",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e17e56d2-fd80-4dbe-b8e2-7ac0f3b8319b",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c548cef2-311d-462a-b1a5-7f407baecf84",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eba9589f-5d77-4c8c-8412-a6c752d82647",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2f6db6bf-4917-4d9b-8942-fb23d35dae1a",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12190194-de78-461e-8d60-16db838491b2",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e17e56d2-fd80-4dbe-b8e2-7ac0f3b8319b",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c548cef2-311d-462a-b1a5-7f407baecf84",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eba9589f-5d77-4c8c-8412-a6c752d82647",
                        "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 7,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "124df44c-9abe-4df4-9686-a2633a7df082",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "Zweitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70e2a1d3-71b9-447e-bbc8-90d026fd57fa",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "05348445-d4b6-46f8-a99a-8498b27d331c",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5cc35cc1-3d42-4d96-8dba-3ee1f9e675ca",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d96428fe-f959-4ba6-99e5-c10b18f8f1a1",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b09a9651-1c37-4a8f-8401-5b5e82636678",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "371005cf-b6b6-478b-921d-93382dcb0353",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8a3e9b54-2c00-47dc-9b6a-b67503dad968",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70e2a1d3-71b9-447e-bbc8-90d026fd57fa",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "05348445-d4b6-46f8-a99a-8498b27d331c",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5cc35cc1-3d42-4d96-8dba-3ee1f9e675ca",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d96428fe-f959-4ba6-99e5-c10b18f8f1a1",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b09a9651-1c37-4a8f-8401-5b5e82636678",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "371005cf-b6b6-478b-921d-93382dcb0353",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8a3e9b54-2c00-47dc-9b6a-b67503dad968",
                        "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 15,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dffe41ba-5f69-4529-b7f0-d7bf1daefbcb",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "18e1974f-9233-48f6-8546-2f5e5692d960",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3c54d6b-7767-4f06-834e-e82d0d076604",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f0d89e9f-1bec-48b5-90bb-0fd2c47193f6",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "53f3d8e4-7502-400d-9d71-230c09449781",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9644238-e24a-4b19-9703-5ba93bff480a",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "537d9cfe-4db3-452d-b132-192c4c57712e",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dffe41ba-5f69-4529-b7f0-d7bf1daefbcb",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "18e1974f-9233-48f6-8546-2f5e5692d960",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3c54d6b-7767-4f06-834e-e82d0d076604",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f0d89e9f-1bec-48b5-90bb-0fd2c47193f6",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "53f3d8e4-7502-400d-9d71-230c09449781",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9644238-e24a-4b19-9703-5ba93bff480a",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "537d9cfe-4db3-452d-b132-192c4c57712e",
                        "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 8,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "4e72b55c-184a-4d6d-b32e-cd698235ae6e",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "Dreitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5119715-5cf1-4468-8518-3e9dce242f00",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0aea0699-b87c-4773-879a-a0dd659aeac3",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b986ecaa-0b00-482e-b87b-d9543f4bfa8f",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "14f9c3d6-6b38-4f13-8256-60665ce820a8",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b5da5ed6-e485-4821-94b7-c5b9dbd45a7c",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d587e526-a223-4f6c-b623-e7439d4337bf",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c2c11e67-9b33-48cd-98e0-519346024f6e",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c1d0d66e-5835-4913-8630-ab6393958361",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cc752ecf-0ff9-4009-b6aa-b4b531b134ae",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5119715-5cf1-4468-8518-3e9dce242f00",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0aea0699-b87c-4773-879a-a0dd659aeac3",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b986ecaa-0b00-482e-b87b-d9543f4bfa8f",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "14f9c3d6-6b38-4f13-8256-60665ce820a8",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b5da5ed6-e485-4821-94b7-c5b9dbd45a7c",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d587e526-a223-4f6c-b623-e7439d4337bf",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c2c11e67-9b33-48cd-98e0-519346024f6e",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c1d0d66e-5835-4913-8630-ab6393958361",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cc752ecf-0ff9-4009-b6aa-b4b531b134ae",
                        "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 12,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c7fe5f6-728b-47fc-9a73-3c6cb9cc6df9",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dba7e0cc-1b2c-41f8-bee6-059932edd9d7",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1792ac93-2e36-4453-82a4-34a6df4d5fb7",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2d30574b-066f-46ff-93bf-d367da9af598",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b340ba83-2fc4-4a9d-8e5d-d417957ec2ca",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8b412b36-a514-483d-abe1-653c3a4cf119",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ffb3d45-05ec-4e76-82e7-111cde38b3f3",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c5245751-2a7f-4d79-9689-0314bfe81739",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "65012c3d-f002-4cc2-8dc2-b85efaa5689e",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c7fe5f6-728b-47fc-9a73-3c6cb9cc6df9",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dba7e0cc-1b2c-41f8-bee6-059932edd9d7",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1792ac93-2e36-4453-82a4-34a6df4d5fb7",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2d30574b-066f-46ff-93bf-d367da9af598",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b340ba83-2fc4-4a9d-8e5d-d417957ec2ca",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8b412b36-a514-483d-abe1-653c3a4cf119",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ffb3d45-05ec-4e76-82e7-111cde38b3f3",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c5245751-2a7f-4d79-9689-0314bfe81739",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "65012c3d-f002-4cc2-8dc2-b85efaa5689e",
                        "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 13,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "144d1fb3-f91b-49bb-a569-6aa20aee9257",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "34337ace-f227-473e-bdb9-8b058ab1adfe",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "Platz Tabelle Kalkulation",
            "suites": [
              {
                "title": "Es sind bereits alle Spiele gespielt",
                "suites": [],
                "tests": [
                  {
                    "title": "Es soll Platz 1 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 1 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bce787bc-e174-4e5a-b9c4-48677b4940ab",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 2 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 2 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "424989e9-1b19-4e63-b4d8-1e3cd166a925",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 3 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 3 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "235ec763-150c-423a-827d-c8ed44770e56",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 4 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 4 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3816bfdd-f765-42c3-b91b-57165408cd1f",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [
                  {
                    "title": "Es soll Platz 1 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 1 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bce787bc-e174-4e5a-b9c4-48677b4940ab",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 2 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 2 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "424989e9-1b19-4e63-b4d8-1e3cd166a925",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 3 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 3 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "235ec763-150c-423a-827d-c8ed44770e56",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 4 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind bereits alle Spiele gespielt Es soll Platz 4 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3816bfdd-f765-42c3-b91b-57165408cd1f",
                    "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              },
              {
                "title": "Es sind noch nicht alle Spiel gespielt",
                "suites": [],
                "tests": [
                  {
                    "title": "Es soll Platz 1 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 1 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1739bd05-8157-4ee4-9802-cc56617573df",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 2 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 2 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51c08897-a2c7-4bdb-aa11-b07779e29287",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 3 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 3 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bc75885-71c7-4974-8ea4-13d2f4712401",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 4 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 4 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da540c46-455c-4a07-bf42-cb5671374563",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [
                  {
                    "title": "Es soll Platz 1 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 1 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1739bd05-8157-4ee4-9802-cc56617573df",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 2 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 2 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51c08897-a2c7-4bdb-aa11-b07779e29287",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 3 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 3 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bc75885-71c7-4974-8ea4-13d2f4712401",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  },
                  {
                    "title": "Es soll Platz 4 korrekt geladen werden",
                    "fullTitle": "Platz Tabelle Kalkulation Es sind noch nicht alle Spiel gespielt Es soll Platz 4 korrekt geladen werden",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da540c46-455c-4a07-bf42-cb5671374563",
                    "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "5275afff-208d-44f4-8cd7-16720f01616a",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "dc2d6df6-04a8-47b9-b75a-29bea173352f",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "301c5019-99be-4e07-acc6-4b71984153ec",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "54559d97-f020-41c9-98d3-e4181934cd18",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "a56322af-05e2-4ee5-85c7-c4ef151739e2",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "bb28ee9a-17ac-4a03-8798-e0ab2af09043",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/helpers.spec.js",
        "uuid": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
        "passes": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "dc2d6df6-04a8-47b9-b75a-29bea173352f",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "301c5019-99be-4e07-acc6-4b71984153ec",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "54559d97-f020-41c9-98d3-e4181934cd18",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "a56322af-05e2-4ee5-85c7-c4ef151739e2",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "bb28ee9a-17ac-4a03-8798-e0ab2af09043",
            "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2,
        "rootEmpty": false
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "853ef91b-f0a4-46de-8e5d-309a5d97d290",
            "parentUUID": "b3f33957-9448-4ce9-94cc-ed7f325f05c1",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "b3f33957-9448-4ce9-94cc-ed7f325f05c1",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "853ef91b-f0a4-46de-8e5d-309a5d97d290",
            "parentUUID": "b3f33957-9448-4ce9-94cc-ed7f325f05c1",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 21,
        "rootEmpty": false
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 136,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "826738ca-c4ed-4c22-89e7-171ee947ea95",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 55,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c1b1189a-f79f-498b-a551-cfada5d40814",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a3014ea1-31ca-43bb-a92f-02e816f1046b",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f3314be2-05cc-4261-aff2-b3fcbbca9fec",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d2d41b38-9d3f-42d5-9dd6-3125274a5354",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fdb6f11-e362-4990-8cf0-1d7fa4eb7b93",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/turniere?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "04737b42-2593-46cf-bc96-0d6690e4efb2",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/turniere?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a97135f9-18fa-4b7d-b5f3-2427b2fe6c22",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/turniere?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80d8027f-8d75-4b8e-9692-b89a5004b21e",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "e3af5160-6422-4cbc-b567-591844168834",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 136,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "826738ca-c4ed-4c22-89e7-171ee947ea95",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 55,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c1b1189a-f79f-498b-a551-cfada5d40814",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a3014ea1-31ca-43bb-a92f-02e816f1046b",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f3314be2-05cc-4261-aff2-b3fcbbca9fec",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d2d41b38-9d3f-42d5-9dd6-3125274a5354",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/turniere/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fdb6f11-e362-4990-8cf0-1d7fa4eb7b93",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/turniere?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "04737b42-2593-46cf-bc96-0d6690e4efb2",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/turniere?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a97135f9-18fa-4b7d-b5f3-2427b2fe6c22",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/turniere?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80d8027f-8d75-4b8e-9692-b89a5004b21e",
            "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 254,
        "rootEmpty": false
      },
      {
        "title": "Route: notFound",
        "suites": [],
        "tests": [
          {
            "title": "soll für eine ungültige GET Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4afe012e-c030-4ffa-9b18-0024d00cb8a0",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige POST Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b7d33cb0-5902-4a27-83a0-2ed1a5da7b43",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige PUT Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "839ad0b5-3466-43a7-b6a8-e531350121e0",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige DELETE Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ce67b752-07c6-49a0-8f84-5a37d8c2e4fc",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/notfound.spec.js",
        "uuid": "1c0195d1-1412-40de-ad62-1f5ce826162c",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/notfound.spec.js",
        "passes": [
          {
            "title": "soll für eine ungültige GET Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4afe012e-c030-4ffa-9b18-0024d00cb8a0",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige POST Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b7d33cb0-5902-4a27-83a0-2ed1a5da7b43",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige PUT Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "839ad0b5-3466-43a7-b6a8-e531350121e0",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige DELETE Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ce67b752-07c6-49a0-8f84-5a37d8c2e4fc",
            "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 15,
        "rootEmpty": false
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6f5a938f-5ec9-4863-aa5e-bc8c8bbd078a",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7dbcd014-9ca5-4166-88a5-efc6b298e4cf",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "102fc145-3575-459e-a528-57b7ac91dc4f",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2602f5e7-3782-4eab-b72f-3e65f404fe91",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f25811c8-4477-4eb5-830e-093b48774e76",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Platz laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47694e7a-0845-4db3-b6d7-d877b93482fd",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Datum laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4dcc978b-9cfe-4b33-81bb-67ddcd4b86c6",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b3763885-d399-4606-b584-37d6704e53b0",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2bf4c681-a022-45ae-b99d-30131b404c1c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9513dea-5fca-4d7c-9af7-a1370d5404ab",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cb9c4b35-faff-47ce-8dcb-3cf33bb02e96",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9877d34-7866-446d-b0a2-d0bd30fbb682",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6aa6d9a5-2b2a-4a91-9b7a-362ce06bcefb",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "40e19193-7bb4-4b58-9b51-6556048a11d3",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "972c9fb9-1c90-4f0c-bfc1-5c808b813f81",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2f8c43de-ac4c-4a21-82c1-8b1184ee877c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aad43579-136f-4074-be67-ad93ad0e23da",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b5a86f2-7c98-4c9f-8c26-9261ac6a5f2c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "664fd871-77ad-46e9-a740-68483ce73894",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6f5a938f-5ec9-4863-aa5e-bc8c8bbd078a",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7dbcd014-9ca5-4166-88a5-efc6b298e4cf",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "102fc145-3575-459e-a528-57b7ac91dc4f",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2602f5e7-3782-4eab-b72f-3e65f404fe91",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f25811c8-4477-4eb5-830e-093b48774e76",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Platz laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47694e7a-0845-4db3-b6d7-d877b93482fd",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Datum laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4dcc978b-9cfe-4b33-81bb-67ddcd4b86c6",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b3763885-d399-4606-b584-37d6704e53b0",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2bf4c681-a022-45ae-b99d-30131b404c1c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9513dea-5fca-4d7c-9af7-a1370d5404ab",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cb9c4b35-faff-47ce-8dcb-3cf33bb02e96",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9877d34-7866-446d-b0a2-d0bd30fbb682",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6aa6d9a5-2b2a-4a91-9b7a-362ce06bcefb",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "40e19193-7bb4-4b58-9b51-6556048a11d3",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "972c9fb9-1c90-4f0c-bfc1-5c808b813f81",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2f8c43de-ac4c-4a21-82c1-8b1184ee877c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aad43579-136f-4074-be67-ad93ad0e23da",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b5a86f2-7c98-4c9f-8c26-9261ac6a5f2c",
            "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 393,
        "rootEmpty": false
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0ba58145-ab25-490b-8baf-bb66306ea8d8",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d59f4c75-1175-46cb-bdbd-99202c83bc77",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "181c62ab-e68d-494b-b2d7-dbe635055e9c",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "748b56f5-d1e8-4150-82e0-07309e0b0d3b",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7c777a58-549a-45ed-932c-4aa3749fa606",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a715879-15e5-4abe-a5b1-17a22d4fd6bb",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "21c4d292-d94f-4ba8-8838-75acb8848e27",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 147,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "237d10da-e724-4075-94ef-fd2f9b934405",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
            "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "01e2d0a8-82a9-4a59-9f03-826d97a0b438",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0ba58145-ab25-490b-8baf-bb66306ea8d8",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d59f4c75-1175-46cb-bdbd-99202c83bc77",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "181c62ab-e68d-494b-b2d7-dbe635055e9c",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "748b56f5-d1e8-4150-82e0-07309e0b0d3b",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7c777a58-549a-45ed-932c-4aa3749fa606",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a715879-15e5-4abe-a5b1-17a22d4fd6bb",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "21c4d292-d94f-4ba8-8838-75acb8848e27",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 147,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "237d10da-e724-4075-94ef-fd2f9b934405",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          },
          {
            "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
            "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "01e2d0a8-82a9-4a59-9f03-826d97a0b438",
            "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 304,
        "rootEmpty": false
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52e2b9d0-5e44-4d36-8be7-d1a27bf70e72",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "389ab166-2c4c-40d3-b4fe-c2fa1922a2c2",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b690f3fc-87e0-41ba-9271-72d0d127d0a1",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52162cac-d25a-4c2a-a359-1801523eaeaf",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "689c483e-95af-42a0-bb2e-d6dcf6a24ca0",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eae55466-6d6c-43bb-87ac-3b5a2d40aef2",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d0a800b4-11cd-4057-815e-7b40230419f1",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1130592-262d-4659-b5d6-ca3a800fae96",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1c1d482b-98e5-49bd-acf0-1b5b57be9a9e",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ca83dc74-cb56-437d-9484-9bcb5e990f9b",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52e2b9d0-5e44-4d36-8be7-d1a27bf70e72",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "389ab166-2c4c-40d3-b4fe-c2fa1922a2c2",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b690f3fc-87e0-41ba-9271-72d0d127d0a1",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52162cac-d25a-4c2a-a359-1801523eaeaf",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "689c483e-95af-42a0-bb2e-d6dcf6a24ca0",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eae55466-6d6c-43bb-87ac-3b5a2d40aef2",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d0a800b4-11cd-4057-815e-7b40230419f1",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1130592-262d-4659-b5d6-ca3a800fae96",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1c1d482b-98e5-49bd-acf0-1b5b57be9a9e",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ca83dc74-cb56-437d-9484-9bcb5e990f9b",
            "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 121,
        "rootEmpty": false
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 129,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({\n        username: user.username,\n        email: user.email,\n        role: user.role\n    })\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4edce18c-3fb2-44aa-ad8a-18371e37e944",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ea0eb5bd-a5e0-4c9a-a8ad-f79abae0f90b",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 118,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f88cbb09-153a-47e1-a920-b7b63425db3a",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 211,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send({\n                username: user.username,\n                password: user.password\n            })\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "71418164-04a5-443f-81a5-e62334298ad9",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "518921ac-dd6d-4ec8-9518-878a6aafde81",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aecb817a-c71e-47e4-b638-78607534ae08",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f1d11495-68ca-402e-b842-b9ccf6042953",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a1893249-81a0-423e-a450-b51e52766c73",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "57ca4193-8d2b-4c5d-be52-90dc1dc0206b",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0332e29d-f4f1-4f89-97b8-790d220a892e",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d122a5d6-ef34-4450-bbcb-160c0d31bb05",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c587dbdd-3868-4494-9fd0-61d45c34706c",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 113,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "be36b1ae-605e-441b-b683-6efbd508960c",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6395a3c3-2bc1-439e-a832-16bd81cd82b8",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05491f86-063d-479f-8e48-036c1092fc2e",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9dbd7400-b428-4024-a321-beb20bd3f769",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e7161b0c-8394-44d4-b78e-3bda2cff7b50",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8d42514f-40ac-486c-9d59-0e0504659a33",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 129,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({\n        username: user.username,\n        email: user.email,\n        role: user.role\n    })\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4edce18c-3fb2-44aa-ad8a-18371e37e944",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ea0eb5bd-a5e0-4c9a-a8ad-f79abae0f90b",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 118,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f88cbb09-153a-47e1-a920-b7b63425db3a",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 211,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send({\n                username: user.username,\n                password: user.password\n            })\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "71418164-04a5-443f-81a5-e62334298ad9",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "518921ac-dd6d-4ec8-9518-878a6aafde81",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aecb817a-c71e-47e4-b638-78607534ae08",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f1d11495-68ca-402e-b842-b9ccf6042953",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a1893249-81a0-423e-a450-b51e52766c73",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "57ca4193-8d2b-4c5d-be52-90dc1dc0206b",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0332e29d-f4f1-4f89-97b8-790d220a892e",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d122a5d6-ef34-4450-bbcb-160c0d31bb05",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c587dbdd-3868-4494-9fd0-61d45c34706c",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 113,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "be36b1ae-605e-441b-b683-6efbd508960c",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6395a3c3-2bc1-439e-a832-16bd81cd82b8",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05491f86-063d-479f-8e48-036c1092fc2e",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9dbd7400-b428-4024-a321-beb20bd3f769",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e7161b0c-8394-44d4-b78e-3bda2cff7b50",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8d42514f-40ac-486c-9d59-0e0504659a33",
            "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 774,
        "rootEmpty": false
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4ec4b6ad-3de6-475d-a0af-59d0b076d89b",
                "parentUUID": "291ea79e-fe06-4f06-b235-f72fd4e57b6d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "291ea79e-fe06-4f06-b235-f72fd4e57b6d",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4ec4b6ad-3de6-475d-a0af-59d0b076d89b",
                "parentUUID": "291ea79e-fe06-4f06-b235-f72fd4e57b6d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 38,
            "rootEmpty": false
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "efffd634-7280-420e-975e-fd18d272fa94",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7db91e7a-6175-4596-8789-0542ab1220ad",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c5ca4bd3-afb9-4530-aa0d-88ae302f3c0b",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f7cc6d18-f66f-40bb-8613-281b9bf14f03",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a38656ee-b1fc-4329-92f7-9819d11e9136",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5b6e7989-e3d5-4fc9-b018-c2031d0a59ca",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4e29d7f-7347-4837-9865-bc6dc9016083",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "efffd634-7280-420e-975e-fd18d272fa94",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7db91e7a-6175-4596-8789-0542ab1220ad",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c5ca4bd3-afb9-4530-aa0d-88ae302f3c0b",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f7cc6d18-f66f-40bb-8613-281b9bf14f03",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a38656ee-b1fc-4329-92f7-9819d11e9136",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5b6e7989-e3d5-4fc9-b018-c2031d0a59ca",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4e29d7f-7347-4837-9865-bc6dc9016083",
                "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 47,
            "rootEmpty": false
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edce7799-d386-451e-9dcf-251a8daeed73",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f1f1613-d95c-4110-94e7-ac3f1195fd92",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "926096a2-e804-42f4-8b9f-21ba54cc39e4",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edce7799-d386-451e-9dcf-251a8daeed73",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f1f1613-d95c-4110-94e7-ac3f1195fd92",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "926096a2-e804-42f4-8b9f-21ba54cc39e4",
                    "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 12,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bde5e30a-75e1-4cce-a617-af365b2bc140",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34287575-7553-43b8-bfed-bc8f7a6a7718",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479e1d32-60d3-4e3c-8b27-01df921720d5",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bde5e30a-75e1-4cce-a617-af365b2bc140",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34287575-7553-43b8-bfed-bc8f7a6a7718",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479e1d32-60d3-4e3c-8b27-01df921720d5",
                    "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 17,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0bd3b38-cd24-4145-8dc3-33fbdd6e93b9",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bd67d57-c4f9-46cf-8612-4624d6228581",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "345bd846-46b8-4abb-b9ed-be071fac0227",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f585e0f-a630-4e5d-8055-d3af71a586df",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e35161d-a529-4949-bfb1-e12eacef198a",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30c30b79-2b02-4101-bcc7-e83943f69ade",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0bd3b38-cd24-4145-8dc3-33fbdd6e93b9",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bd67d57-c4f9-46cf-8612-4624d6228581",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "345bd846-46b8-4abb-b9ed-be071fac0227",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f585e0f-a630-4e5d-8055-d3af71a586df",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e35161d-a529-4949-bfb1-e12eacef198a",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30c30b79-2b02-4101-bcc7-e83943f69ade",
                    "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 26,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0595b73-b086-40f6-b462-f556334f6d8a",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d0194e1-e399-4168-bd39-55f94ca60d5e",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d27585e-b803-442a-8891-91fa33627faa",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67c63866-609a-4457-8217-22891e70c2d6",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "425141c8-9e47-47b1-83c4-41ab148c6376",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c110a95e-3507-4caf-a947-f0df23eca567",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85aea26b-0af1-4499-9a52-93f300882543",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d78fa988-617f-49ec-9e3c-cc16322cda51",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3631a180-f327-41c8-9e1d-e3d536c53360",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "58455292-b444-4963-949f-7393f5a94661",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0595b73-b086-40f6-b462-f556334f6d8a",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d0194e1-e399-4168-bd39-55f94ca60d5e",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d27585e-b803-442a-8891-91fa33627faa",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67c63866-609a-4457-8217-22891e70c2d6",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "425141c8-9e47-47b1-83c4-41ab148c6376",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c110a95e-3507-4caf-a947-f0df23eca567",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85aea26b-0af1-4499-9a52-93f300882543",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d78fa988-617f-49ec-9e3c-cc16322cda51",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3631a180-f327-41c8-9e1d-e3d536c53360",
                    "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 42,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59337489-bfb4-4ef4-a287-377bd5a29118",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7106e6d4-ed31-4453-b055-2d206738d384",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef0d5028-d697-4c63-bf7a-418ebb8dd737",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "872b03d3-46ee-4b65-a4f0-16da104320ca",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b1336cf-2b1f-4555-92a3-e31ed52763b2",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7ba87ad-e4ab-4997-a520-22a1c33d753b",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddccc707-63c4-48b9-b277-33dead2890fd",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5e44b66-1920-418f-adea-3b019a893b3e",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5365ab21-9381-4461-b572-ff712fda2157",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ce4b557-532b-4e75-b699-b8236c0bb8f3",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8698081-43a2-4c08-8abb-a475cda6ec7c",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce6c3a25-7453-4600-9dcc-a8937f9f5b6f",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59337489-bfb4-4ef4-a287-377bd5a29118",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7106e6d4-ed31-4453-b055-2d206738d384",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef0d5028-d697-4c63-bf7a-418ebb8dd737",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "872b03d3-46ee-4b65-a4f0-16da104320ca",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b1336cf-2b1f-4555-92a3-e31ed52763b2",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7ba87ad-e4ab-4997-a520-22a1c33d753b",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddccc707-63c4-48b9-b277-33dead2890fd",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5e44b66-1920-418f-adea-3b019a893b3e",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5365ab21-9381-4461-b572-ff712fda2157",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ce4b557-532b-4e75-b699-b8236c0bb8f3",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8698081-43a2-4c08-8abb-a475cda6ec7c",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce6c3a25-7453-4600-9dcc-a8937f9f5b6f",
                    "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 61,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8037184-67a8-4690-a69e-7363f44fbe61",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "737c7f82-478d-4b55-a17d-a6073f833ebc",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b77a475e-ad59-49e5-81cf-3fca84e70808",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94af7f9a-2542-4222-ab3c-0f7c416fb2ad",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "085d6ab3-e768-4136-a3d4-8e9e21d96f8e",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea3cb4d9-dd93-41e2-8e87-65003f3e94c3",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e82c00c2-82ef-4f33-9a44-001ee787750e",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fbfc8f1-0431-4f65-9556-8679442047f6",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f424b50-8999-475c-bfa6-b0db0a138007",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9dcaea5-0357-4671-a8f1-b083228d965f",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4095f439-53a1-44f1-9e54-46a2dd2f7cbe",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58843bd8-87cb-43d9-ba42-28961263362f",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8037184-67a8-4690-a69e-7363f44fbe61",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "737c7f82-478d-4b55-a17d-a6073f833ebc",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b77a475e-ad59-49e5-81cf-3fca84e70808",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94af7f9a-2542-4222-ab3c-0f7c416fb2ad",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "085d6ab3-e768-4136-a3d4-8e9e21d96f8e",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea3cb4d9-dd93-41e2-8e87-65003f3e94c3",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e82c00c2-82ef-4f33-9a44-001ee787750e",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fbfc8f1-0431-4f65-9556-8679442047f6",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f424b50-8999-475c-bfa6-b0db0a138007",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9dcaea5-0357-4671-a8f1-b083228d965f",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4095f439-53a1-44f1-9e54-46a2dd2f7cbe",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58843bd8-87cb-43d9-ba42-28961263362f",
                    "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 49,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/turniere soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0eaea46f-b0bf-4d01-8796-4ad7a6ddf804",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75a4046a-e865-4c2a-aeb7-50ce48545d00",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/turniere: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d228980-ba61-48b1-940d-e8608eead3be",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b46ff55-bfce-432d-8d62-f4c0ba71ef09",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d36f9da5-7f69-4a0a-9092-1a7c27770ec7",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3673366e-f905-45a3-8706-8ed2c0869dc0",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0eaea46f-b0bf-4d01-8796-4ad7a6ddf804",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75a4046a-e865-4c2a-aeb7-50ce48545d00",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/turniere: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d228980-ba61-48b1-940d-e8608eead3be",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b46ff55-bfce-432d-8d62-f4c0ba71ef09",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d36f9da5-7f69-4a0a-9092-1a7c27770ec7",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/turniere: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3673366e-f905-45a3-8706-8ed2c0869dc0",
                    "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 29,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8dc5f8a-ff7d-4065-ae99-4f17316b247f",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a38e019-16db-4408-99d1-e5134acab617",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b3a0ffc-881a-4972-b7c6-25ef296f0edd",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca3ddbcf-f600-448a-aa31-38200f6c0a9f",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d298621-1555-4b1d-a339-31b93e8a7144",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0420d6df-a1e3-425f-a927-d5075179cbd9",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8dc5f8a-ff7d-4065-ae99-4f17316b247f",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a38e019-16db-4408-99d1-e5134acab617",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b3a0ffc-881a-4972-b7c6-25ef296f0edd",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca3ddbcf-f600-448a-aa31-38200f6c0a9f",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d298621-1555-4b1d-a339-31b93e8a7144",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0420d6df-a1e3-425f-a927-d5075179cbd9",
                    "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 36,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33ecf6ae-84e4-4343-9e4f-b2f8e4d6af87",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55b13b48-62c2-4374-bc7d-59b9223ed9fa",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c7e865c-6553-48f2-8a2d-46db5aa81ac0",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33f2d38c-38fb-47e5-9705-81a8ef384138",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94c1d826-6694-4c95-afcc-5f7c56bc5f8e",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b0a2bba-573d-46f0-8102-8e2c3911ea7f",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f08bd40-b2d5-41e6-ae8f-f9d91e0c26c8",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1afaad1f-38f3-4406-b76f-a97835f01c58",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a445e86-da7c-42c3-b5fd-97ae675bf72a",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad8fa4c3-4835-4363-bfe7-6a97220feee3",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "150ccfb8-4c06-4d44-85bb-0967eacea1ab",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60bd0044-9d00-4c1a-bca6-6ea45c241709",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33ecf6ae-84e4-4343-9e4f-b2f8e4d6af87",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55b13b48-62c2-4374-bc7d-59b9223ed9fa",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c7e865c-6553-48f2-8a2d-46db5aa81ac0",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33f2d38c-38fb-47e5-9705-81a8ef384138",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94c1d826-6694-4c95-afcc-5f7c56bc5f8e",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b0a2bba-573d-46f0-8102-8e2c3911ea7f",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f08bd40-b2d5-41e6-ae8f-f9d91e0c26c8",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1afaad1f-38f3-4406-b76f-a97835f01c58",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a445e86-da7c-42c3-b5fd-97ae675bf72a",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad8fa4c3-4835-4363-bfe7-6a97220feee3",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "150ccfb8-4c06-4d44-85bb-0967eacea1ab",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60bd0044-9d00-4c1a-bca6-6ea45c241709",
                    "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 57,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/order soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36e5f8f8-d7e2-4454-9d48-2948528c7d09",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "242daf10-448b-42cb-8410-25e1f8340dd7",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "512cafac-ff75-4f11-8479-7b53fb112850",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9db3bc2-a0f6-4020-9bb8-ae8866878582",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f09b8427-4c3a-4667-a2cc-d17c21e37599",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b1d6f34-4b05-4d06-a114-5b738c7f89bf",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "313f88c2-f542-45a9-8783-0e097d4cf351",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66caad0d-3cd8-48d6-92bb-a97037e39fe9",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fc96830-6cfa-4626-a918-dd941b8c0d9a",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "677f9dad-0795-4581-9926-b4f258cd8081",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83a04b76-5b69-4b55-a750-1a03b44eecd5",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "879eecee-1a17-4273-b8de-a3449795a822",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36e5f8f8-d7e2-4454-9d48-2948528c7d09",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "242daf10-448b-42cb-8410-25e1f8340dd7",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "512cafac-ff75-4f11-8479-7b53fb112850",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9db3bc2-a0f6-4020-9bb8-ae8866878582",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f09b8427-4c3a-4667-a2cc-d17c21e37599",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b1d6f34-4b05-4d06-a114-5b738c7f89bf",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "313f88c2-f542-45a9-8783-0e097d4cf351",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66caad0d-3cd8-48d6-92bb-a97037e39fe9",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fc96830-6cfa-4626-a918-dd941b8c0d9a",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "677f9dad-0795-4581-9926-b4f258cd8081",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83a04b76-5b69-4b55-a750-1a03b44eecd5",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "879eecee-1a17-4273-b8de-a3449795a822",
                    "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 58,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9972e8f4-d226-4648-99bd-58b944e4939e",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46d7614a-413e-4cdd-a0de-cd65823da961",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc1d9923-e602-44a6-81db-6bd53be83eba",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "326eccb7-f419-4095-b2ed-bc10bf0c0e9f",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0eb31a5-5da1-4b34-a251-8dc35405ebde",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e23b0cf5-72a3-4ddb-8da4-76714855a9fe",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "a0c82083-1a32-45cd-9e90-e00729e39395",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9972e8f4-d226-4648-99bd-58b944e4939e",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46d7614a-413e-4cdd-a0de-cd65823da961",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc1d9923-e602-44a6-81db-6bd53be83eba",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "326eccb7-f419-4095-b2ed-bc10bf0c0e9f",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0eb31a5-5da1-4b34-a251-8dc35405ebde",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e23b0cf5-72a3-4ddb-8da4-76714855a9fe",
                    "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 32,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fcf7ada-7f8b-4711-ac51-15473c649391",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa69d02f-bf40-41a6-971c-786da45d5b88",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2014d295-386c-4450-bcd8-3cc10d017a49",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fcf7ada-7f8b-4711-ac51-15473c649391",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa69d02f-bf40-41a6-971c-786da45d5b88",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2014d295-386c-4450-bcd8-3cc10d017a49",
                    "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 78,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2780ace-d0b2-403a-b06f-403dad3c66c2",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0480e51c-fdd8-4492-b428-4a72fd698776",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f4d1c91-97f1-4c49-9d68-b2283f0732d5",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2780ace-d0b2-403a-b06f-403dad3c66c2",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0480e51c-fdd8-4492-b428-4a72fd698776",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f4d1c91-97f1-4c49-9d68-b2283f0732d5",
                    "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 16,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b7dc0e0-fcea-42d8-97dd-df987b77b650",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "207777b2-d41e-47f9-b5b2-222fcb53d7f0",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14bb05f1-a515-43ed-8558-2583216bdd8f",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69382213-5151-49c5-b184-bda81182c488",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dae3d256-3334-4d40-9189-f688b1c57fdc",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67585e29-a114-41cf-b4e6-94ff4ad3d6ae",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92e9a7e3-4f1f-43b7-936a-30d7190c704b",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4da769e2-2467-46b6-b7b2-7a7a0a0951b4",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "238e3939-042b-433e-844e-aa4b7a6e27bf",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e208ca32-f2b9-4f3f-84fe-71586b17b523",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "afbe2ab3-5623-4f36-85c3-08135812f1b7",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fe01be0-1df0-48a1-95be-df745747753b",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b7dc0e0-fcea-42d8-97dd-df987b77b650",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "207777b2-d41e-47f9-b5b2-222fcb53d7f0",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14bb05f1-a515-43ed-8558-2583216bdd8f",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69382213-5151-49c5-b184-bda81182c488",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dae3d256-3334-4d40-9189-f688b1c57fdc",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67585e29-a114-41cf-b4e6-94ff4ad3d6ae",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92e9a7e3-4f1f-43b7-936a-30d7190c704b",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4da769e2-2467-46b6-b7b2-7a7a0a0951b4",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "238e3939-042b-433e-844e-aa4b7a6e27bf",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e208ca32-f2b9-4f3f-84fe-71586b17b523",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "afbe2ab3-5623-4f36-85c3-08135812f1b7",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fe01be0-1df0-48a1-95be-df745747753b",
                    "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 56,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dbfce046-3899-4093-8811-857cb0a462a9",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4e8ed7a-4303-4f74-a2cd-1bb8c485ee3d",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b517626-4b31-46f6-8a2e-d65f8e640677",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92fa8606-67dd-473a-a483-9363aa0ed961",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a3fff9a-bb71-4446-af81-f4e7f855f07b",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0436bd05-5b33-4984-81f2-81c30e275cb3",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ab2ee9f-280e-4270-a1a1-f12998790072",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "764c5553-0faa-4c06-8bb5-5840bb8998c8",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "879a150a-ab52-4bd2-8092-5aeee3f50e59",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85f7d244-a552-4b3a-a708-16293a9d1aa4",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91fb7270-5e2e-4c79-b377-8adcd0ee6bb8",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c9e1852-4d71-42e3-8bfc-4b3a95b4af6f",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dbfce046-3899-4093-8811-857cb0a462a9",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4e8ed7a-4303-4f74-a2cd-1bb8c485ee3d",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b517626-4b31-46f6-8a2e-d65f8e640677",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92fa8606-67dd-473a-a483-9363aa0ed961",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a3fff9a-bb71-4446-af81-f4e7f855f07b",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0436bd05-5b33-4984-81f2-81c30e275cb3",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ab2ee9f-280e-4270-a1a1-f12998790072",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "764c5553-0faa-4c06-8bb5-5840bb8998c8",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "879a150a-ab52-4bd2-8092-5aeee3f50e59",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85f7d244-a552-4b3a-a708-16293a9d1aa4",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91fb7270-5e2e-4c79-b377-8adcd0ee6bb8",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c9e1852-4d71-42e3-8bfc-4b3a95b4af6f",
                    "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 53,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/userDetails soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1abccb65-9d2d-49e1-aa86-590a09f69fab",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d816a20f-7bb8-4be5-9a2b-aa155eaf2dc0",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cbde7d2-4aec-44c9-a50e-0179fd144b88",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "defde893-e8d5-4a38-b86f-f7e7a24243b8",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ab3e6c7-8290-42cb-b868-32ae61d0ee51",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d5cce2d-6590-4f35-a27d-f39535f9f6c2",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1b0b0be-6c77-4241-beee-3a30d2e26c77",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1347266-ca5d-4cc5-9a43-001e7e84980d",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce0435e2-f874-4edc-bcab-a393e5737391",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fe9d274-a998-4614-bd7b-de945603c598",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5730b2c7-18e0-4d36-9742-aa5c6c4ac1bd",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c003ba8a-16a6-49bf-884e-115f4bcaee10",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1abccb65-9d2d-49e1-aa86-590a09f69fab",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d816a20f-7bb8-4be5-9a2b-aa155eaf2dc0",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cbde7d2-4aec-44c9-a50e-0179fd144b88",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "defde893-e8d5-4a38-b86f-f7e7a24243b8",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ab3e6c7-8290-42cb-b868-32ae61d0ee51",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d5cce2d-6590-4f35-a27d-f39535f9f6c2",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1b0b0be-6c77-4241-beee-3a30d2e26c77",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1347266-ca5d-4cc5-9a43-001e7e84980d",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce0435e2-f874-4edc-bcab-a393e5737391",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fe9d274-a998-4614-bd7b-de945603c598",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5730b2c7-18e0-4d36-9742-aa5c6c4ac1bd",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c003ba8a-16a6-49bf-884e-115f4bcaee10",
                    "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 54,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/ansprechpartner soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbf62f34-9740-40f9-af8d-819c3c4c9685",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94d0cb0e-986b-4113-b4e7-496b15ae029d",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8871e66e-9aec-45c8-a8ac-e5f0f0c70351",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d5ecaa0-7116-4d69-ab50-993a0f5668fe",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df5923d4-701b-400e-979a-4de369a5c8cb",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2eecee11-8344-4f53-af0f-5d4f94e81d9f",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cf0a3ae-bcbc-442f-acd1-2ce76d951e8d",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93409c93-514a-43ee-9ecc-2b202eac1cb3",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a98f82b-50cf-4537-9e65-ff68935d438b",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbf62f34-9740-40f9-af8d-819c3c4c9685",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94d0cb0e-986b-4113-b4e7-496b15ae029d",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8871e66e-9aec-45c8-a8ac-e5f0f0c70351",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d5ecaa0-7116-4d69-ab50-993a0f5668fe",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df5923d4-701b-400e-979a-4de369a5c8cb",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2eecee11-8344-4f53-af0f-5d4f94e81d9f",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cf0a3ae-bcbc-442f-acd1-2ce76d951e8d",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93409c93-514a-43ee-9ecc-2b202eac1cb3",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a98f82b-50cf-4537-9e65-ff68935d438b",
                    "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 41,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "debc1003-6c19-4944-9ec6-cdeb903b7e25",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/authorization.spec.js",
        "uuid": "f65950e2-58f0-4c37-b9c3-100ff376fd1e",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Bad Request Handler",
        "suites": [
          {
            "title": "es soll geprüft werden ob benötigte Parameter vorhanden sind",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e8e0e91d-d6c5-47d5-8908-59435ed5a07d",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "33e2830e-9406-4e3a-91e8-04b286015f16",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a8d3386-881b-4605-b687-1d684f692dc0",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e8e0e91d-d6c5-47d5-8908-59435ed5a07d",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "33e2830e-9406-4e3a-91e8-04b286015f16",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a8d3386-881b-4605-b687-1d684f692dc0",
                "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 34,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/badRequestHandler.spec.js",
        "uuid": "d1e4da3f-4626-4871-867c-eeac376151a7",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "28fd530c-6f7f-4afa-90b4-b3d360e4c5d5",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 157,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ec341e85-fb67-41b0-a088-257b9da7be72",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8dd0d7c4-03af-41df-8eae-614950691a14",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ac7ee43-a8a4-4eca-ad3a-6759fa53addf",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ec4a9ee-053b-49ec-9fed-c7d3d7a561f9",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df5dcc6a-73b3-4332-ab6b-2b41c9afd1d7",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "072a93a6-8037-43ba-b51c-3d38aa5aa6d6",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a5bb2729-a231-4ef1-8014-8a7208bec7ac",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a22d7835-301c-4389-83a6-9207fe9d14ac",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc638241-ab33-4a79-a34f-b9b2992b739d",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze', 'spielmodus', 'mannschaftslisten']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3',\n        spielmodus: 'normal',\n        mannschaftslisten: 'false'\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f724e9bb-6e48-4454-a6a6-87548fe8be0a",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a7ebf10-74c3-442f-b62d-1e8c1d86c182",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "369c6718-ce74-431b-9792-73c98b4d123f",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ccc655f4-7196-42d1-b5ad-bafaac0b9b93",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die Anzahl PLätze zurück",
      "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a91a6322-43b9-482e-ad02-7f65bb5bcff9",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2947424c-7b5c-4988-8cb6-c8de95853b56",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b4c572dc-4c7d-4e37-b46d-baf8dd4b594f",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "271e99f1-d466-46ec-be0f-cb0febb79695",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22c009fd-6a1e-4026-ae73-c3d018276d5b",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7db91dbc-20c0-4cff-9bb4-0de5a868c512",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b80366c-6d4b-4ec5-9826-ca0624d409e6",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "936fb5da-a5ee-4143-9253-363056252935",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf9b99e9-a0d4-42e0-91ca-e9d61dc0032a",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5393296-db5f-4663-9edd-b9ae86826399",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e6e38fb1-6e62-49f5-a8f6-a95b56311e02",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5824e994-050e-4565-a345-2450eb137a26",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8eea856f-66a8-4c01-bf5b-caacd5e38f53",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58a2cc30-400f-42f5-a274-2a74d8f49093",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bcad2315-c4f4-437a-ae20-d1c91b6d00e5",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cf584ea8-cc1f-433e-b0de-9b65747f8b75",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 78,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d22d061d-eea8-4123-ad89-d109d85bac26",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "d640fd2a-5a5c-4414-b808-354abbcffb00",
      "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "a2e492d0-176f-421b-8a61-0a0709c9bdaa",
      "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "c0461039-b960-41cf-afdc-76231327bf1f",
      "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "1dbe3884-75ba-46c8-9dbd-b3ca7c3bcb52",
      "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "a932f7d0-a62e-4edf-b25c-9306bd819d16",
      "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "1e093379-e1c0-4ab0-9a81-4491be407c58",
      "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "8e123217-d988-48fe-9f45-e1b955ff417c",
      "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "5e8c019d-6dad-4fe3-b935-2c0012e8a3db",
      "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "056adfc7-3b4f-4a98-92f8-ba45addcfa42",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "2cc5a2e7-731b-4b5e-8af6-d55d62b3450e",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "b4e95474-184c-425e-9314-33d458e94946",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "dc2d6df6-04a8-47b9-b75a-29bea173352f",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "301c5019-99be-4e07-acc6-4b71984153ec",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "54559d97-f020-41c9-98d3-e4181934cd18",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "a56322af-05e2-4ee5-85c7-c4ef151739e2",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "bb28ee9a-17ac-4a03-8798-e0ab2af09043",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "204eb310-bf8d-4892-b1b2-441c5b7baafd",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "ecc909c1-fe3e-4f69-852b-278e0543d7f1",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "22a15f31-908d-4fb3-b4e3-3754e33d1219",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "6e83670b-8bfe-4172-a825-1ae0257fc93f",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "339807c5-73cc-41a2-b05c-6df755ecd22c",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "6b6b8941-a525-46b0-ba93-dccee07ac427",
      "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "008a79b9-a6af-4754-82af-afa73ed82d8e",
      "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "b7d8e0f9-c7a2-45d1-8053-408c8ec4b1a9",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "702c217c-f6d4-4ace-a163-3d580fbdaec1",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6e2f31c3-8b7f-49e9-92cf-fe630436b01d",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6544b686-6f14-42bb-b165-72049043d59e",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data.join(' '));",
      "err": {},
      "isRoot": false,
      "uuid": "d993c21c-659a-40eb-a416-1eb073917a18",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "a4308468-4b63-409a-92b2-ada1f931414b",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "a22a9700-c457-4b1d-8ed2-5551d001b44d",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "b0ed504a-fee8-4bbd-b4d5-d5389bdbba9b",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ed79936b-d8e0-4b79-9c5e-649751c0fd87",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "7c7a8766-1cdd-4327-8b90-68beceb9b44b",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "54bc4c48-1248-4859-bd87-8954ad8e85db",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "55939ed3-7f36-4dbe-a8d0-da925e1491a1",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c87df2b9-a78a-4532-8772-7e9111114f73",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "883eaeb3-2a1b-4f0d-b36b-794d33c355a0",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "bb461c05-db65-4493-912d-173b98fb64fb",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "a07be3c2-54d1-4a49-9ebf-b7b74c5a2664",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a21b63fc-8bec-4ef2-9d9a-c8699bb4717b",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b816d7aa-b362-4d74-ba9e-55125163a616",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2f6db6bf-4917-4d9b-8942-fb23d35dae1a",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "12190194-de78-461e-8d60-16db838491b2",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e17e56d2-fd80-4dbe-b8e2-7ac0f3b8319b",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c548cef2-311d-462a-b1a5-7f407baecf84",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "eba9589f-5d77-4c8c-8412-a6c752d82647",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "70e2a1d3-71b9-447e-bbc8-90d026fd57fa",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "05348445-d4b6-46f8-a99a-8498b27d331c",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5cc35cc1-3d42-4d96-8dba-3ee1f9e675ca",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d96428fe-f959-4ba6-99e5-c10b18f8f1a1",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b09a9651-1c37-4a8f-8401-5b5e82636678",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "371005cf-b6b6-478b-921d-93382dcb0353",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8a3e9b54-2c00-47dc-9b6a-b67503dad968",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "dffe41ba-5f69-4529-b7f0-d7bf1daefbcb",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "18e1974f-9233-48f6-8546-2f5e5692d960",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "a3c54d6b-7767-4f06-834e-e82d0d076604",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f0d89e9f-1bec-48b5-90bb-0fd2c47193f6",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "53f3d8e4-7502-400d-9d71-230c09449781",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f9644238-e24a-4b19-9703-5ba93bff480a",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "537d9cfe-4db3-452d-b132-192c4c57712e",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d5119715-5cf1-4468-8518-3e9dce242f00",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "0aea0699-b87c-4773-879a-a0dd659aeac3",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b986ecaa-0b00-482e-b87b-d9543f4bfa8f",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "14f9c3d6-6b38-4f13-8256-60665ce820a8",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b5da5ed6-e485-4821-94b7-c5b9dbd45a7c",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d587e526-a223-4f6c-b623-e7439d4337bf",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c2c11e67-9b33-48cd-98e0-519346024f6e",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c1d0d66e-5835-4913-8630-ab6393958361",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "cc752ecf-0ff9-4009-b6aa-b4b531b134ae",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1c7fe5f6-728b-47fc-9a73-3c6cb9cc6df9",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "dba7e0cc-1b2c-41f8-bee6-059932edd9d7",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1792ac93-2e36-4453-82a4-34a6df4d5fb7",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2d30574b-066f-46ff-93bf-d367da9af598",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b340ba83-2fc4-4a9d-8e5d-d417957ec2ca",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8b412b36-a514-483d-abe1-653c3a4cf119",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9ffb3d45-05ec-4e76-82e7-111cde38b3f3",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c5245751-2a7f-4d79-9689-0314bfe81739",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "65012c3d-f002-4cc2-8dc2-b85efaa5689e",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "Es soll Platz 1 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 1 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "bce787bc-e174-4e5a-b9c4-48677b4940ab",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 2 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 2 korrekt geladen werden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "424989e9-1b19-4e63-b4d8-1e3cd166a925",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 3 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 3 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "235ec763-150c-423a-827d-c8ed44770e56",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 4 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 4 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "3816bfdd-f765-42c3-b91b-57165408cd1f",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 1 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 1 korrekt geladen werden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "1739bd05-8157-4ee4-9802-cc56617573df",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 2 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 2 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "51c08897-a2c7-4bdb-aa11-b07779e29287",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 3 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 3 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "0bc75885-71c7-4974-8ea4-13d2f4712401",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 4 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 4 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "da540c46-455c-4a07-bf42-cb5671374563",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "853ef91b-f0a4-46de-8e5d-309a5d97d290",
      "parentUUID": "b3f33957-9448-4ce9-94cc-ed7f325f05c1",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 136,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "826738ca-c4ed-4c22-89e7-171ee947ea95",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c1b1189a-f79f-498b-a551-cfada5d40814",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3014ea1-31ca-43bb-a92f-02e816f1046b",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f3314be2-05cc-4261-aff2-b3fcbbca9fec",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d2d41b38-9d3f-42d5-9dd6-3125274a5354",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fdb6f11-e362-4990-8cf0-1d7fa4eb7b93",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/turniere?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04737b42-2593-46cf-bc96-0d6690e4efb2",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/turniere?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a97135f9-18fa-4b7d-b5f3-2427b2fe6c22",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/turniere?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80d8027f-8d75-4b8e-9692-b89a5004b21e",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige GET Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4afe012e-c030-4ffa-9b18-0024d00cb8a0",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige POST Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7d33cb0-5902-4a27-83a0-2ed1a5da7b43",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige PUT Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "839ad0b5-3466-43a7-b6a8-e531350121e0",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige DELETE Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce67b752-07c6-49a0-8f84-5a37d8c2e4fc",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6f5a938f-5ec9-4863-aa5e-bc8c8bbd078a",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7dbcd014-9ca5-4166-88a5-efc6b298e4cf",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "102fc145-3575-459e-a528-57b7ac91dc4f",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2602f5e7-3782-4eab-b72f-3e65f404fe91",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f25811c8-4477-4eb5-830e-093b48774e76",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Platz laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47694e7a-0845-4db3-b6d7-d877b93482fd",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Datum laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4dcc978b-9cfe-4b33-81bb-67ddcd4b86c6",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3763885-d399-4606-b584-37d6704e53b0",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2bf4c681-a022-45ae-b99d-30131b404c1c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9513dea-5fca-4d7c-9af7-a1370d5404ab",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb9c4b35-faff-47ce-8dcb-3cf33bb02e96",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9877d34-7866-446d-b0a2-d0bd30fbb682",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6aa6d9a5-2b2a-4a91-9b7a-362ce06bcefb",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40e19193-7bb4-4b58-9b51-6556048a11d3",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "972c9fb9-1c90-4f0c-bfc1-5c808b813f81",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f8c43de-ac4c-4a21-82c1-8b1184ee877c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aad43579-136f-4074-be67-ad93ad0e23da",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b5a86f2-7c98-4c9f-8c26-9261ac6a5f2c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0ba58145-ab25-490b-8baf-bb66306ea8d8",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d59f4c75-1175-46cb-bdbd-99202c83bc77",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "181c62ab-e68d-494b-b2d7-dbe635055e9c",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "748b56f5-d1e8-4150-82e0-07309e0b0d3b",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c777a58-549a-45ed-932c-4aa3749fa606",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a715879-15e5-4abe-a5b1-17a22d4fd6bb",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "21c4d292-d94f-4ba8-8838-75acb8848e27",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "237d10da-e724-4075-94ef-fd2f9b934405",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
      "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "01e2d0a8-82a9-4a59-9f03-826d97a0b438",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52e2b9d0-5e44-4d36-8be7-d1a27bf70e72",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "389ab166-2c4c-40d3-b4fe-c2fa1922a2c2",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b690f3fc-87e0-41ba-9271-72d0d127d0a1",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52162cac-d25a-4c2a-a359-1801523eaeaf",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "689c483e-95af-42a0-bb2e-d6dcf6a24ca0",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eae55466-6d6c-43bb-87ac-3b5a2d40aef2",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0a800b4-11cd-4057-815e-7b40230419f1",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1130592-262d-4659-b5d6-ca3a800fae96",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c1d482b-98e5-49bd-acf0-1b5b57be9a9e",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca83dc74-cb56-437d-9484-9bcb5e990f9b",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 129,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({\n        username: user.username,\n        email: user.email,\n        role: user.role\n    })\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4edce18c-3fb2-44aa-ad8a-18371e37e944",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea0eb5bd-a5e0-4c9a-a8ad-f79abae0f90b",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f88cbb09-153a-47e1-a920-b7b63425db3a",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 211,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send({\n                username: user.username,\n                password: user.password\n            })\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "71418164-04a5-443f-81a5-e62334298ad9",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "518921ac-dd6d-4ec8-9518-878a6aafde81",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aecb817a-c71e-47e4-b638-78607534ae08",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1d11495-68ca-402e-b842-b9ccf6042953",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1893249-81a0-423e-a450-b51e52766c73",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57ca4193-8d2b-4c5d-be52-90dc1dc0206b",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0332e29d-f4f1-4f89-97b8-790d220a892e",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d122a5d6-ef34-4450-bbcb-160c0d31bb05",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c587dbdd-3868-4494-9fd0-61d45c34706c",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 113,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be36b1ae-605e-441b-b683-6efbd508960c",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6395a3c3-2bc1-439e-a832-16bd81cd82b8",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05491f86-063d-479f-8e48-036c1092fc2e",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dbd7400-b428-4024-a321-beb20bd3f769",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e7161b0c-8394-44d4-b78e-3bda2cff7b50",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d42514f-40ac-486c-9d59-0e0504659a33",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ec4b6ad-3de6-475d-a0af-59d0b076d89b",
      "parentUUID": "291ea79e-fe06-4f06-b235-f72fd4e57b6d",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "efffd634-7280-420e-975e-fd18d272fa94",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7db91e7a-6175-4596-8789-0542ab1220ad",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5ca4bd3-afb9-4530-aa0d-88ae302f3c0b",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7cc6d18-f66f-40bb-8613-281b9bf14f03",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a38656ee-b1fc-4329-92f7-9819d11e9136",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b6e7989-e3d5-4fc9-b018-c2031d0a59ca",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4e29d7f-7347-4837-9865-bc6dc9016083",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edce7799-d386-451e-9dcf-251a8daeed73",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f1f1613-d95c-4110-94e7-ac3f1195fd92",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "926096a2-e804-42f4-8b9f-21ba54cc39e4",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bde5e30a-75e1-4cce-a617-af365b2bc140",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34287575-7553-43b8-bfed-bc8f7a6a7718",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "479e1d32-60d3-4e3c-8b27-01df921720d5",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0bd3b38-cd24-4145-8dc3-33fbdd6e93b9",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bd67d57-c4f9-46cf-8612-4624d6228581",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "345bd846-46b8-4abb-b9ed-be071fac0227",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f585e0f-a630-4e5d-8055-d3af71a586df",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e35161d-a529-4949-bfb1-e12eacef198a",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30c30b79-2b02-4101-bcc7-e83943f69ade",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0595b73-b086-40f6-b462-f556334f6d8a",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d0194e1-e399-4168-bd39-55f94ca60d5e",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d27585e-b803-442a-8891-91fa33627faa",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67c63866-609a-4457-8217-22891e70c2d6",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "425141c8-9e47-47b1-83c4-41ab148c6376",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c110a95e-3507-4caf-a947-f0df23eca567",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85aea26b-0af1-4499-9a52-93f300882543",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d78fa988-617f-49ec-9e3c-cc16322cda51",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3631a180-f327-41c8-9e1d-e3d536c53360",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "59337489-bfb4-4ef4-a287-377bd5a29118",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7106e6d4-ed31-4453-b055-2d206738d384",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ef0d5028-d697-4c63-bf7a-418ebb8dd737",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "872b03d3-46ee-4b65-a4f0-16da104320ca",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b1336cf-2b1f-4555-92a3-e31ed52763b2",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7ba87ad-e4ab-4997-a520-22a1c33d753b",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddccc707-63c4-48b9-b277-33dead2890fd",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d5e44b66-1920-418f-adea-3b019a893b3e",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5365ab21-9381-4461-b572-ff712fda2157",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8ce4b557-532b-4e75-b699-b8236c0bb8f3",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8698081-43a2-4c08-8abb-a475cda6ec7c",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce6c3a25-7453-4600-9dcc-a8937f9f5b6f",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d8037184-67a8-4690-a69e-7363f44fbe61",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "737c7f82-478d-4b55-a17d-a6073f833ebc",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b77a475e-ad59-49e5-81cf-3fca84e70808",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94af7f9a-2542-4222-ab3c-0f7c416fb2ad",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "085d6ab3-e768-4136-a3d4-8e9e21d96f8e",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea3cb4d9-dd93-41e2-8e87-65003f3e94c3",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e82c00c2-82ef-4f33-9a44-001ee787750e",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6fbfc8f1-0431-4f65-9556-8679442047f6",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f424b50-8999-475c-bfa6-b0db0a138007",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a9dcaea5-0357-4671-a8f1-b083228d965f",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4095f439-53a1-44f1-9e54-46a2dd2f7cbe",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58843bd8-87cb-43d9-ba42-28961263362f",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0eaea46f-b0bf-4d01-8796-4ad7a6ddf804",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75a4046a-e865-4c2a-aeb7-50ce48545d00",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d228980-ba61-48b1-940d-e8608eead3be",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b46ff55-bfce-432d-8d62-f4c0ba71ef09",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d36f9da5-7f69-4a0a-9092-1a7c27770ec7",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3673366e-f905-45a3-8706-8ed2c0869dc0",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8dc5f8a-ff7d-4065-ae99-4f17316b247f",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a38e019-16db-4408-99d1-e5134acab617",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b3a0ffc-881a-4972-b7c6-25ef296f0edd",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca3ddbcf-f600-448a-aa31-38200f6c0a9f",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6d298621-1555-4b1d-a339-31b93e8a7144",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0420d6df-a1e3-425f-a927-d5075179cbd9",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33ecf6ae-84e4-4343-9e4f-b2f8e4d6af87",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55b13b48-62c2-4374-bc7d-59b9223ed9fa",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c7e865c-6553-48f2-8a2d-46db5aa81ac0",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33f2d38c-38fb-47e5-9705-81a8ef384138",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94c1d826-6694-4c95-afcc-5f7c56bc5f8e",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b0a2bba-573d-46f0-8102-8e2c3911ea7f",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1f08bd40-b2d5-41e6-ae8f-f9d91e0c26c8",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1afaad1f-38f3-4406-b76f-a97835f01c58",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a445e86-da7c-42c3-b5fd-97ae675bf72a",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad8fa4c3-4835-4363-bfe7-6a97220feee3",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "150ccfb8-4c06-4d44-85bb-0967eacea1ab",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60bd0044-9d00-4c1a-bca6-6ea45c241709",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36e5f8f8-d7e2-4454-9d48-2948528c7d09",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "242daf10-448b-42cb-8410-25e1f8340dd7",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "512cafac-ff75-4f11-8479-7b53fb112850",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9db3bc2-a0f6-4020-9bb8-ae8866878582",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f09b8427-4c3a-4667-a2cc-d17c21e37599",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b1d6f34-4b05-4d06-a114-5b738c7f89bf",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "313f88c2-f542-45a9-8783-0e097d4cf351",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "66caad0d-3cd8-48d6-92bb-a97037e39fe9",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8fc96830-6cfa-4626-a918-dd941b8c0d9a",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "677f9dad-0795-4581-9926-b4f258cd8081",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83a04b76-5b69-4b55-a750-1a03b44eecd5",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "879eecee-1a17-4273-b8de-a3449795a822",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9972e8f4-d226-4648-99bd-58b944e4939e",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "46d7614a-413e-4cdd-a0de-cd65823da961",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc1d9923-e602-44a6-81db-6bd53be83eba",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "326eccb7-f419-4095-b2ed-bc10bf0c0e9f",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0eb31a5-5da1-4b34-a251-8dc35405ebde",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e23b0cf5-72a3-4ddb-8da4-76714855a9fe",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fcf7ada-7f8b-4711-ac51-15473c649391",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa69d02f-bf40-41a6-971c-786da45d5b88",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2014d295-386c-4450-bcd8-3cc10d017a49",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b2780ace-d0b2-403a-b06f-403dad3c66c2",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0480e51c-fdd8-4492-b428-4a72fd698776",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f4d1c91-97f1-4c49-9d68-b2283f0732d5",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b7dc0e0-fcea-42d8-97dd-df987b77b650",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "207777b2-d41e-47f9-b5b2-222fcb53d7f0",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "14bb05f1-a515-43ed-8558-2583216bdd8f",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69382213-5151-49c5-b184-bda81182c488",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dae3d256-3334-4d40-9189-f688b1c57fdc",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67585e29-a114-41cf-b4e6-94ff4ad3d6ae",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92e9a7e3-4f1f-43b7-936a-30d7190c704b",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4da769e2-2467-46b6-b7b2-7a7a0a0951b4",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "238e3939-042b-433e-844e-aa4b7a6e27bf",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e208ca32-f2b9-4f3f-84fe-71586b17b523",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "afbe2ab3-5623-4f36-85c3-08135812f1b7",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fe01be0-1df0-48a1-95be-df745747753b",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dbfce046-3899-4093-8811-857cb0a462a9",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e4e8ed7a-4303-4f74-a2cd-1bb8c485ee3d",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b517626-4b31-46f6-8a2e-d65f8e640677",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92fa8606-67dd-473a-a483-9363aa0ed961",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a3fff9a-bb71-4446-af81-f4e7f855f07b",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0436bd05-5b33-4984-81f2-81c30e275cb3",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ab2ee9f-280e-4270-a1a1-f12998790072",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "764c5553-0faa-4c06-8bb5-5840bb8998c8",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "879a150a-ab52-4bd2-8092-5aeee3f50e59",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85f7d244-a552-4b3a-a708-16293a9d1aa4",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91fb7270-5e2e-4c79-b377-8adcd0ee6bb8",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c9e1852-4d71-42e3-8bfc-4b3a95b4af6f",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1abccb65-9d2d-49e1-aa86-590a09f69fab",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d816a20f-7bb8-4be5-9a2b-aa155eaf2dc0",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2cbde7d2-4aec-44c9-a50e-0179fd144b88",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "defde893-e8d5-4a38-b86f-f7e7a24243b8",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ab3e6c7-8290-42cb-b868-32ae61d0ee51",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d5cce2d-6590-4f35-a27d-f39535f9f6c2",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1b0b0be-6c77-4241-beee-3a30d2e26c77",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1347266-ca5d-4cc5-9a43-001e7e84980d",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce0435e2-f874-4edc-bcab-a393e5737391",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fe9d274-a998-4614-bd7b-de945603c598",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5730b2c7-18e0-4d36-9742-aa5c6c4ac1bd",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c003ba8a-16a6-49bf-884e-115f4bcaee10",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bbf62f34-9740-40f9-af8d-819c3c4c9685",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94d0cb0e-986b-4113-b4e7-496b15ae029d",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8871e66e-9aec-45c8-a8ac-e5f0f0c70351",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d5ecaa0-7116-4d69-ab50-993a0f5668fe",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df5923d4-701b-400e-979a-4de369a5c8cb",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2eecee11-8344-4f53-af0f-5d4f94e81d9f",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cf0a3ae-bcbc-442f-acd1-2ce76d951e8d",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93409c93-514a-43ee-9ecc-2b202eac1cb3",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a98f82b-50cf-4537-9e65-ff68935d438b",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8e0e91d-d6c5-47d5-8908-59435ed5a07d",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33e2830e-9406-4e3a-91e8-04b286015f16",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a8d3386-881b-4605-b687-1d684f692dc0",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 157,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ec341e85-fb67-41b0-a088-257b9da7be72",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8dd0d7c4-03af-41df-8eae-614950691a14",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ac7ee43-a8a4-4eca-ad3a-6759fa53addf",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ec4a9ee-053b-49ec-9fed-c7d3d7a561f9",
      "parentUUID": "296cff57-7235-4a0c-8e85-87ddd9970ce8",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df5dcc6a-73b3-4332-ab6b-2b41c9afd1d7",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "072a93a6-8037-43ba-b51c-3d38aa5aa6d6",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a5bb2729-a231-4ef1-8014-8a7208bec7ac",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a22d7835-301c-4389-83a6-9207fe9d14ac",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc638241-ab33-4a79-a34f-b9b2992b739d",
      "parentUUID": "1f650e08-f51e-49e1-9c41-856346da5638",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze', 'spielmodus', 'mannschaftslisten']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3',\n        spielmodus: 'normal',\n        mannschaftslisten: 'false'\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f724e9bb-6e48-4454-a6a6-87548fe8be0a",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a7ebf10-74c3-442f-b62d-1e8c1d86c182",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "369c6718-ce74-431b-9792-73c98b4d123f",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ccc655f4-7196-42d1-b5ad-bafaac0b9b93",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "gibt die Anzahl PLätze zurück",
      "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a91a6322-43b9-482e-ad02-7f65bb5bcff9",
      "parentUUID": "bb1bd137-70a2-4ca2-afbb-58fdb854018e",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2947424c-7b5c-4988-8cb6-c8de95853b56",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b4c572dc-4c7d-4e37-b46d-baf8dd4b594f",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "271e99f1-d466-46ec-be0f-cb0febb79695",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22c009fd-6a1e-4026-ae73-c3d018276d5b",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7db91dbc-20c0-4cff-9bb4-0de5a868c512",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b80366c-6d4b-4ec5-9826-ca0624d409e6",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "936fb5da-a5ee-4143-9253-363056252935",
      "parentUUID": "2ce2decb-05e8-4d19-af98-a29aee12f0f9",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf9b99e9-a0d4-42e0-91ca-e9d61dc0032a",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5393296-db5f-4663-9edd-b9ae86826399",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e6e38fb1-6e62-49f5-a8f6-a95b56311e02",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5824e994-050e-4565-a345-2450eb137a26",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8eea856f-66a8-4c01-bf5b-caacd5e38f53",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58a2cc30-400f-42f5-a274-2a74d8f49093",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bcad2315-c4f4-437a-ae20-d1c91b6d00e5",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cf584ea8-cc1f-433e-b0de-9b65747f8b75",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 78,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d22d061d-eea8-4123-ad89-d109d85bac26",
      "parentUUID": "17b2284a-0be4-4912-85f3-14a8b0c2b185",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "d640fd2a-5a5c-4414-b808-354abbcffb00",
      "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "a2e492d0-176f-421b-8a61-0a0709c9bdaa",
      "parentUUID": "f92b9787-ec93-4e80-93f2-7f3e140a6abf",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "c0461039-b960-41cf-afdc-76231327bf1f",
      "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "1dbe3884-75ba-46c8-9dbd-b3ca7c3bcb52",
      "parentUUID": "7ed95c2e-5b49-4dc9-933a-7607a38e4c05",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "a932f7d0-a62e-4edf-b25c-9306bd819d16",
      "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "1e093379-e1c0-4ab0-9a81-4491be407c58",
      "parentUUID": "6fe13b74-4ef9-47cc-9db9-94557dd6da44",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "8e123217-d988-48fe-9f45-e1b955ff417c",
      "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "5e8c019d-6dad-4fe3-b935-2c0012e8a3db",
      "parentUUID": "627b86ca-4a33-44dd-99a7-da0e6d9946eb",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "056adfc7-3b4f-4a98-92f8-ba45addcfa42",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "2cc5a2e7-731b-4b5e-8af6-d55d62b3450e",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "b4e95474-184c-425e-9314-33d458e94946",
      "parentUUID": "8a58ecf6-fd6c-40fb-9d66-423b5430a899",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "dc2d6df6-04a8-47b9-b75a-29bea173352f",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "301c5019-99be-4e07-acc6-4b71984153ec",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "54559d97-f020-41c9-98d3-e4181934cd18",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "a56322af-05e2-4ee5-85c7-c4ef151739e2",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "bb28ee9a-17ac-4a03-8798-e0ab2af09043",
      "parentUUID": "40212e55-30b7-40ef-9acd-d8513fcf32a4",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "204eb310-bf8d-4892-b1b2-441c5b7baafd",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "ecc909c1-fe3e-4f69-852b-278e0543d7f1",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "22a15f31-908d-4fb3-b4e3-3754e33d1219",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "6e83670b-8bfe-4172-a825-1ae0257fc93f",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "339807c5-73cc-41a2-b05c-6df755ecd22c",
      "parentUUID": "b4a877ff-0b51-4ae4-8c92-d74a6cbc63d1",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "6b6b8941-a525-46b0-ba93-dccee07ac427",
      "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "008a79b9-a6af-4754-82af-afa73ed82d8e",
      "parentUUID": "af9c48d8-df68-454d-a430-0aaf035486ab",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "b7d8e0f9-c7a2-45d1-8053-408c8ec4b1a9",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "702c217c-f6d4-4ace-a163-3d580fbdaec1",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6e2f31c3-8b7f-49e9-92cf-fe630436b01d",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6544b686-6f14-42bb-b165-72049043d59e",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data.join(' '));",
      "err": {},
      "isRoot": false,
      "uuid": "d993c21c-659a-40eb-a416-1eb073917a18",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "a4308468-4b63-409a-92b2-ada1f931414b",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "a22a9700-c457-4b1d-8ed2-5551d001b44d",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "b0ed504a-fee8-4bbd-b4d5-d5389bdbba9b",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ed79936b-d8e0-4b79-9c5e-649751c0fd87",
      "parentUUID": "733cc37b-413c-4d2d-af96-7be3a2218738",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "7c7a8766-1cdd-4327-8b90-68beceb9b44b",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "54bc4c48-1248-4859-bd87-8954ad8e85db",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "55939ed3-7f36-4dbe-a8d0-da925e1491a1",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c87df2b9-a78a-4532-8772-7e9111114f73",
      "parentUUID": "3673298e-960b-4fb0-933f-3e7018e90063",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "883eaeb3-2a1b-4f0d-b36b-794d33c355a0",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "bb461c05-db65-4493-912d-173b98fb64fb",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "a07be3c2-54d1-4a49-9ebf-b7b74c5a2664",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a21b63fc-8bec-4ef2-9d9a-c8699bb4717b",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b816d7aa-b362-4d74-ba9e-55125163a616",
      "parentUUID": "f0f8c37e-72cd-4daf-af50-07a7086ddd9e",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2f6db6bf-4917-4d9b-8942-fb23d35dae1a",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "12190194-de78-461e-8d60-16db838491b2",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e17e56d2-fd80-4dbe-b8e2-7ac0f3b8319b",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c548cef2-311d-462a-b1a5-7f407baecf84",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "eba9589f-5d77-4c8c-8412-a6c752d82647",
      "parentUUID": "6bd4727e-1cbf-4b59-9f70-c84e64759564",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "70e2a1d3-71b9-447e-bbc8-90d026fd57fa",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "05348445-d4b6-46f8-a99a-8498b27d331c",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5cc35cc1-3d42-4d96-8dba-3ee1f9e675ca",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d96428fe-f959-4ba6-99e5-c10b18f8f1a1",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b09a9651-1c37-4a8f-8401-5b5e82636678",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "371005cf-b6b6-478b-921d-93382dcb0353",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8a3e9b54-2c00-47dc-9b6a-b67503dad968",
      "parentUUID": "ab14e678-31c7-4d79-8aaa-f044ff3aeb60",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "dffe41ba-5f69-4529-b7f0-d7bf1daefbcb",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "18e1974f-9233-48f6-8546-2f5e5692d960",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "a3c54d6b-7767-4f06-834e-e82d0d076604",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f0d89e9f-1bec-48b5-90bb-0fd2c47193f6",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "53f3d8e4-7502-400d-9d71-230c09449781",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f9644238-e24a-4b19-9703-5ba93bff480a",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "537d9cfe-4db3-452d-b132-192c4c57712e",
      "parentUUID": "0dba6398-89d0-44d0-ba17-78aa59a26875",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d5119715-5cf1-4468-8518-3e9dce242f00",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "0aea0699-b87c-4773-879a-a0dd659aeac3",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b986ecaa-0b00-482e-b87b-d9543f4bfa8f",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "14f9c3d6-6b38-4f13-8256-60665ce820a8",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b5da5ed6-e485-4821-94b7-c5b9dbd45a7c",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d587e526-a223-4f6c-b623-e7439d4337bf",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c2c11e67-9b33-48cd-98e0-519346024f6e",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c1d0d66e-5835-4913-8630-ab6393958361",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "cc752ecf-0ff9-4009-b6aa-b4b531b134ae",
      "parentUUID": "37c1d2a3-2572-4ccc-a224-0de53983b868",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1c7fe5f6-728b-47fc-9a73-3c6cb9cc6df9",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "dba7e0cc-1b2c-41f8-bee6-059932edd9d7",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1792ac93-2e36-4453-82a4-34a6df4d5fb7",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2d30574b-066f-46ff-93bf-d367da9af598",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b340ba83-2fc4-4a9d-8e5d-d417957ec2ca",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8b412b36-a514-483d-abe1-653c3a4cf119",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9ffb3d45-05ec-4e76-82e7-111cde38b3f3",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c5245751-2a7f-4d79-9689-0314bfe81739",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "65012c3d-f002-4cc2-8dc2-b85efaa5689e",
      "parentUUID": "e750f91b-dfa0-44ed-a8e2-fa32b8dd1d91",
      "skipped": false
    },
    {
      "title": "Es soll Platz 1 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 1 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "bce787bc-e174-4e5a-b9c4-48677b4940ab",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 2 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 2 korrekt geladen werden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "424989e9-1b19-4e63-b4d8-1e3cd166a925",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 3 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 3 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "235ec763-150c-423a-827d-c8ed44770e56",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 4 korrekt geladen werden",
      "fullTitle": "Es sind bereits alle Spiele gespielt Es soll Platz 4 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result._id).to.equal(i.toString());",
      "err": {},
      "isRoot": false,
      "uuid": "3816bfdd-f765-42c3-b91b-57165408cd1f",
      "parentUUID": "77b7aeff-ad98-47dd-9050-ee06b0742abe",
      "skipped": false
    },
    {
      "title": "Es soll Platz 1 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 1 korrekt geladen werden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "1739bd05-8157-4ee4-9802-cc56617573df",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 2 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 2 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "51c08897-a2c7-4bdb-aa11-b07779e29287",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 3 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 3 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "0bc75885-71c7-4974-8ea4-13d2f4712401",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "Es soll Platz 4 korrekt geladen werden",
      "fullTitle": "Es sind noch nicht alle Spiel gespielt Es soll Platz 4 korrekt geladen werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = gruppeFindPlace(teams, spiele, i, 'all');\nexpect(result).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "da540c46-455c-4a07-bf42-cb5671374563",
      "parentUUID": "e79d44f8-c9fb-4098-9d97-c30cdcba2693",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "853ef91b-f0a4-46de-8e5d-309a5d97d290",
      "parentUUID": "b3f33957-9448-4ce9-94cc-ed7f325f05c1",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 136,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "826738ca-c4ed-4c22-89e7-171ee947ea95",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c1b1189a-f79f-498b-a551-cfada5d40814",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3014ea1-31ca-43bb-a92f-02e816f1046b",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/turniere')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f3314be2-05cc-4261-aff2-b3fcbbca9fec",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d2d41b38-9d3f-42d5-9dd6-3125274a5354",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/turniere/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fdb6f11-e362-4990-8cf0-1d7fa4eb7b93",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/turniere?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "04737b42-2593-46cf-bc96-0d6690e4efb2",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/turniere?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a97135f9-18fa-4b7d-b5f3-2427b2fe6c22",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/turniere?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80d8027f-8d75-4b8e-9692-b89a5004b21e",
      "parentUUID": "e3af5160-6422-4cbc-b567-591844168834",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige GET Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4afe012e-c030-4ffa-9b18-0024d00cb8a0",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige POST Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7d33cb0-5902-4a27-83a0-2ed1a5da7b43",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige PUT Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "839ad0b5-3466-43a7-b6a8-e531350121e0",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige DELETE Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce67b752-07c6-49a0-8f84-5a37d8c2e4fc",
      "parentUUID": "1c0195d1-1412-40de-ad62-1f5ce826162c",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6f5a938f-5ec9-4863-aa5e-bc8c8bbd078a",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7dbcd014-9ca5-4166-88a5-efc6b298e4cf",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "102fc145-3575-459e-a528-57b7ac91dc4f",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2602f5e7-3782-4eab-b72f-3e65f404fe91",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f25811c8-4477-4eb5-830e-093b48774e76",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Platz laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47694e7a-0845-4db3-b6d7-d877b93482fd",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Datum laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4dcc978b-9cfe-4b33-81bb-67ddcd4b86c6",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3763885-d399-4606-b584-37d6704e53b0",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2bf4c681-a022-45ae-b99d-30131b404c1c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9513dea-5fca-4d7c-9af7-a1370d5404ab",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb9c4b35-faff-47ce-8dcb-3cf33bb02e96",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9877d34-7866-446d-b0a2-d0bd30fbb682",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6aa6d9a5-2b2a-4a91-9b7a-362ce06bcefb",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "40e19193-7bb4-4b58-9b51-6556048a11d3",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "972c9fb9-1c90-4f0c-bfc1-5c808b813f81",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f8c43de-ac4c-4a21-82c1-8b1184ee877c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aad43579-136f-4074-be67-ad93ad0e23da",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b5a86f2-7c98-4c9f-8c26-9261ac6a5f2c",
      "parentUUID": "664fd871-77ad-46e9-a740-68483ce73894",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0ba58145-ab25-490b-8baf-bb66306ea8d8",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d59f4c75-1175-46cb-bdbd-99202c83bc77",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "181c62ab-e68d-494b-b2d7-dbe635055e9c",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "748b56f5-d1e8-4150-82e0-07309e0b0d3b",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c777a58-549a-45ed-932c-4aa3749fa606",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a715879-15e5-4abe-a5b1-17a22d4fd6bb",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "21c4d292-d94f-4ba8-8838-75acb8848e27",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "237d10da-e724-4075-94ef-fd2f9b934405",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
      "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(15);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "01e2d0a8-82a9-4a59-9f03-826d97a0b438",
      "parentUUID": "b656659e-8ee1-4e84-a6d4-66ee7be84db8",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52e2b9d0-5e44-4d36-8be7-d1a27bf70e72",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "389ab166-2c4c-40d3-b4fe-c2fa1922a2c2",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b690f3fc-87e0-41ba-9271-72d0d127d0a1",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52162cac-d25a-4c2a-a359-1801523eaeaf",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "689c483e-95af-42a0-bb2e-d6dcf6a24ca0",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eae55466-6d6c-43bb-87ac-3b5a2d40aef2",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0a800b4-11cd-4057-815e-7b40230419f1",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1130592-262d-4659-b5d6-ca3a800fae96",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1c1d482b-98e5-49bd-acf0-1b5b57be9a9e",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca83dc74-cb56-437d-9484-9bcb5e990f9b",
      "parentUUID": "06d21f60-2fe8-48b0-a987-11e5077ccaa6",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 129,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({\n        username: user.username,\n        email: user.email,\n        role: user.role\n    })\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4edce18c-3fb2-44aa-ad8a-18371e37e944",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea0eb5bd-a5e0-4c9a-a8ad-f79abae0f90b",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f88cbb09-153a-47e1-a920-b7b63425db3a",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 211,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send({\n                username: user.username,\n                password: user.password\n            })\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "71418164-04a5-443f-81a5-e62334298ad9",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "518921ac-dd6d-4ec8-9518-878a6aafde81",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aecb817a-c71e-47e4-b638-78607534ae08",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1d11495-68ca-402e-b842-b9ccf6042953",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1893249-81a0-423e-a450-b51e52766c73",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "57ca4193-8d2b-4c5d-be52-90dc1dc0206b",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0332e29d-f4f1-4f89-97b8-790d220a892e",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d122a5d6-ef34-4450-bbcb-160c0d31bb05",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c587dbdd-3868-4494-9fd0-61d45c34706c",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 113,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "be36b1ae-605e-441b-b683-6efbd508960c",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6395a3c3-2bc1-439e-a832-16bd81cd82b8",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05491f86-063d-479f-8e48-036c1092fc2e",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dbd7400-b428-4024-a321-beb20bd3f769",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e7161b0c-8394-44d4-b78e-3bda2cff7b50",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d42514f-40ac-486c-9d59-0e0504659a33",
      "parentUUID": "4ea41401-f6f2-4739-ad23-823dc40a62b7",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ec4b6ad-3de6-475d-a0af-59d0b076d89b",
      "parentUUID": "291ea79e-fe06-4f06-b235-f72fd4e57b6d",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "efffd634-7280-420e-975e-fd18d272fa94",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7db91e7a-6175-4596-8789-0542ab1220ad",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5ca4bd3-afb9-4530-aa0d-88ae302f3c0b",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7cc6d18-f66f-40bb-8613-281b9bf14f03",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a38656ee-b1fc-4329-92f7-9819d11e9136",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b6e7989-e3d5-4fc9-b018-c2031d0a59ca",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4e29d7f-7347-4837-9865-bc6dc9016083",
      "parentUUID": "b9148b58-1b3a-4781-9cdb-69690d9265fd",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edce7799-d386-451e-9dcf-251a8daeed73",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f1f1613-d95c-4110-94e7-ac3f1195fd92",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "926096a2-e804-42f4-8b9f-21ba54cc39e4",
      "parentUUID": "be90fbfe-ca86-43fc-84b6-8a25fffafbf6",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bde5e30a-75e1-4cce-a617-af365b2bc140",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34287575-7553-43b8-bfed-bc8f7a6a7718",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "479e1d32-60d3-4e3c-8b27-01df921720d5",
      "parentUUID": "604cdf85-7cf5-47fc-8a12-964b12f66e6a",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0bd3b38-cd24-4145-8dc3-33fbdd6e93b9",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bd67d57-c4f9-46cf-8612-4624d6228581",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "345bd846-46b8-4abb-b9ed-be071fac0227",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f585e0f-a630-4e5d-8055-d3af71a586df",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e35161d-a529-4949-bfb1-e12eacef198a",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30c30b79-2b02-4101-bcc7-e83943f69ade",
      "parentUUID": "239b8e64-6e10-4a78-9253-2f97d9f4864d",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0595b73-b086-40f6-b462-f556334f6d8a",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d0194e1-e399-4168-bd39-55f94ca60d5e",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d27585e-b803-442a-8891-91fa33627faa",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67c63866-609a-4457-8217-22891e70c2d6",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "425141c8-9e47-47b1-83c4-41ab148c6376",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c110a95e-3507-4caf-a947-f0df23eca567",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85aea26b-0af1-4499-9a52-93f300882543",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d78fa988-617f-49ec-9e3c-cc16322cda51",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3631a180-f327-41c8-9e1d-e3d536c53360",
      "parentUUID": "58455292-b444-4963-949f-7393f5a94661",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "59337489-bfb4-4ef4-a287-377bd5a29118",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7106e6d4-ed31-4453-b055-2d206738d384",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ef0d5028-d697-4c63-bf7a-418ebb8dd737",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "872b03d3-46ee-4b65-a4f0-16da104320ca",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b1336cf-2b1f-4555-92a3-e31ed52763b2",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7ba87ad-e4ab-4997-a520-22a1c33d753b",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddccc707-63c4-48b9-b277-33dead2890fd",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d5e44b66-1920-418f-adea-3b019a893b3e",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5365ab21-9381-4461-b572-ff712fda2157",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8ce4b557-532b-4e75-b699-b8236c0bb8f3",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8698081-43a2-4c08-8abb-a475cda6ec7c",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce6c3a25-7453-4600-9dcc-a8937f9f5b6f",
      "parentUUID": "8cd4633e-0b3b-452b-983f-eb491d147aa7",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d8037184-67a8-4690-a69e-7363f44fbe61",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "737c7f82-478d-4b55-a17d-a6073f833ebc",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein GET /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b77a475e-ad59-49e5-81cf-3fca84e70808",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94af7f9a-2542-4222-ab3c-0f7c416fb2ad",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "085d6ab3-e768-4136-a3d4-8e9e21d96f8e",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein POST /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea3cb4d9-dd93-41e2-8e87-65003f3e94c3",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e82c00c2-82ef-4f33-9a44-001ee787750e",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6fbfc8f1-0431-4f65-9556-8679442047f6",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein PUT /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f424b50-8999-475c-bfa6-b0db0a138007",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a9dcaea5-0357-4671-a8f1-b083228d965f",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4095f439-53a1-44f1-9e54-46a2dd2f7cbe",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/reloadAnmeldeObjekte soll geschützt sein DELETE /api/teams/reloadAnmeldeObjekte: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58843bd8-87cb-43d9-ba42-28961263362f",
      "parentUUID": "7f0c94c1-542e-4aec-83e5-7ec87d5284f3",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0eaea46f-b0bf-4d01-8796-4ad7a6ddf804",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75a4046a-e865-4c2a-aeb7-50ce48545d00",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/turniere: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein POST /api/turniere: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d228980-ba61-48b1-940d-e8608eead3be",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8b46ff55-bfce-432d-8d62-f4c0ba71ef09",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d36f9da5-7f69-4a0a-9092-1a7c27770ec7",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "DELETE /api/turniere: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/turniere soll geschützt sein DELETE /api/turniere: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3673366e-f905-45a3-8706-8ed2c0869dc0",
      "parentUUID": "99e6e38c-79e2-4d76-8c95-e2024db583d5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8dc5f8a-ff7d-4065-ae99-4f17316b247f",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a38e019-16db-4408-99d1-e5134acab617",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b3a0ffc-881a-4972-b7c6-25ef296f0edd",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca3ddbcf-f600-448a-aa31-38200f6c0a9f",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6d298621-1555-4b1d-a339-31b93e8a7144",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0420d6df-a1e3-425f-a927-d5075179cbd9",
      "parentUUID": "0985facb-264b-4b1a-afed-7b5caf4cfd02",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33ecf6ae-84e4-4343-9e4f-b2f8e4d6af87",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55b13b48-62c2-4374-bc7d-59b9223ed9fa",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c7e865c-6553-48f2-8a2d-46db5aa81ac0",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33f2d38c-38fb-47e5-9705-81a8ef384138",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94c1d826-6694-4c95-afcc-5f7c56bc5f8e",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b0a2bba-573d-46f0-8102-8e2c3911ea7f",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1f08bd40-b2d5-41e6-ae8f-f9d91e0c26c8",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1afaad1f-38f3-4406-b76f-a97835f01c58",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a445e86-da7c-42c3-b5fd-97ae675bf72a",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad8fa4c3-4835-4363-bfe7-6a97220feee3",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "150ccfb8-4c06-4d44-85bb-0967eacea1ab",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60bd0044-9d00-4c1a-bca6-6ea45c241709",
      "parentUUID": "af5a8d73-3ca7-4c8d-8ae6-12ccf09951c1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36e5f8f8-d7e2-4454-9d48-2948528c7d09",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "242daf10-448b-42cb-8410-25e1f8340dd7",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "512cafac-ff75-4f11-8479-7b53fb112850",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9db3bc2-a0f6-4020-9bb8-ae8866878582",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f09b8427-4c3a-4667-a2cc-d17c21e37599",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b1d6f34-4b05-4d06-a114-5b738c7f89bf",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "313f88c2-f542-45a9-8783-0e097d4cf351",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "66caad0d-3cd8-48d6-92bb-a97037e39fe9",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8fc96830-6cfa-4626-a918-dd941b8c0d9a",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "677f9dad-0795-4581-9926-b4f258cd8081",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83a04b76-5b69-4b55-a750-1a03b44eecd5",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "879eecee-1a17-4273-b8de-a3449795a822",
      "parentUUID": "5e409fa7-70d5-4886-ad23-b8ff6ad14797",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9972e8f4-d226-4648-99bd-58b944e4939e",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "46d7614a-413e-4cdd-a0de-cd65823da961",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc1d9923-e602-44a6-81db-6bd53be83eba",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "326eccb7-f419-4095-b2ed-bc10bf0c0e9f",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0eb31a5-5da1-4b34-a251-8dc35405ebde",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e23b0cf5-72a3-4ddb-8da4-76714855a9fe",
      "parentUUID": "a0c82083-1a32-45cd-9e90-e00729e39395",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fcf7ada-7f8b-4711-ac51-15473c649391",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa69d02f-bf40-41a6-971c-786da45d5b88",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2014d295-386c-4450-bcd8-3cc10d017a49",
      "parentUUID": "6be7b3f4-093b-4f49-89b5-62ada63be5c0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b2780ace-d0b2-403a-b06f-403dad3c66c2",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0480e51c-fdd8-4492-b428-4a72fd698776",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5f4d1c91-97f1-4c49-9d68-b2283f0732d5",
      "parentUUID": "ebaa2012-b2fb-43c4-9e6b-cf16cc4574c1",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b7dc0e0-fcea-42d8-97dd-df987b77b650",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "207777b2-d41e-47f9-b5b2-222fcb53d7f0",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "14bb05f1-a515-43ed-8558-2583216bdd8f",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69382213-5151-49c5-b184-bda81182c488",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dae3d256-3334-4d40-9189-f688b1c57fdc",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67585e29-a114-41cf-b4e6-94ff4ad3d6ae",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92e9a7e3-4f1f-43b7-936a-30d7190c704b",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4da769e2-2467-46b6-b7b2-7a7a0a0951b4",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "238e3939-042b-433e-844e-aa4b7a6e27bf",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e208ca32-f2b9-4f3f-84fe-71586b17b523",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "afbe2ab3-5623-4f36-85c3-08135812f1b7",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fe01be0-1df0-48a1-95be-df745747753b",
      "parentUUID": "b4e8b1a6-5aed-4c0c-8188-0a91d785d4bb",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dbfce046-3899-4093-8811-857cb0a462a9",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e4e8ed7a-4303-4f74-a2cd-1bb8c485ee3d",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b517626-4b31-46f6-8a2e-d65f8e640677",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92fa8606-67dd-473a-a483-9363aa0ed961",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a3fff9a-bb71-4446-af81-f4e7f855f07b",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0436bd05-5b33-4984-81f2-81c30e275cb3",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ab2ee9f-280e-4270-a1a1-f12998790072",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "764c5553-0faa-4c06-8bb5-5840bb8998c8",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "879a150a-ab52-4bd2-8092-5aeee3f50e59",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85f7d244-a552-4b3a-a708-16293a9d1aa4",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "91fb7270-5e2e-4c79-b377-8adcd0ee6bb8",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c9e1852-4d71-42e3-8bfc-4b3a95b4af6f",
      "parentUUID": "3a83ac45-bf8b-406a-bd93-7f49d7c85e23",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1abccb65-9d2d-49e1-aa86-590a09f69fab",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d816a20f-7bb8-4be5-9a2b-aa155eaf2dc0",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2cbde7d2-4aec-44c9-a50e-0179fd144b88",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "defde893-e8d5-4a38-b86f-f7e7a24243b8",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ab3e6c7-8290-42cb-b868-32ae61d0ee51",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7d5cce2d-6590-4f35-a27d-f39535f9f6c2",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1b0b0be-6c77-4241-beee-3a30d2e26c77",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1347266-ca5d-4cc5-9a43-001e7e84980d",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce0435e2-f874-4edc-bcab-a393e5737391",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fe9d274-a998-4614-bd7b-de945603c598",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5730b2c7-18e0-4d36-9742-aa5c6c4ac1bd",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c003ba8a-16a6-49bf-884e-115f4bcaee10",
      "parentUUID": "eeb72e97-a43e-4f80-80bf-08b503945b9c",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bbf62f34-9740-40f9-af8d-819c3c4c9685",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "94d0cb0e-986b-4113-b4e7-496b15ae029d",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8871e66e-9aec-45c8-a8ac-e5f0f0c70351",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d5ecaa0-7116-4d69-ab50-993a0f5668fe",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df5923d4-701b-400e-979a-4de369a5c8cb",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2eecee11-8344-4f53-af0f-5d4f94e81d9f",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cf0a3ae-bcbc-442f-acd1-2ce76d951e8d",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93409c93-514a-43ee-9ecc-2b202eac1cb3",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9a98f82b-50cf-4537-9e65-ff68935d438b",
      "parentUUID": "7991e9f1-f3e5-4ca4-8917-7d459e46306a",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8e0e91d-d6c5-47d5-8908-59435ed5a07d",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "33e2830e-9406-4e3a-91e8-04b286015f16",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a8d3386-881b-4605-b687-1d684f692dc0",
      "parentUUID": "901fa1f6-c277-4c74-ba7c-c5405431a84a",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}