{
  "stats": {
    "suites": 63,
    "tests": 310,
    "passes": 310,
    "pending": 0,
    "failures": 0,
    "start": "2017-02-21T16:45:01.815Z",
    "end": "2017-02-21T16:45:09.195Z",
    "duration": 7380,
    "testsRegistered": 310,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Ansprechpartner",
        "suites": [
          {
            "title": "soll einen Ansprechpartner ändern können",
            "suites": [],
            "tests": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4f1537fa-9a63-445c-a6c9-9b8aac5e9ebd",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "15c921ce-66a4-4b31-92e6-bd426e5725d3",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b873cc96-2e0d-4195-a9f8-da97fbae56cf",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "98f5b25a-7574-402b-93ec-fdfe4c111404",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "25e122ee-aae9-4664-94b8-b706409372e4",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/ansprechpartner.spec.js",
            "uuid": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
            "passes": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4f1537fa-9a63-445c-a6c9-9b8aac5e9ebd",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "15c921ce-66a4-4b31-92e6-bd426e5725d3",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b873cc96-2e0d-4195-a9f8-da97fbae56cf",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "98f5b25a-7574-402b-93ec-fdfe4c111404",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "25e122ee-aae9-4664-94b8-b706409372e4",
                "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 94
          }
        ],
        "tests": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 183,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0356775e-6fa8-4866-964c-daf6417b98ad",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a3083c0f-1db8-4b2b-b839-6a2bfc7cbd9d",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9ff15c06-656f-47a9-8671-6856833f15f0",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7a4722e7-0b4f-4217-99c8-497541281f01",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/ansprechpartner.spec.js",
        "uuid": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
        "passes": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 183,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0356775e-6fa8-4866-964c-daf6417b98ad",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a3083c0f-1db8-4b2b-b839-6a2bfc7cbd9d",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9ff15c06-656f-47a9-8671-6856833f15f0",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7a4722e7-0b4f-4217-99c8-497541281f01",
            "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 254
      },
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cda8c88-c30c-445c-8f82-b414703a2ebf",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cbc516ea-613d-4c76-a726-3aee0b187f72",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c1a53e4d-fb5e-4ff6-adf2-ff13107f85da",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cda8c88-c30c-445c-8f82-b414703a2ebf",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cbc516ea-613d-4c76-a726-3aee0b187f72",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c1a53e4d-fb5e-4ff6-adf2-ff13107f85da",
            "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 29
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 43,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b761190a-6868-4f02-b16c-d9bc60abf0de",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a6879d74-3803-43c8-9378-f0bc18d33f06",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b793eb9-6dc0-4095-b642-6371e07daf44",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fa1182ef-26d5-49ff-8dc2-f8122cf528aa",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "621dedc0-b4b5-40c5-b2fa-1a59ecb62be3",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "090f6b9e-e813-4f6c-b00b-5722957f358e",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4a29713c-55ad-40b5-9097-472b3ac92f54",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 43,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b761190a-6868-4f02-b16c-d9bc60abf0de",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a6879d74-3803-43c8-9378-f0bc18d33f06",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b793eb9-6dc0-4095-b642-6371e07daf44",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fa1182ef-26d5-49ff-8dc2-f8122cf528aa",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "621dedc0-b4b5-40c5-b2fa-1a59ecb62be3",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "090f6b9e-e813-4f6c-b00b-5722957f358e",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4a29713c-55ad-40b5-9097-472b3ac92f54",
            "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 145
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1d40cb3d-4182-459e-b1fb-99281e8e0e89",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "70676fcf-7ee9-4ce4-9280-60b15fbbc1d0",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b3732fe-1b94-40b5-aeef-903479fa90c4",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "433e2ff4-0e6f-485e-ad2a-eb07962b7d69",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3f105a64-fcca-4f28-b550-7a86461a0d41",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 74,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3e30d9c8-bb98-4247-9f73-be93ea021ea4",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6ada7028-97fc-4a06-b9e5-eb1a4d716af2",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2eecc794-3259-40ff-8149-eb9809c01aca",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0878b4ce-f818-4cd5-b64b-ecf7a07fd56b",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11ec569c-0123-4716-a030-cebd196f5dc7",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "063fcd4c-2409-44dc-9730-ecf732406649",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1d40cb3d-4182-459e-b1fb-99281e8e0e89",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "70676fcf-7ee9-4ce4-9280-60b15fbbc1d0",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b3732fe-1b94-40b5-aeef-903479fa90c4",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "433e2ff4-0e6f-485e-ad2a-eb07962b7d69",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3f105a64-fcca-4f28-b550-7a86461a0d41",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 74,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3e30d9c8-bb98-4247-9f73-be93ea021ea4",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6ada7028-97fc-4a06-b9e5-eb1a4d716af2",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2eecc794-3259-40ff-8149-eb9809c01aca",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0878b4ce-f818-4cd5-b64b-ecf7a07fd56b",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11ec569c-0123-4716-a030-cebd196f5dc7",
            "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 301
      },
      {
        "title": "Handlers",
        "suites": [
          {
            "title": "handle Error and send Response",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "dfe4d676-e7e5-494e-93d0-045b59f27df6",
                "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "89506956-5978-4ce9-b6e4-42797e567bc2",
                "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "07f8c215-625d-424f-9fab-539b7b6eb36d",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "dfe4d676-e7e5-494e-93d0-045b59f27df6",
                "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "89506956-5978-4ce9-b6e4-42797e567bc2",
                "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "handle Error and send Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "720758da-e239-4e1c-a2cf-0d443da7db2f",
                "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "ba995ffe-de47-4349-aa9c-7f081300c762",
                "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "720758da-e239-4e1c-a2cf-0d443da7db2f",
                "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "ba995ffe-de47-4349-aa9c-7f081300c762",
                "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "handle Error and send Success-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "bc53dd4d-298f-4fa3-b78d-13dc6e986e08",
                "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "81c511bf-ac9e-4ec1-840a-4a93cdfd94ca",
                "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "92fe9f38-ce6d-4972-be9e-832e8b216625",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "bc53dd4d-298f-4fa3-b78d-13dc6e986e08",
                "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "81c511bf-ac9e-4ec1-840a-4a93cdfd94ca",
                "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "handle Error and send Deleted-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "99c2b371-4ff4-411a-bb7c-37b3d4235db8",
                "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "d3a976a1-1a9a-4265-8fb9-75f9ed1fc7a5",
                "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "99c2b371-4ff4-411a-bb7c-37b3d4235db8",
                "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "d3a976a1-1a9a-4265-8fb9-75f9ed1fc7a5",
                "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "handle Query Response",
            "suites": [],
            "tests": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "9e8a0862-9e5f-4c09-b310-f8adda879947",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "8a60b384-64d5-4ee8-bab2-9cf46106b337",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "20e04092-b789-4b62-b0a6-d08eaf648967",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "db444263-2b56-4c72-9509-a9ad5e004618",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "9e8a0862-9e5f-4c09-b310-f8adda879947",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "8a60b384-64d5-4ee8-bab2-9cf46106b337",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "20e04092-b789-4b62-b0a6-d08eaf648967",
                "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/handler.spec.js",
        "uuid": "29cc9126-2629-4cfe-afef-36580ee3f9c2",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Helpers",
        "suites": [
          {
            "title": "soll die Datenbank query basierend auf Parametern laden",
            "suites": [],
            "tests": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "3da28b8c-2620-43b5-bd2e-d398e558b28c",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "21a08863-3811-4fcf-8b86-a727185307de",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "27bf6399-c883-436d-86d0-b557ac6d7686",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "3433bc42-b5f3-442a-892c-c217bc3a0908",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "aadfde9b-b558-425b-abc5-880a131ca51e",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "bd65817e-b186-4b03-a8e1-dc28afd81152",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "3da28b8c-2620-43b5-bd2e-d398e558b28c",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "21a08863-3811-4fcf-8b86-a727185307de",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "27bf6399-c883-436d-86d0-b557ac6d7686",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "3433bc42-b5f3-442a-892c-c217bc3a0908",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "aadfde9b-b558-425b-abc5-880a131ca51e",
                "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll das Team-Ergebnis zurücksetzen können",
            "suites": [],
            "tests": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "dea957bd-44dd-4829-b899-8ad007b7a6b5",
                "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c2a2ef01-5734-40c2-a23f-4c1dd0e7f273",
                "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "dea957bd-44dd-4829-b899-8ad007b7a6b5",
                "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c2a2ef01-5734-40c2-a23f-4c1dd0e7f273",
                "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll den letzten Slash bei einem Pfad entfernen können",
            "suites": [],
            "tests": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "e7d74788-0b52-4d53-b333-240cb2f1e4b7",
                "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "94aa91a4-d486-4701-900c-bebecf51f535",
                "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "e7d74788-0b52-4d53-b333-240cb2f1e4b7",
                "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "94aa91a4-d486-4701-900c-bebecf51f535",
                "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "soll die Route-Konfiguration laden",
            "suites": [],
            "tests": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6b00a942-8283-499e-b8af-77612fde1a4d",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "96d06c91-8ccc-4417-bcd5-e79ed51e3b3e",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "a21e359b-0b8e-416a-8e0c-a992f44997a3",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ad6fe349-f088-43a5-80b4-c988741399a1",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "342ad158-bcf4-4d32-ae3f-142dbe51d4e5",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "af34c2d0-6929-4761-86c9-8e9c4b658806",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "c593df6d-55b7-4346-a0b9-35388cc4ef74",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "3ce8d7fa-8268-487e-aa00-8900b8712224",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "f89d9d4a-2efa-48d0-88a5-239bffa1f0cc",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "b7aea999-94c1-486c-a907-760421d094d7",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "6b00a942-8283-499e-b8af-77612fde1a4d",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "96d06c91-8ccc-4417-bcd5-e79ed51e3b3e",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "a21e359b-0b8e-416a-8e0c-a992f44997a3",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ad6fe349-f088-43a5-80b4-c988741399a1",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "342ad158-bcf4-4d32-ae3f-142dbe51d4e5",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "af34c2d0-6929-4761-86c9-8e9c4b658806",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "c593df6d-55b7-4346-a0b9-35388cc4ef74",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "3ce8d7fa-8268-487e-aa00-8900b8712224",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "f89d9d4a-2efa-48d0-88a5-239bffa1f0cc",
                "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 9,
            "totalPasses": 9,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4
          },
          {
            "title": "soll den Spielplan auf Korrektheit prüfen",
            "suites": [],
            "tests": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "506e1342-9524-4d56-bce5-2c88bcaa5fa9",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "052d385e-dbf3-4f28-b6f7-4ea12993c31c",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "68cef360-cddc-447e-819e-ed7d57b88ffc",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "449aee65-18ab-44fc-881b-7135bd864bce",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "ea70edba-82ef-41a0-832b-11581b4cc66f",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "506e1342-9524-4d56-bce5-2c88bcaa5fa9",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "052d385e-dbf3-4f28-b6f7-4ea12993c31c",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "68cef360-cddc-447e-819e-ed7d57b88ffc",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "449aee65-18ab-44fc-881b-7135bd864bce",
                "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          }
        ],
        "tests": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "3ced131e-e14f-4c64-80c9-823d35118cf9",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "8995cc6d-7339-4026-952a-e1a2f5bf0ccd",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "a10dd05f-0e98-4068-911a-be2ff817101c",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "3fe5e7d6-9c14-4841-9bc3-d46d54943d1c",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "51ea1ae7-ab02-4379-adbe-5ef864fa425b",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/helpers.spec.js",
        "uuid": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
        "passes": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "3ced131e-e14f-4c64-80c9-823d35118cf9",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "8995cc6d-7339-4026-952a-e1a2f5bf0ccd",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "a10dd05f-0e98-4068-911a-be2ff817101c",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "3fe5e7d6-9c14-4841-9bc3-d46d54943d1c",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "51ea1ae7-ab02-4379-adbe-5ef864fa425b",
            "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8f797727-7b31-44cc-a306-52bfbb0fea05",
            "parentUUID": "8fbafc97-9a08-4eed-9bc5-c7f0e845d3e6",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "8fbafc97-9a08-4eed-9bc5-c7f0e845d3e6",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8f797727-7b31-44cc-a306-52bfbb0fea05",
            "parentUUID": "8fbafc97-9a08-4eed-9bc5-c7f0e845d3e6",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 39
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "961c3825-f491-4d79-9029-cc17d9546085",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f8c0ab98-7468-4a20-96b3-c6703167da3e",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9bc33027-aebb-437b-8a83-2424bf9f3220",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "93f1e03e-d02e-4ede-a16f-6f3851dbee9c",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9fc5e938-c33d-4380-9e3e-399ad8bc5da5",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fb7fc9d6-4c6c-4ac4-8888-4679d0b40f0d",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 154,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eddd95f7-73eb-4b4f-bc62-b8f6aa2e4de0",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "343b5dc2-3f6f-40d6-8705-bcc95c3154c9",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2418dc2c-313c-40d9-9c60-391d7814f601",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "961c3825-f491-4d79-9029-cc17d9546085",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f8c0ab98-7468-4a20-96b3-c6703167da3e",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9bc33027-aebb-437b-8a83-2424bf9f3220",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "93f1e03e-d02e-4ede-a16f-6f3851dbee9c",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9fc5e938-c33d-4380-9e3e-399ad8bc5da5",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fb7fc9d6-4c6c-4ac4-8888-4679d0b40f0d",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 154,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eddd95f7-73eb-4b4f-bc62-b8f6aa2e4de0",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "343b5dc2-3f6f-40d6-8705-bcc95c3154c9",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2418dc2c-313c-40d9-9c60-391d7814f601",
            "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 348
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e02fdbdc-626f-48bc-a228-1335ff9344a9",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ea9612d-d28f-49fc-b953-1191b577317c",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "07251029-9d98-4b22-931e-e1a3e78fa51b",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "63ce3bb1-b3bc-4ef8-9666-4ba6f6a4fdc9",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c597d18-01b9-48d4-a776-21f6aec58e61",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47a61c30-e87f-4a7d-ba9b-f5e4ebf5c859",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9ef9997-83d2-4d6e-9cd3-611a2d970589",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d8d5fa1e-1ae6-43b9-b7f6-2bb3ebfb2639",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cba42bc2-208c-4057-b239-4579944ee353",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d74dda95-f0cc-4791-b1fb-d3b95c38e7ab",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eac55594-64d3-4fed-9962-9f052daf08a8",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bad80b6f-e128-457e-b9bc-5e9bafa29a47",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4c47a11c-9fb7-40fd-8040-c7ec687469f1",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0a8e2843-5d60-4492-ba88-e079a16ca55d",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "98cfe4fd-d70a-4244-852b-2e651e12cb9d",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d4541b3d-1031-4207-9a64-dbe1c77e8584",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "368e5182-1841-4339-836c-348610512fa8",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e02fdbdc-626f-48bc-a228-1335ff9344a9",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2ea9612d-d28f-49fc-b953-1191b577317c",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "07251029-9d98-4b22-931e-e1a3e78fa51b",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "63ce3bb1-b3bc-4ef8-9666-4ba6f6a4fdc9",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c597d18-01b9-48d4-a776-21f6aec58e61",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47a61c30-e87f-4a7d-ba9b-f5e4ebf5c859",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9ef9997-83d2-4d6e-9cd3-611a2d970589",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d8d5fa1e-1ae6-43b9-b7f6-2bb3ebfb2639",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cba42bc2-208c-4057-b239-4579944ee353",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d74dda95-f0cc-4791-b1fb-d3b95c38e7ab",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eac55594-64d3-4fed-9962-9f052daf08a8",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bad80b6f-e128-457e-b9bc-5e9bafa29a47",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4c47a11c-9fb7-40fd-8040-c7ec687469f1",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0a8e2843-5d60-4492-ba88-e079a16ca55d",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "98cfe4fd-d70a-4244-852b-2e651e12cb9d",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d4541b3d-1031-4207-9a64-dbe1c77e8584",
            "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 16,
        "totalPasses": 16,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 353
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "714162c2-044f-494f-b841-c4e99ddb1495",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bc350ed4-9e5e-439d-971b-cf37c904cec0",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9baa6d39-383b-452a-b067-4ebdc4cd14a4",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "44d5c6ac-c81a-41aa-9c2a-82d92686a51e",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "409384c2-b33d-480b-92a4-a30b8db7d058",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 409,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4a1797ce-48b0-4a41-a585-933c2fbee400",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "714162c2-044f-494f-b841-c4e99ddb1495",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bc350ed4-9e5e-439d-971b-cf37c904cec0",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9baa6d39-383b-452a-b067-4ebdc4cd14a4",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "44d5c6ac-c81a-41aa-9c2a-82d92686a51e",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "409384c2-b33d-480b-92a4-a30b8db7d058",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 409,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4a1797ce-48b0-4a41-a585-933c2fbee400",
            "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 646
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a753e5d-382b-4164-9056-e7e88839b257",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "edc0ec06-5258-49c3-b8b8-c5a932bf487e",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "08bf2611-746a-4be1-b14e-00bc615cb39a",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b43b789-e401-41f5-9d18-6df76b200278",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d64c0972-d5bd-4128-b7f9-21de42e205e9",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2cc21062-5cfc-4215-bb85-856d128b16ff",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "32eb8a2a-2d31-4f3d-ac63-8f978a27b8cb",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b47c77ad-faed-47c8-a06b-b392d8a28062",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "10a4ccbe-cba8-4966-9319-928aa5200a6a",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15afcecf-478c-49d0-9694-18140064a5fd",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2bbaf640-9db9-47d3-bce4-4e007b449196",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a753e5d-382b-4164-9056-e7e88839b257",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "edc0ec06-5258-49c3-b8b8-c5a932bf487e",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "08bf2611-746a-4be1-b14e-00bc615cb39a",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b43b789-e401-41f5-9d18-6df76b200278",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d64c0972-d5bd-4128-b7f9-21de42e205e9",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2cc21062-5cfc-4215-bb85-856d128b16ff",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "32eb8a2a-2d31-4f3d-ac63-8f978a27b8cb",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b47c77ad-faed-47c8-a06b-b392d8a28062",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "10a4ccbe-cba8-4966-9319-928aa5200a6a",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "15afcecf-478c-49d0-9694-18140064a5fd",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2bbaf640-9db9-47d3-bce4-4e007b449196",
            "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 386
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 122,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "803e1d5d-dffd-4110-888c-3e67d6826ffb",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "67c00df2-9c68-4568-b795-1ba7af6b58a3",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8f39e8b3-4df2-4dc4-825d-91f3526dfb91",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1ed1ba48-b78d-4a50-ac6d-05a932d6f7b6",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ba308dc0-b4d8-4ff0-b207-aa813161f132",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "64152ffb-b031-4678-a774-240c753d2375",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dca9c764-124a-4403-951f-9fa3873f05d9",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "87bc991b-5480-470b-8e4c-e465cc789300",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b9dc6acd-1937-4aaa-bdf4-637af4cd5b1b",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "00c232ef-93f9-40c0-8deb-fadd08a1ee5f",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b061f850-f343-4c6b-8271-b908451f9911",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "19c65532-b987-454f-b915-531f30820792",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c9d38a09-28ad-44ee-9d7f-f9dd69855ecb",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2d61304-203f-45f3-a4f6-9c81ae24b993",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "28aae3aa-9292-43bf-b2aa-e6e61195c2f9",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05ca0cea-acb8-47eb-aca6-cc91ca2a197e",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d374758e-bf40-4949-bd47-874b0712941c",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "78347ccb-d112-4066-b52a-3958f1e81099",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 122,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "803e1d5d-dffd-4110-888c-3e67d6826ffb",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "67c00df2-9c68-4568-b795-1ba7af6b58a3",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8f39e8b3-4df2-4dc4-825d-91f3526dfb91",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1ed1ba48-b78d-4a50-ac6d-05a932d6f7b6",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ba308dc0-b4d8-4ff0-b207-aa813161f132",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "64152ffb-b031-4678-a774-240c753d2375",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dca9c764-124a-4403-951f-9fa3873f05d9",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "87bc991b-5480-470b-8e4c-e465cc789300",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b9dc6acd-1937-4aaa-bdf4-637af4cd5b1b",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "00c232ef-93f9-40c0-8deb-fadd08a1ee5f",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b061f850-f343-4c6b-8271-b908451f9911",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "19c65532-b987-454f-b915-531f30820792",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c9d38a09-28ad-44ee-9d7f-f9dd69855ecb",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2d61304-203f-45f3-a4f6-9c81ae24b993",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "28aae3aa-9292-43bf-b2aa-e6e61195c2f9",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05ca0cea-acb8-47eb-aca6-cc91ca2a197e",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d374758e-bf40-4949-bd47-874b0712941c",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "78347ccb-d112-4066-b52a-3958f1e81099",
            "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 298
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ddc072ee-1e26-4e4d-b60d-e8c8cf0f82c5",
                "parentUUID": "520f109d-6b1c-4345-9bca-3bd5b406f2e2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "520f109d-6b1c-4345-9bca-3bd5b406f2e2",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ddc072ee-1e26-4e4d-b60d-e8c8cf0f82c5",
                "parentUUID": "520f109d-6b1c-4345-9bca-3bd5b406f2e2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 101
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f09c11dc-0241-413c-b9c9-cd18d76fac77",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "345b690f-1254-475f-9087-c6945325676e",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cd586bcc-8473-4f73-872b-b12502159e00",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77cf4b17-e846-402c-9ddd-94e526ad57e5",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f76d2a3f-fbc0-48bd-8dd5-b93375c4f28a",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9788866a-4325-447a-89fc-df1ce82b016c",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "677d9167-3e8f-4081-a631-6c03ab37a03d",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f09c11dc-0241-413c-b9c9-cd18d76fac77",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "345b690f-1254-475f-9087-c6945325676e",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cd586bcc-8473-4f73-872b-b12502159e00",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77cf4b17-e846-402c-9ddd-94e526ad57e5",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f76d2a3f-fbc0-48bd-8dd5-b93375c4f28a",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9788866a-4325-447a-89fc-df1ce82b016c",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "677d9167-3e8f-4081-a631-6c03ab37a03d",
                "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 280
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7e8a2e0-2413-4a45-acfe-246b87704af6",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b84fe2c7-2400-4f7b-b577-3ab99a1563d7",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bebd443c-5202-49ed-a169-1c2533655624",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7e8a2e0-2413-4a45-acfe-246b87704af6",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b84fe2c7-2400-4f7b-b577-3ab99a1563d7",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bebd443c-5202-49ed-a169-1c2533655624",
                    "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 54
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c78af852-6e4c-45da-9d62-b7916dd9990b",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d5656e8-5153-43a5-8c28-8f1e576ee294",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 246,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ac70ead-fc97-47f4-98e4-50a08343b305",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "91097994-0133-4871-a25e-217c2d55fa83",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c78af852-6e4c-45da-9d62-b7916dd9990b",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d5656e8-5153-43a5-8c28-8f1e576ee294",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 246,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ac70ead-fc97-47f4-98e4-50a08343b305",
                    "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 266
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7899526c-2c59-4725-87ed-83dc192f43ee",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "099c87f0-290a-44b4-8a00-4ce294f5ec45",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a90b71f-9514-4111-9055-6d668e7044a6",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f404ec44-53a0-4afe-b6ba-df71425c0895",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4be78757-3e35-4abe-accb-86647fb5cca5",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ce36bd1-8077-4592-99f2-759309315556",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7899526c-2c59-4725-87ed-83dc192f43ee",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "099c87f0-290a-44b4-8a00-4ce294f5ec45",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a90b71f-9514-4111-9055-6d668e7044a6",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f404ec44-53a0-4afe-b6ba-df71425c0895",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4be78757-3e35-4abe-accb-86647fb5cca5",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ce36bd1-8077-4592-99f2-759309315556",
                    "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 120
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3e28d64-5009-42b5-9c88-4704903fecdc",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41216e27-d92a-4133-b7e3-6b9f6f35b78f",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f105ffd-7b10-4514-8412-71e4b0d0ac3f",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e7f077c-7c9a-4411-92d2-28830940fb72",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86abea01-8c9d-4672-81ab-9104328392ff",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ee9e224-f1ce-4457-b3ef-4b36a719e2e0",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9964e559-d090-47ac-8711-f2de0299c6a9",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39326e22-8e32-4b5f-a34f-5e5d4f08afae",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83d14ad4-2816-430e-9075-350567d63fe5",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3e28d64-5009-42b5-9c88-4704903fecdc",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41216e27-d92a-4133-b7e3-6b9f6f35b78f",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f105ffd-7b10-4514-8412-71e4b0d0ac3f",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e7f077c-7c9a-4411-92d2-28830940fb72",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86abea01-8c9d-4672-81ab-9104328392ff",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ee9e224-f1ce-4457-b3ef-4b36a719e2e0",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9964e559-d090-47ac-8711-f2de0299c6a9",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39326e22-8e32-4b5f-a34f-5e5d4f08afae",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83d14ad4-2816-430e-9075-350567d63fe5",
                    "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 253
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb2e037b-7883-4c51-ade8-1c816431b184",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b871838-40dc-4644-9d26-fb0526d1fa0f",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "042e3a5c-cbac-490f-9ad0-b05b489d0465",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93d138be-1786-4916-8ce8-bf9a7988d55a",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9362bc88-d40a-46cb-ad65-d729688dcb83",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1afdf8f-ddca-41ff-9fdd-b7511116b0fb",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00a5f757-d477-423d-ad77-5351005d23f9",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddc24a39-e262-43d3-bc62-093416388d01",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ec8db6c-89d6-4630-b221-74e9366268eb",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f335ac0-02a2-41f6-85d3-40d8ff01bc6d",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df9c97bc-0542-491a-a47c-39e87f518822",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a901819-362a-40dc-9d90-efcbf3edf85c",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb2e037b-7883-4c51-ade8-1c816431b184",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b871838-40dc-4644-9d26-fb0526d1fa0f",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "042e3a5c-cbac-490f-9ad0-b05b489d0465",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93d138be-1786-4916-8ce8-bf9a7988d55a",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9362bc88-d40a-46cb-ad65-d729688dcb83",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1afdf8f-ddca-41ff-9fdd-b7511116b0fb",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00a5f757-d477-423d-ad77-5351005d23f9",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddc24a39-e262-43d3-bc62-093416388d01",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ec8db6c-89d6-4630-b221-74e9366268eb",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f335ac0-02a2-41f6-85d3-40d8ff01bc6d",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df9c97bc-0542-491a-a47c-39e87f518822",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a901819-362a-40dc-9d90-efcbf3edf85c",
                    "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 342
              },
              {
                "title": "die Route /api/jugenden soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0e14147-51fa-4696-9434-a74642d30b22",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92cbd17b-0088-4c1f-88e6-19c77487f0dd",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6f9277b-e355-48f4-bbde-af598939be6f",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e3ebc0d-5dd0-4191-9fcf-ccda41dcd56f",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84fa7149-96df-4792-a210-2eded167e186",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "385ce38f-b039-4e16-83b9-17249171f7a3",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0e14147-51fa-4696-9434-a74642d30b22",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92cbd17b-0088-4c1f-88e6-19c77487f0dd",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6f9277b-e355-48f4-bbde-af598939be6f",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e3ebc0d-5dd0-4191-9fcf-ccda41dcd56f",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84fa7149-96df-4792-a210-2eded167e186",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "385ce38f-b039-4e16-83b9-17249171f7a3",
                    "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 190
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1972dfca-3bb7-4c7e-a1a3-111603ac1b94",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d7de863-2c42-4fca-9c61-d589e7228f85",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d48fcadb-44c3-4045-8484-4f480cb3c9df",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e018430-5b16-4c7c-bb4f-36156d9c0388",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e91cbf7c-0685-49a4-981b-1e68f824804f",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d7d751c-21cf-485b-92b6-962a35ad2f58",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1972dfca-3bb7-4c7e-a1a3-111603ac1b94",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d7de863-2c42-4fca-9c61-d589e7228f85",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d48fcadb-44c3-4045-8484-4f480cb3c9df",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e018430-5b16-4c7c-bb4f-36156d9c0388",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e91cbf7c-0685-49a4-981b-1e68f824804f",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d7d751c-21cf-485b-92b6-962a35ad2f58",
                    "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 151
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "108fed7a-b485-4aba-a343-af5ebc70ea99",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27708292-6b30-469f-9d7c-995d468710ff",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dbbf57c-bf53-4dc4-85e1-0010f349ea71",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe767e64-e706-4d6f-8909-6d837647c93e",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea334be9-958e-41da-aaea-d36593c44472",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15981f56-7b6a-4cd9-91b0-6c176ca86caa",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a52e230-895b-42e2-bd5a-466c8ea43405",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15cbaa7d-1dd9-4994-b097-1cd7f860231d",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0be533aa-c992-4522-9a9c-2cbf05c87cd9",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f1fe7ee-3814-46c9-961f-b9ddeb927c29",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "670301fe-b10a-4f11-8f8f-c7502272e5ee",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f0a31e1-6077-4c7c-b365-5bd6683aadd9",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "108fed7a-b485-4aba-a343-af5ebc70ea99",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27708292-6b30-469f-9d7c-995d468710ff",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dbbf57c-bf53-4dc4-85e1-0010f349ea71",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe767e64-e706-4d6f-8909-6d837647c93e",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea334be9-958e-41da-aaea-d36593c44472",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15981f56-7b6a-4cd9-91b0-6c176ca86caa",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a52e230-895b-42e2-bd5a-466c8ea43405",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15cbaa7d-1dd9-4994-b097-1cd7f860231d",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0be533aa-c992-4522-9a9c-2cbf05c87cd9",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f1fe7ee-3814-46c9-961f-b9ddeb927c29",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "670301fe-b10a-4f11-8f8f-c7502272e5ee",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f0a31e1-6077-4c7c-b365-5bd6683aadd9",
                    "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 227
              },
              {
                "title": "die Route /api/spiele/order soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "780c6121-5945-45e9-bc08-ca487f351268",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85fbfcbb-b4ba-4890-806a-be3597b1d0cf",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7a94bcd-5a3e-4357-8c64-639f15ee6418",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b6d34d6-dda5-467b-ac39-ea9124b5ccec",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7f897e7-f1ad-48bf-83e6-4cbcb9e5da07",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4e5a150-82ce-4628-a81a-320570d9222c",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb63e998-60c5-4634-9f99-80d2d0012eee",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48df4c9e-a198-4290-b384-fa260118a054",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0eb6b331-8059-423e-ad48-d9fa4e5fff63",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8ab69ea-bde0-47bc-b038-9fe71e3cb53d",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f77ffac2-26eb-4915-87c6-26e8eaf49397",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18308bf3-bd5d-4e57-9f43-83192bd7baf9",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "780c6121-5945-45e9-bc08-ca487f351268",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85fbfcbb-b4ba-4890-806a-be3597b1d0cf",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7a94bcd-5a3e-4357-8c64-639f15ee6418",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b6d34d6-dda5-467b-ac39-ea9124b5ccec",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7f897e7-f1ad-48bf-83e6-4cbcb9e5da07",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4e5a150-82ce-4628-a81a-320570d9222c",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb63e998-60c5-4634-9f99-80d2d0012eee",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48df4c9e-a198-4290-b384-fa260118a054",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0eb6b331-8059-423e-ad48-d9fa4e5fff63",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8ab69ea-bde0-47bc-b038-9fe71e3cb53d",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f77ffac2-26eb-4915-87c6-26e8eaf49397",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18308bf3-bd5d-4e57-9f43-83192bd7baf9",
                    "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 289
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0862e34-5159-4098-8b7e-d03b49789b37",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a4481b5-ca89-4272-ad66-8e2355934ed2",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3c1f623-af97-4c18-9ef8-7a2fe3b3980c",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "746d1b80-0197-4e82-a9b9-cabeda3f7867",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d3978cf-d0de-4b3f-9927-9689899d39d4",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "039cc625-0567-4aa1-995b-96ba2acdce8a",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "edf36444-649e-4775-bee0-af4ea85da34c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0862e34-5159-4098-8b7e-d03b49789b37",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a4481b5-ca89-4272-ad66-8e2355934ed2",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3c1f623-af97-4c18-9ef8-7a2fe3b3980c",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "746d1b80-0197-4e82-a9b9-cabeda3f7867",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d3978cf-d0de-4b3f-9927-9689899d39d4",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "039cc625-0567-4aa1-995b-96ba2acdce8a",
                    "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 137
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62c0834e-ca5d-45b4-9d54-581f4098d5b8",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f76cb913-ad1c-4de8-8034-1bd69ba19b2f",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 181,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d7eabcf-a460-4a91-8c55-6a07ae8734b3",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62c0834e-ca5d-45b4-9d54-581f4098d5b8",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f76cb913-ad1c-4de8-8034-1bd69ba19b2f",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 181,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d7eabcf-a460-4a91-8c55-6a07ae8734b3",
                    "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 203
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18dadf9a-8eba-4cb6-a56d-57caa42c1c2b",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73acef05-6d15-4e02-885f-7d9c09dcf522",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2108390c-2d4a-4a28-9781-e6d79d5323b7",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18dadf9a-8eba-4cb6-a56d-57caa42c1c2b",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73acef05-6d15-4e02-885f-7d9c09dcf522",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2108390c-2d4a-4a28-9781-e6d79d5323b7",
                    "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 52
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58e99cb4-48df-4f2e-b8ee-d87c63de5d20",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8c5f39e-8967-42a3-b662-2862da7c4dff",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aae11f9a-b062-4532-922a-2900a9b1fb32",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fbd38cf-429f-4813-8885-3851699dde42",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cfed341-8dd6-4587-956b-11a56bc8c6cf",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f43ae406-566f-4795-8fa5-695c4d3eb8d5",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c3b391a-9246-489e-9238-25c4c214e6cf",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "933c66b3-e8a5-4662-bd61-174670df79cc",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05dceb56-64ef-4a6f-aabc-71713c8c39f5",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da43e72a-33e1-434a-b617-72f672c1eeb2",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "956ff56e-ebd1-4abf-ab42-2a18681b67ea",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a18ed7b-798c-4868-a518-1f3dffd0e872",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58e99cb4-48df-4f2e-b8ee-d87c63de5d20",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8c5f39e-8967-42a3-b662-2862da7c4dff",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aae11f9a-b062-4532-922a-2900a9b1fb32",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fbd38cf-429f-4813-8885-3851699dde42",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cfed341-8dd6-4587-956b-11a56bc8c6cf",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f43ae406-566f-4795-8fa5-695c4d3eb8d5",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c3b391a-9246-489e-9238-25c4c214e6cf",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "933c66b3-e8a5-4662-bd61-174670df79cc",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05dceb56-64ef-4a6f-aabc-71713c8c39f5",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da43e72a-33e1-434a-b617-72f672c1eeb2",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "956ff56e-ebd1-4abf-ab42-2a18681b67ea",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a18ed7b-798c-4868-a518-1f3dffd0e872",
                    "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 122
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54c363d5-016a-439d-b893-90dbff40601d",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fbef374-6b0e-4eeb-b32e-e68d3b5f85f0",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f29e31bb-2aa2-4989-9fb4-7c50f10b0e03",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9713f90b-c774-4c24-ac50-82b19579f3ea",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f736d948-49bf-4cb4-83d9-b7791e228d04",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "514d0d9d-994a-4cbb-8e4c-d63fc5303320",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b57c9951-e992-49a9-a11e-688f078624d5",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6982d85d-289e-42fb-8be5-28bb52db0f30",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b6c9cf1-219b-4ed0-a108-83e1742c8467",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "028f6991-7267-4d67-96b9-94fcaf64f50b",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "beead3f4-4418-4173-b0d9-9224d22f0c06",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0349677-7468-460e-b5b0-8c340caa3db8",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54c363d5-016a-439d-b893-90dbff40601d",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fbef374-6b0e-4eeb-b32e-e68d3b5f85f0",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f29e31bb-2aa2-4989-9fb4-7c50f10b0e03",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9713f90b-c774-4c24-ac50-82b19579f3ea",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f736d948-49bf-4cb4-83d9-b7791e228d04",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "514d0d9d-994a-4cbb-8e4c-d63fc5303320",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b57c9951-e992-49a9-a11e-688f078624d5",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6982d85d-289e-42fb-8be5-28bb52db0f30",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b6c9cf1-219b-4ed0-a108-83e1742c8467",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "028f6991-7267-4d67-96b9-94fcaf64f50b",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "beead3f4-4418-4173-b0d9-9224d22f0c06",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0349677-7468-460e-b5b0-8c340caa3db8",
                    "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 93
              },
              {
                "title": "die Route /api/users/userDetails soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b91c7d6-b526-41b6-9b93-e6880c28d22b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f66dad70-7277-4c2d-9f8f-ac1b0d7d2772",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ec1d9a8-cfc5-4678-a12d-037f59dabdec",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ead6222-f803-4121-af76-652fe12ba18b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e5a9074-f6b8-4392-a2ab-b18b36d9e114",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "604bce42-eb33-4e22-b18b-bf3d3a661e15",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4108c1b1-2281-46ff-a524-88162198b03a",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3af36b94-3b91-4847-9710-399eee29786c",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1dac59d8-aae2-44a8-8937-2ff67ad726ad",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe8aceee-f0be-4b83-8a9f-4d2c45a10e7b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "263589ce-0fc2-4574-a642-3bd6949738ed",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "954b6383-94d5-4c4d-92b2-0b79a57f3307",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "5f7805de-19be-4752-a858-489b5b5431b2",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b91c7d6-b526-41b6-9b93-e6880c28d22b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f66dad70-7277-4c2d-9f8f-ac1b0d7d2772",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ec1d9a8-cfc5-4678-a12d-037f59dabdec",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ead6222-f803-4121-af76-652fe12ba18b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e5a9074-f6b8-4392-a2ab-b18b36d9e114",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "604bce42-eb33-4e22-b18b-bf3d3a661e15",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4108c1b1-2281-46ff-a524-88162198b03a",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3af36b94-3b91-4847-9710-399eee29786c",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1dac59d8-aae2-44a8-8937-2ff67ad726ad",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe8aceee-f0be-4b83-8a9f-4d2c45a10e7b",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "263589ce-0fc2-4574-a642-3bd6949738ed",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "954b6383-94d5-4c4d-92b2-0b79a57f3307",
                    "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 91
              },
              {
                "title": "die Route /api/ansprechpartner soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e564cc3-0eae-4ccd-8b6f-58dc0a11ceae",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c916387-ddd9-4a7a-b918-293ec667f95b",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ab98c6d-8d01-4066-9e88-a6c2885c3360",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2db6810c-4c2f-4ad7-8dd1-3994889173a8",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83df58a9-bd00-4f44-80a6-814898784589",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "045f82ed-f5fb-4e7d-bb8d-4028c64efca2",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6a4d8fa-7d80-4470-849b-994e23cb398b",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa27f3d1-5dae-4e04-b866-b5d59dec4c96",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78120b77-0721-4f12-80d1-14468ff8b992",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e564cc3-0eae-4ccd-8b6f-58dc0a11ceae",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c916387-ddd9-4a7a-b918-293ec667f95b",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ab98c6d-8d01-4066-9e88-a6c2885c3360",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2db6810c-4c2f-4ad7-8dd1-3994889173a8",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83df58a9-bd00-4f44-80a6-814898784589",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "045f82ed-f5fb-4e7d-bb8d-4028c64efca2",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6a4d8fa-7d80-4470-849b-994e23cb398b",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa27f3d1-5dae-4e04-b866-b5d59dec4c96",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78120b77-0721-4f12-80d1-14468ff8b992",
                    "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 61
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "66423dd8-c2f7-44d8-9545-27429631d01b",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/authorization.spec.js",
        "uuid": "d68e7913-67c3-4839-a3cf-f5802eb76ed4",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Bad Request Handler",
        "suites": [
          {
            "title": "es soll geprüft werden ob benötigte Parameter vorhanden sind",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6c8f9f08-a940-4a89-85db-2e461a0509b1",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "03347a0b-c185-4a93-805c-7ad71195c8b4",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "882428d2-5399-4cf6-8ec4-9b4cb256e697",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "27f38d45-ff7d-4854-aea6-1d9510967333",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6c8f9f08-a940-4a89-85db-2e461a0509b1",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "03347a0b-c185-4a93-805c-7ad71195c8b4",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "882428d2-5399-4cf6-8ec4-9b4cb256e697",
                "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 46
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bb20aa1-985e-42b7-bcbc-8d31341d63c1",
                    "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3eea3ac-59dd-4216-9cda-aae0c91dcdc9",
                    "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bb20aa1-985e-42b7-bcbc-8d31341d63c1",
                    "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3eea3ac-59dd-4216-9cda-aae0c91dcdc9",
                    "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 18
              },
              {
                "title": "die Route /api/email/subscriber hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d28bf1e-4342-44e7-81b8-a4b8def6e419",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55de18bd-16a9-4a29-9ff7-bf7024bf6656",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03727117-4724-4f0d-836c-c682e7299331",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2caedcd5-6e1f-4fe9-8fea-242b55a155c6",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d28bf1e-4342-44e7-81b8-a4b8def6e419",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55de18bd-16a9-4a29-9ff7-bf7024bf6656",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03727117-4724-4f0d-836c-c682e7299331",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2caedcd5-6e1f-4fe9-8fea-242b55a155c6",
                    "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 16
              },
              {
                "title": "die Route /api/email/bug hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34871cae-64eb-4f91-aed9-58801d574d3b",
                    "parentUUID": "af67b4f5-473e-46f5-98e8-49539503ca77",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "af67b4f5-473e-46f5-98e8-49539503ca77",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34871cae-64eb-4f91-aed9-58801d574d3b",
                    "parentUUID": "af67b4f5-473e-46f5-98e8-49539503ca77",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              },
              {
                "title": "die Route /api/gruppen hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "792eaa59-41f3-4c2c-9a67-b127df29be9a",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bac8f7d-46d2-419a-9947-f7b492f93b52",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c3ef385-db4a-4f37-a110-3df774734e67",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "792eaa59-41f3-4c2c-9a67-b127df29be9a",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bac8f7d-46d2-419a-9947-f7b492f93b52",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c3ef385-db4a-4f37-a110-3df774734e67",
                    "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 13
              },
              {
                "title": "die Route /api/teams hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "731291b5-0823-4865-a9ee-30c513190a48",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "877d2864-ac8b-4f53-8522-d614970ef4a4",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b00436dc-8aef-4865-9ddf-87eda2981177",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "881da3f1-d126-4277-bdeb-313fa8cf50be",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8aee37e-83a8-4565-a97b-73cb701a95c4",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "731291b5-0823-4865-a9ee-30c513190a48",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "877d2864-ac8b-4f53-8522-d614970ef4a4",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b00436dc-8aef-4865-9ddf-87eda2981177",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "881da3f1-d126-4277-bdeb-313fa8cf50be",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8aee37e-83a8-4565-a97b-73cb701a95c4",
                    "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 31
              },
              {
                "title": "die Route /api/jugenden hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b47b25cb-e9a0-4039-bb98-d4e498ace521",
                    "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "486a40e0-515a-4668-8cfb-914d468cdab1",
                    "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "e5399f3f-409a-4412-a724-bba55ca0cee5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b47b25cb-e9a0-4039-bb98-d4e498ace521",
                    "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "486a40e0-515a-4668-8cfb-914d468cdab1",
                    "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 17
              },
              {
                "title": "die Route /api/spiele hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c47708a5-d80f-4a6e-9d6f-423304d90315",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fb54e29-7d36-44cb-83d2-5de45d2285cb",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f8e17ab-313e-4ff7-b9ed-94297ff76105",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c47708a5-d80f-4a6e-9d6f-423304d90315",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fb54e29-7d36-44cb-83d2-5de45d2285cb",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f8e17ab-313e-4ff7-b9ed-94297ff76105",
                    "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 19
              },
              {
                "title": "die Route /api/spiele/tore hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2fbdc92-1d3d-4ba1-8fae-ea48678be195",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dca4f8a-fe37-4594-8616-b6a1f1db2db5",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b75e523-930d-4da7-a2df-444450875a1f",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bec4772c-588a-4fc9-823c-f2df3140711a",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2fbdc92-1d3d-4ba1-8fae-ea48678be195",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dca4f8a-fe37-4594-8616-b6a1f1db2db5",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b75e523-930d-4da7-a2df-444450875a1f",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bec4772c-588a-4fc9-823c-f2df3140711a",
                    "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              },
              {
                "title": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3bb6d77-81d3-40fb-8be6-7e6d4de666c0",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d915384-113e-4741-bd9c-b5e72403f1c5",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51b22db1-e90a-4c12-8f29-9404cb77ac60",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3bb6d77-81d3-40fb-8be6-7e6d4de666c0",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d915384-113e-4741-bd9c-b5e72403f1c5",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51b22db1-e90a-4c12-8f29-9404cb77ac60",
                    "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              },
              {
                "title": "die Route /api/users/register hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11de2472-a50b-46fc-929c-bc7a6da7cd86",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92acbd10-bb63-4101-9881-3356b37cd4be",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35d4a860-e38f-4ab6-a9b9-dfb4315f2d2b",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "69efdcc9-2fd3-41c4-9626-94d868402346",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11de2472-a50b-46fc-929c-bc7a6da7cd86",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92acbd10-bb63-4101-9881-3356b37cd4be",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35d4a860-e38f-4ab6-a9b9-dfb4315f2d2b",
                    "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 28
              },
              {
                "title": "die Route /api/users/login hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4aec2856-349b-4d8b-8a07-b0d8552c594f",
                    "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d015fd23-ac08-4206-93f0-4d316edb84c7",
                    "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4aec2856-349b-4d8b-8a07-b0d8552c594f",
                    "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d015fd23-ac08-4206-93f0-4d316edb84c7",
                    "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 10
              },
              {
                "title": "die Route /api/users/delete hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efaf5817-009e-4eac-b26d-7deb8987e6a6",
                    "parentUUID": "6f2027a9-e3d0-45f5-b0c1-c70942ebd1af",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "6f2027a9-e3d0-45f5-b0c1-c70942ebd1af",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efaf5817-009e-4eac-b26d-7deb8987e6a6",
                    "parentUUID": "6f2027a9-e3d0-45f5-b0c1-c70942ebd1af",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5
              },
              {
                "title": "die Route /api/users/password-forgot hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c50a6bd1-1355-46b9-86d3-c1274e6b0200",
                    "parentUUID": "746d9cbc-58f3-4a1c-b913-09efcb2be9cf",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "746d9cbc-58f3-4a1c-b913-09efcb2be9cf",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c50a6bd1-1355-46b9-86d3-c1274e6b0200",
                    "parentUUID": "746d9cbc-58f3-4a1c-b913-09efcb2be9cf",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 7
              },
              {
                "title": "die Route /api/users/password-reset/check hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e550216-ad43-4273-bf80-a1f14456c6d0",
                    "parentUUID": "5bfbfb96-bfca-4357-a233-0b0704a732d7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "5bfbfb96-bfca-4357-a233-0b0704a732d7",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e550216-ad43-4273-bf80-a1f14456c6d0",
                    "parentUUID": "5bfbfb96-bfca-4357-a233-0b0704a732d7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 4
              },
              {
                "title": "die Route /api/users/password-reset hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed238f6f-de43-40cf-b957-cd0ab54de993",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0e70d48-32ac-4e5e-9c1e-2bda2ec320e2",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77e0b5b6-e216-4783-ac12-a8759c60a189",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed238f6f-de43-40cf-b957-cd0ab54de993",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0e70d48-32ac-4e5e-9c1e-2bda2ec320e2",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77e0b5b6-e216-4783-ac12-a8759c60a189",
                    "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 10
              },
              {
                "title": "die Route /api/users/userDetails hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c839254-426a-42b4-8011-725322498769",
                    "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4eb35e4f-319d-456a-9116-2d0ac2bcea3f",
                    "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "5e0af47b-bd23-4cbb-b406-699d21005315",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c839254-426a-42b4-8011-725322498769",
                    "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4eb35e4f-319d-456a-9116-2d0ac2bcea3f",
                    "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 32
              },
              {
                "title": "die Route /api/ansprechpartner hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0b10e03-9542-453f-84a4-9d58e60d4832",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1804013d-6724-44d8-9c91-a49c46f10741",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c84d515-3893-4770-8147-570c18f51ba2",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5894738c-34b7-4961-acd5-5f5c0378d1a5",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c43e33c-13c8-4b05-9d7d-aa56128eb41b",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0b10e03-9542-453f-84a4-9d58e60d4832",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1804013d-6724-44d8-9c91-a49c46f10741",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c84d515-3893-4770-8147-570c18f51ba2",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5894738c-34b7-4961-acd5-5f5c0378d1a5",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c43e33c-13c8-4b05-9d7d-aa56128eb41b",
                    "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 63
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "70d5dc40-7abf-4c43-be25-a72f2915d425",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/badRequestHandler.spec.js",
        "uuid": "d91f383a-09fd-4cbe-9f80-c2b9f9e01d5c",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "f0b5d797-65c6-4c53-9a5f-e5806346f9d3",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 183,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0356775e-6fa8-4866-964c-daf6417b98ad",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3083c0f-1db8-4b2b-b839-6a2bfc7cbd9d",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ff15c06-656f-47a9-8671-6856833f15f0",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a4722e7-0b4f-4217-99c8-497541281f01",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f1537fa-9a63-445c-a6c9-9b8aac5e9ebd",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15c921ce-66a4-4b31-92e6-bd426e5725d3",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b873cc96-2e0d-4195-a9f8-da97fbae56cf",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98f5b25a-7574-402b-93ec-fdfe4c111404",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25e122ee-aae9-4664-94b8-b706409372e4",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8cda8c88-c30c-445c-8f82-b414703a2ebf",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cbc516ea-613d-4c76-a726-3aee0b187f72",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c1a53e4d-fb5e-4ff6-adf2-ff13107f85da",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b761190a-6868-4f02-b16c-d9bc60abf0de",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6879d74-3803-43c8-9378-f0bc18d33f06",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b793eb9-6dc0-4095-b642-6371e07daf44",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fa1182ef-26d5-49ff-8dc2-f8122cf528aa",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "621dedc0-b4b5-40c5-b2fa-1a59ecb62be3",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "090f6b9e-e813-4f6c-b00b-5722957f358e",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a29713c-55ad-40b5-9097-472b3ac92f54",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d40cb3d-4182-459e-b1fb-99281e8e0e89",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70676fcf-7ee9-4ce4-9280-60b15fbbc1d0",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b3732fe-1b94-40b5-aeef-903479fa90c4",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "433e2ff4-0e6f-485e-ad2a-eb07962b7d69",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f105a64-fcca-4f28-b550-7a86461a0d41",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 74,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e30d9c8-bb98-4247-9f73-be93ea021ea4",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ada7028-97fc-4a06-b9e5-eb1a4d716af2",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2eecc794-3259-40ff-8149-eb9809c01aca",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0878b4ce-f818-4cd5-b64b-ecf7a07fd56b",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11ec569c-0123-4716-a030-cebd196f5dc7",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "dfe4d676-e7e5-494e-93d0-045b59f27df6",
      "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "89506956-5978-4ce9-b6e4-42797e567bc2",
      "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "720758da-e239-4e1c-a2cf-0d443da7db2f",
      "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "ba995ffe-de47-4349-aa9c-7f081300c762",
      "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "bc53dd4d-298f-4fa3-b78d-13dc6e986e08",
      "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "81c511bf-ac9e-4ec1-840a-4a93cdfd94ca",
      "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "99c2b371-4ff4-411a-bb7c-37b3d4235db8",
      "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "d3a976a1-1a9a-4265-8fb9-75f9ed1fc7a5",
      "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "9e8a0862-9e5f-4c09-b310-f8adda879947",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "8a60b384-64d5-4ee8-bab2-9cf46106b337",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "20e04092-b789-4b62-b0a6-d08eaf648967",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "3ced131e-e14f-4c64-80c9-823d35118cf9",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "8995cc6d-7339-4026-952a-e1a2f5bf0ccd",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "a10dd05f-0e98-4068-911a-be2ff817101c",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "3fe5e7d6-9c14-4841-9bc3-d46d54943d1c",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "51ea1ae7-ab02-4379-adbe-5ef864fa425b",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "3da28b8c-2620-43b5-bd2e-d398e558b28c",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "21a08863-3811-4fcf-8b86-a727185307de",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "27bf6399-c883-436d-86d0-b557ac6d7686",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "3433bc42-b5f3-442a-892c-c217bc3a0908",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "aadfde9b-b558-425b-abc5-880a131ca51e",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "dea957bd-44dd-4829-b899-8ad007b7a6b5",
      "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c2a2ef01-5734-40c2-a23f-4c1dd0e7f273",
      "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "e7d74788-0b52-4d53-b333-240cb2f1e4b7",
      "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "94aa91a4-d486-4701-900c-bebecf51f535",
      "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6b00a942-8283-499e-b8af-77612fde1a4d",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "96d06c91-8ccc-4417-bcd5-e79ed51e3b3e",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "a21e359b-0b8e-416a-8e0c-a992f44997a3",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ad6fe349-f088-43a5-80b4-c988741399a1",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "342ad158-bcf4-4d32-ae3f-142dbe51d4e5",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "af34c2d0-6929-4761-86c9-8e9c4b658806",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "c593df6d-55b7-4346-a0b9-35388cc4ef74",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "3ce8d7fa-8268-487e-aa00-8900b8712224",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "f89d9d4a-2efa-48d0-88a5-239bffa1f0cc",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "506e1342-9524-4d56-bce5-2c88bcaa5fa9",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "052d385e-dbf3-4f28-b6f7-4ea12993c31c",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "68cef360-cddc-447e-819e-ed7d57b88ffc",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "449aee65-18ab-44fc-881b-7135bd864bce",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f797727-7b31-44cc-a306-52bfbb0fea05",
      "parentUUID": "8fbafc97-9a08-4eed-9bc5-c7f0e845d3e6",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "961c3825-f491-4d79-9029-cc17d9546085",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8c0ab98-7468-4a20-96b3-c6703167da3e",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9bc33027-aebb-437b-8a83-2424bf9f3220",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93f1e03e-d02e-4ede-a16f-6f3851dbee9c",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9fc5e938-c33d-4380-9e3e-399ad8bc5da5",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb7fc9d6-4c6c-4ac4-8888-4679d0b40f0d",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 154,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eddd95f7-73eb-4b4f-bc62-b8f6aa2e4de0",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "343b5dc2-3f6f-40d6-8705-bcc95c3154c9",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2418dc2c-313c-40d9-9c60-391d7814f601",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e02fdbdc-626f-48bc-a228-1335ff9344a9",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ea9612d-d28f-49fc-b953-1191b577317c",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07251029-9d98-4b22-931e-e1a3e78fa51b",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63ce3bb1-b3bc-4ef8-9666-4ba6f6a4fdc9",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c597d18-01b9-48d4-a776-21f6aec58e61",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47a61c30-e87f-4a7d-ba9b-f5e4ebf5c859",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9ef9997-83d2-4d6e-9cd3-611a2d970589",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d8d5fa1e-1ae6-43b9-b7f6-2bb3ebfb2639",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cba42bc2-208c-4057-b239-4579944ee353",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d74dda95-f0cc-4791-b1fb-d3b95c38e7ab",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eac55594-64d3-4fed-9962-9f052daf08a8",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bad80b6f-e128-457e-b9bc-5e9bafa29a47",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c47a11c-9fb7-40fd-8040-c7ec687469f1",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a8e2843-5d60-4492-ba88-e079a16ca55d",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98cfe4fd-d70a-4244-852b-2e651e12cb9d",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4541b3d-1031-4207-9a64-dbe1c77e8584",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "714162c2-044f-494f-b841-c4e99ddb1495",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc350ed4-9e5e-439d-971b-cf37c904cec0",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9baa6d39-383b-452a-b067-4ebdc4cd14a4",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44d5c6ac-c81a-41aa-9c2a-82d92686a51e",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "409384c2-b33d-480b-92a4-a30b8db7d058",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 409,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a1797ce-48b0-4a41-a585-933c2fbee400",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a753e5d-382b-4164-9056-e7e88839b257",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edc0ec06-5258-49c3-b8b8-c5a932bf487e",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "08bf2611-746a-4be1-b14e-00bc615cb39a",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b43b789-e401-41f5-9d18-6df76b200278",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d64c0972-d5bd-4128-b7f9-21de42e205e9",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2cc21062-5cfc-4215-bb85-856d128b16ff",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "32eb8a2a-2d31-4f3d-ac63-8f978a27b8cb",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b47c77ad-faed-47c8-a06b-b392d8a28062",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10a4ccbe-cba8-4966-9319-928aa5200a6a",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15afcecf-478c-49d0-9694-18140064a5fd",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2bbaf640-9db9-47d3-bce4-4e007b449196",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 122,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "803e1d5d-dffd-4110-888c-3e67d6826ffb",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67c00df2-9c68-4568-b795-1ba7af6b58a3",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f39e8b3-4df2-4dc4-825d-91f3526dfb91",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1ed1ba48-b78d-4a50-ac6d-05a932d6f7b6",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba308dc0-b4d8-4ff0-b207-aa813161f132",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64152ffb-b031-4678-a774-240c753d2375",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dca9c764-124a-4403-951f-9fa3873f05d9",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87bc991b-5480-470b-8e4c-e465cc789300",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9dc6acd-1937-4aaa-bdf4-637af4cd5b1b",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00c232ef-93f9-40c0-8deb-fadd08a1ee5f",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b061f850-f343-4c6b-8271-b908451f9911",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "19c65532-b987-454f-b915-531f30820792",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c9d38a09-28ad-44ee-9d7f-f9dd69855ecb",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2d61304-203f-45f3-a4f6-9c81ae24b993",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28aae3aa-9292-43bf-b2aa-e6e61195c2f9",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05ca0cea-acb8-47eb-aca6-cc91ca2a197e",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d374758e-bf40-4949-bd47-874b0712941c",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78347ccb-d112-4066-b52a-3958f1e81099",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddc072ee-1e26-4e4d-b60d-e8c8cf0f82c5",
      "parentUUID": "520f109d-6b1c-4345-9bca-3bd5b406f2e2",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 137,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f09c11dc-0241-413c-b9c9-cd18d76fac77",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "345b690f-1254-475f-9087-c6945325676e",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd586bcc-8473-4f73-872b-b12502159e00",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77cf4b17-e846-402c-9ddd-94e526ad57e5",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f76d2a3f-fbc0-48bd-8dd5-b93375c4f28a",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9788866a-4325-447a-89fc-df1ce82b016c",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "677d9167-3e8f-4081-a631-6c03ab37a03d",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7e8a2e0-2413-4a45-acfe-246b87704af6",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b84fe2c7-2400-4f7b-b577-3ab99a1563d7",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bebd443c-5202-49ed-a169-1c2533655624",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c78af852-6e4c-45da-9d62-b7916dd9990b",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d5656e8-5153-43a5-8c28-8f1e576ee294",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 246,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ac70ead-fc97-47f4-98e4-50a08343b305",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7899526c-2c59-4725-87ed-83dc192f43ee",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "099c87f0-290a-44b4-8a00-4ce294f5ec45",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a90b71f-9514-4111-9055-6d668e7044a6",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f404ec44-53a0-4afe-b6ba-df71425c0895",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4be78757-3e35-4abe-accb-86647fb5cca5",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ce36bd1-8077-4592-99f2-759309315556",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3e28d64-5009-42b5-9c88-4704903fecdc",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41216e27-d92a-4133-b7e3-6b9f6f35b78f",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f105ffd-7b10-4514-8412-71e4b0d0ac3f",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e7f077c-7c9a-4411-92d2-28830940fb72",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86abea01-8c9d-4672-81ab-9104328392ff",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ee9e224-f1ce-4457-b3ef-4b36a719e2e0",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9964e559-d090-47ac-8711-f2de0299c6a9",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "39326e22-8e32-4b5f-a34f-5e5d4f08afae",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83d14ad4-2816-430e-9075-350567d63fe5",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb2e037b-7883-4c51-ade8-1c816431b184",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b871838-40dc-4644-9d26-fb0526d1fa0f",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "042e3a5c-cbac-490f-9ad0-b05b489d0465",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93d138be-1786-4916-8ce8-bf9a7988d55a",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9362bc88-d40a-46cb-ad65-d729688dcb83",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1afdf8f-ddca-41ff-9fdd-b7511116b0fb",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00a5f757-d477-423d-ad77-5351005d23f9",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddc24a39-e262-43d3-bc62-093416388d01",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ec8db6c-89d6-4630-b221-74e9366268eb",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f335ac0-02a2-41f6-85d3-40d8ff01bc6d",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df9c97bc-0542-491a-a47c-39e87f518822",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a901819-362a-40dc-9d90-efcbf3edf85c",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0e14147-51fa-4696-9434-a74642d30b22",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92cbd17b-0088-4c1f-88e6-19c77487f0dd",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6f9277b-e355-48f4-bbde-af598939be6f",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e3ebc0d-5dd0-4191-9fcf-ccda41dcd56f",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84fa7149-96df-4792-a210-2eded167e186",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 95,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "385ce38f-b039-4e16-83b9-17249171f7a3",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1972dfca-3bb7-4c7e-a1a3-111603ac1b94",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d7de863-2c42-4fca-9c61-d589e7228f85",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d48fcadb-44c3-4045-8484-4f480cb3c9df",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e018430-5b16-4c7c-bb4f-36156d9c0388",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e91cbf7c-0685-49a4-981b-1e68f824804f",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d7d751c-21cf-485b-92b6-962a35ad2f58",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "108fed7a-b485-4aba-a343-af5ebc70ea99",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27708292-6b30-469f-9d7c-995d468710ff",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3dbbf57c-bf53-4dc4-85e1-0010f349ea71",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe767e64-e706-4d6f-8909-6d837647c93e",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea334be9-958e-41da-aaea-d36593c44472",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15981f56-7b6a-4cd9-91b0-6c176ca86caa",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a52e230-895b-42e2-bd5a-466c8ea43405",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15cbaa7d-1dd9-4994-b097-1cd7f860231d",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0be533aa-c992-4522-9a9c-2cbf05c87cd9",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f1fe7ee-3814-46c9-961f-b9ddeb927c29",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "670301fe-b10a-4f11-8f8f-c7502272e5ee",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f0a31e1-6077-4c7c-b365-5bd6683aadd9",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "780c6121-5945-45e9-bc08-ca487f351268",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85fbfcbb-b4ba-4890-806a-be3597b1d0cf",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d7a94bcd-5a3e-4357-8c64-639f15ee6418",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b6d34d6-dda5-467b-ac39-ea9124b5ccec",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7f897e7-f1ad-48bf-83e6-4cbcb9e5da07",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4e5a150-82ce-4628-a81a-320570d9222c",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb63e998-60c5-4634-9f99-80d2d0012eee",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "48df4c9e-a198-4290-b384-fa260118a054",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0eb6b331-8059-423e-ad48-d9fa4e5fff63",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8ab69ea-bde0-47bc-b038-9fe71e3cb53d",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f77ffac2-26eb-4915-87c6-26e8eaf49397",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18308bf3-bd5d-4e57-9f43-83192bd7baf9",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0862e34-5159-4098-8b7e-d03b49789b37",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a4481b5-ca89-4272-ad66-8e2355934ed2",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3c1f623-af97-4c18-9ef8-7a2fe3b3980c",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "746d1b80-0197-4e82-a9b9-cabeda3f7867",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d3978cf-d0de-4b3f-9927-9689899d39d4",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "039cc625-0567-4aa1-995b-96ba2acdce8a",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "62c0834e-ca5d-45b4-9d54-581f4098d5b8",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f76cb913-ad1c-4de8-8034-1bd69ba19b2f",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d7eabcf-a460-4a91-8c55-6a07ae8734b3",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18dadf9a-8eba-4cb6-a56d-57caa42c1c2b",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "73acef05-6d15-4e02-885f-7d9c09dcf522",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2108390c-2d4a-4a28-9781-e6d79d5323b7",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58e99cb4-48df-4f2e-b8ee-d87c63de5d20",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8c5f39e-8967-42a3-b662-2862da7c4dff",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aae11f9a-b062-4532-922a-2900a9b1fb32",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9fbd38cf-429f-4813-8885-3851699dde42",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cfed341-8dd6-4587-956b-11a56bc8c6cf",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f43ae406-566f-4795-8fa5-695c4d3eb8d5",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c3b391a-9246-489e-9238-25c4c214e6cf",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "933c66b3-e8a5-4662-bd61-174670df79cc",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05dceb56-64ef-4a6f-aabc-71713c8c39f5",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "da43e72a-33e1-434a-b617-72f672c1eeb2",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "956ff56e-ebd1-4abf-ab42-2a18681b67ea",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a18ed7b-798c-4868-a518-1f3dffd0e872",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "54c363d5-016a-439d-b893-90dbff40601d",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fbef374-6b0e-4eeb-b32e-e68d3b5f85f0",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f29e31bb-2aa2-4989-9fb4-7c50f10b0e03",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9713f90b-c774-4c24-ac50-82b19579f3ea",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f736d948-49bf-4cb4-83d9-b7791e228d04",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "514d0d9d-994a-4cbb-8e4c-d63fc5303320",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b57c9951-e992-49a9-a11e-688f078624d5",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6982d85d-289e-42fb-8be5-28bb52db0f30",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b6c9cf1-219b-4ed0-a108-83e1742c8467",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "028f6991-7267-4d67-96b9-94fcaf64f50b",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "beead3f4-4418-4173-b0d9-9224d22f0c06",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e0349677-7468-460e-b5b0-8c340caa3db8",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b91c7d6-b526-41b6-9b93-e6880c28d22b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f66dad70-7277-4c2d-9f8f-ac1b0d7d2772",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ec1d9a8-cfc5-4678-a12d-037f59dabdec",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ead6222-f803-4121-af76-652fe12ba18b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e5a9074-f6b8-4392-a2ab-b18b36d9e114",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "604bce42-eb33-4e22-b18b-bf3d3a661e15",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4108c1b1-2281-46ff-a524-88162198b03a",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3af36b94-3b91-4847-9710-399eee29786c",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1dac59d8-aae2-44a8-8937-2ff67ad726ad",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe8aceee-f0be-4b83-8a9f-4d2c45a10e7b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "263589ce-0fc2-4574-a642-3bd6949738ed",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "954b6383-94d5-4c4d-92b2-0b79a57f3307",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e564cc3-0eae-4ccd-8b6f-58dc0a11ceae",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c916387-ddd9-4a7a-b918-293ec667f95b",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ab98c6d-8d01-4066-9e88-a6c2885c3360",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2db6810c-4c2f-4ad7-8dd1-3994889173a8",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83df58a9-bd00-4f44-80a6-814898784589",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "045f82ed-f5fb-4e7d-bb8d-4028c64efca2",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6a4d8fa-7d80-4470-849b-994e23cb398b",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa27f3d1-5dae-4e04-b866-b5d59dec4c96",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78120b77-0721-4f12-80d1-14468ff8b992",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c8f9f08-a940-4a89-85db-2e461a0509b1",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03347a0b-c185-4a93-805c-7ad71195c8b4",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "882428d2-5399-4cf6-8ec4-9b4cb256e697",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0bb20aa1-985e-42b7-bcbc-8d31341d63c1",
      "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3eea3ac-59dd-4216-9cda-aae0c91dcdc9",
      "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d28bf1e-4342-44e7-81b8-a4b8def6e419",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55de18bd-16a9-4a29-9ff7-bf7024bf6656",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03727117-4724-4f0d-836c-c682e7299331",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2caedcd5-6e1f-4fe9-8fea-242b55a155c6",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34871cae-64eb-4f91-aed9-58801d574d3b",
      "parentUUID": "af67b4f5-473e-46f5-98e8-49539503ca77",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "792eaa59-41f3-4c2c-9a67-b127df29be9a",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3bac8f7d-46d2-419a-9947-f7b492f93b52",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c3ef385-db4a-4f37-a110-3df774734e67",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "731291b5-0823-4865-a9ee-30c513190a48",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "877d2864-ac8b-4f53-8522-d614970ef4a4",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b00436dc-8aef-4865-9ddf-87eda2981177",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "881da3f1-d126-4277-bdeb-313fa8cf50be",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8aee37e-83a8-4565-a97b-73cb701a95c4",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b47b25cb-e9a0-4039-bb98-d4e498ace521",
      "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "486a40e0-515a-4668-8cfb-914d468cdab1",
      "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c47708a5-d80f-4a6e-9d6f-423304d90315",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fb54e29-7d36-44cb-83d2-5de45d2285cb",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f8e17ab-313e-4ff7-b9ed-94297ff76105",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2fbdc92-1d3d-4ba1-8fae-ea48678be195",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5dca4f8a-fe37-4594-8616-b6a1f1db2db5",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b75e523-930d-4da7-a2df-444450875a1f",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bec4772c-588a-4fc9-823c-f2df3140711a",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3bb6d77-81d3-40fb-8be6-7e6d4de666c0",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d915384-113e-4741-bd9c-b5e72403f1c5",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "51b22db1-e90a-4c12-8f29-9404cb77ac60",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11de2472-a50b-46fc-929c-bc7a6da7cd86",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92acbd10-bb63-4101-9881-3356b37cd4be",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "35d4a860-e38f-4ab6-a9b9-dfb4315f2d2b",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4aec2856-349b-4d8b-8a07-b0d8552c594f",
      "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d015fd23-ac08-4206-93f0-4d316edb84c7",
      "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "efaf5817-009e-4eac-b26d-7deb8987e6a6",
      "parentUUID": "6f2027a9-e3d0-45f5-b0c1-c70942ebd1af",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c50a6bd1-1355-46b9-86d3-c1274e6b0200",
      "parentUUID": "746d9cbc-58f3-4a1c-b913-09efcb2be9cf",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e550216-ad43-4273-bf80-a1f14456c6d0",
      "parentUUID": "5bfbfb96-bfca-4357-a233-0b0704a732d7",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed238f6f-de43-40cf-b957-cd0ab54de993",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0e70d48-32ac-4e5e-9c1e-2bda2ec320e2",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77e0b5b6-e216-4783-ac12-a8759c60a189",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c839254-426a-42b4-8011-725322498769",
      "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4eb35e4f-319d-456a-9116-2d0ac2bcea3f",
      "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0b10e03-9542-453f-84a4-9d58e60d4832",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1804013d-6724-44d8-9c91-a49c46f10741",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c84d515-3893-4770-8147-570c18f51ba2",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5894738c-34b7-4961-acd5-5f5c0378d1a5",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c43e33c-13c8-4b05-9d7d-aa56128eb41b",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 183,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0356775e-6fa8-4866-964c-daf6417b98ad",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3083c0f-1db8-4b2b-b839-6a2bfc7cbd9d",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9ff15c06-656f-47a9-8671-6856833f15f0",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a4722e7-0b4f-4217-99c8-497541281f01",
      "parentUUID": "8d2169e1-892b-4503-b885-3a9f81ae32ca",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f1537fa-9a63-445c-a6c9-9b8aac5e9ebd",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15c921ce-66a4-4b31-92e6-bd426e5725d3",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b873cc96-2e0d-4195-a9f8-da97fbae56cf",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98f5b25a-7574-402b-93ec-fdfe4c111404",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25e122ee-aae9-4664-94b8-b706409372e4",
      "parentUUID": "0cd6ee43-5e01-4e1a-b761-6cd65ccd13dd",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8cda8c88-c30c-445c-8f82-b414703a2ebf",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cbc516ea-613d-4c76-a726-3aee0b187f72",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c1a53e4d-fb5e-4ff6-adf2-ff13107f85da",
      "parentUUID": "e467f0dc-4e1d-4512-b15d-f719a03bf69d",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b761190a-6868-4f02-b16c-d9bc60abf0de",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6879d74-3803-43c8-9378-f0bc18d33f06",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b793eb9-6dc0-4095-b642-6371e07daf44",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fa1182ef-26d5-49ff-8dc2-f8122cf528aa",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "621dedc0-b4b5-40c5-b2fa-1a59ecb62be3",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "090f6b9e-e813-4f6c-b00b-5722957f358e",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a29713c-55ad-40b5-9097-472b3ac92f54",
      "parentUUID": "e7b2a937-662e-4357-a9b4-ab3dffa421e0",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1d40cb3d-4182-459e-b1fb-99281e8e0e89",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70676fcf-7ee9-4ce4-9280-60b15fbbc1d0",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b3732fe-1b94-40b5-aeef-903479fa90c4",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "433e2ff4-0e6f-485e-ad2a-eb07962b7d69",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f105a64-fcca-4f28-b550-7a86461a0d41",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 74,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e30d9c8-bb98-4247-9f73-be93ea021ea4",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ada7028-97fc-4a06-b9e5-eb1a4d716af2",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2eecc794-3259-40ff-8149-eb9809c01aca",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0878b4ce-f818-4cd5-b64b-ecf7a07fd56b",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11ec569c-0123-4716-a030-cebd196f5dc7",
      "parentUUID": "063fcd4c-2409-44dc-9730-ecf732406649",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "dfe4d676-e7e5-494e-93d0-045b59f27df6",
      "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "89506956-5978-4ce9-b6e4-42797e567bc2",
      "parentUUID": "07f8c215-625d-424f-9fab-539b7b6eb36d",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "720758da-e239-4e1c-a2cf-0d443da7db2f",
      "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "ba995ffe-de47-4349-aa9c-7f081300c762",
      "parentUUID": "1b8532c6-dad0-41e0-bfdb-dcfe3167b903",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "bc53dd4d-298f-4fa3-b78d-13dc6e986e08",
      "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "81c511bf-ac9e-4ec1-840a-4a93cdfd94ca",
      "parentUUID": "92fe9f38-ce6d-4972-be9e-832e8b216625",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "99c2b371-4ff4-411a-bb7c-37b3d4235db8",
      "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "d3a976a1-1a9a-4265-8fb9-75f9ed1fc7a5",
      "parentUUID": "17202ba8-6317-4e18-a8c9-74537f82c6c1",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "9e8a0862-9e5f-4c09-b310-f8adda879947",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "8a60b384-64d5-4ee8-bab2-9cf46106b337",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "20e04092-b789-4b62-b0a6-d08eaf648967",
      "parentUUID": "db444263-2b56-4c72-9509-a9ad5e004618",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "3ced131e-e14f-4c64-80c9-823d35118cf9",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "8995cc6d-7339-4026-952a-e1a2f5bf0ccd",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "a10dd05f-0e98-4068-911a-be2ff817101c",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "3fe5e7d6-9c14-4841-9bc3-d46d54943d1c",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "51ea1ae7-ab02-4379-adbe-5ef864fa425b",
      "parentUUID": "84d4125d-34cb-41f1-a00b-23f9bbe3181f",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "3da28b8c-2620-43b5-bd2e-d398e558b28c",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "21a08863-3811-4fcf-8b86-a727185307de",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "27bf6399-c883-436d-86d0-b557ac6d7686",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "3433bc42-b5f3-442a-892c-c217bc3a0908",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "aadfde9b-b558-425b-abc5-880a131ca51e",
      "parentUUID": "bd65817e-b186-4b03-a8e1-dc28afd81152",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "dea957bd-44dd-4829-b899-8ad007b7a6b5",
      "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c2a2ef01-5734-40c2-a23f-4c1dd0e7f273",
      "parentUUID": "5ee24596-eb21-44ef-930c-0d3c125ea1fd",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "e7d74788-0b52-4d53-b333-240cb2f1e4b7",
      "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "94aa91a4-d486-4701-900c-bebecf51f535",
      "parentUUID": "fa7a5016-d0a3-4311-802f-d25ebfc0451b",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "6b00a942-8283-499e-b8af-77612fde1a4d",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "96d06c91-8ccc-4417-bcd5-e79ed51e3b3e",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "a21e359b-0b8e-416a-8e0c-a992f44997a3",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ad6fe349-f088-43a5-80b4-c988741399a1",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "342ad158-bcf4-4d32-ae3f-142dbe51d4e5",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "af34c2d0-6929-4761-86c9-8e9c4b658806",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "c593df6d-55b7-4346-a0b9-35388cc4ef74",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "3ce8d7fa-8268-487e-aa00-8900b8712224",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "f89d9d4a-2efa-48d0-88a5-239bffa1f0cc",
      "parentUUID": "b7aea999-94c1-486c-a907-760421d094d7",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "506e1342-9524-4d56-bce5-2c88bcaa5fa9",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "052d385e-dbf3-4f28-b6f7-4ea12993c31c",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "68cef360-cddc-447e-819e-ed7d57b88ffc",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "449aee65-18ab-44fc-881b-7135bd864bce",
      "parentUUID": "ea70edba-82ef-41a0-832b-11581b4cc66f",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f797727-7b31-44cc-a306-52bfbb0fea05",
      "parentUUID": "8fbafc97-9a08-4eed-9bc5-c7f0e845d3e6",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "961c3825-f491-4d79-9029-cc17d9546085",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8c0ab98-7468-4a20-96b3-c6703167da3e",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9bc33027-aebb-437b-8a83-2424bf9f3220",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93f1e03e-d02e-4ede-a16f-6f3851dbee9c",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9fc5e938-c33d-4380-9e3e-399ad8bc5da5",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb7fc9d6-4c6c-4ac4-8888-4679d0b40f0d",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 154,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eddd95f7-73eb-4b4f-bc62-b8f6aa2e4de0",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "343b5dc2-3f6f-40d6-8705-bcc95c3154c9",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2418dc2c-313c-40d9-9c60-391d7814f601",
      "parentUUID": "901ab7f5-c3ba-4771-ab9f-a5d5fc0801e7",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e02fdbdc-626f-48bc-a228-1335ff9344a9",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ea9612d-d28f-49fc-b953-1191b577317c",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07251029-9d98-4b22-931e-e1a3e78fa51b",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63ce3bb1-b3bc-4ef8-9666-4ba6f6a4fdc9",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c597d18-01b9-48d4-a776-21f6aec58e61",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47a61c30-e87f-4a7d-ba9b-f5e4ebf5c859",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9ef9997-83d2-4d6e-9cd3-611a2d970589",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d8d5fa1e-1ae6-43b9-b7f6-2bb3ebfb2639",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cba42bc2-208c-4057-b239-4579944ee353",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d74dda95-f0cc-4791-b1fb-d3b95c38e7ab",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eac55594-64d3-4fed-9962-9f052daf08a8",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bad80b6f-e128-457e-b9bc-5e9bafa29a47",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c47a11c-9fb7-40fd-8040-c7ec687469f1",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a8e2843-5d60-4492-ba88-e079a16ca55d",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98cfe4fd-d70a-4244-852b-2e651e12cb9d",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4541b3d-1031-4207-9a64-dbe1c77e8584",
      "parentUUID": "368e5182-1841-4339-836c-348610512fa8",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "714162c2-044f-494f-b841-c4e99ddb1495",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc350ed4-9e5e-439d-971b-cf37c904cec0",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9baa6d39-383b-452a-b067-4ebdc4cd14a4",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44d5c6ac-c81a-41aa-9c2a-82d92686a51e",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "409384c2-b33d-480b-92a4-a30b8db7d058",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 409,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a1797ce-48b0-4a41-a585-933c2fbee400",
      "parentUUID": "22888e56-4ff6-4b6b-a636-cf3ee32f4e2c",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a753e5d-382b-4164-9056-e7e88839b257",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edc0ec06-5258-49c3-b8b8-c5a932bf487e",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "08bf2611-746a-4be1-b14e-00bc615cb39a",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5b43b789-e401-41f5-9d18-6df76b200278",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d64c0972-d5bd-4128-b7f9-21de42e205e9",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2cc21062-5cfc-4215-bb85-856d128b16ff",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "32eb8a2a-2d31-4f3d-ac63-8f978a27b8cb",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b47c77ad-faed-47c8-a06b-b392d8a28062",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10a4ccbe-cba8-4966-9319-928aa5200a6a",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15afcecf-478c-49d0-9694-18140064a5fd",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2bbaf640-9db9-47d3-bce4-4e007b449196",
      "parentUUID": "998c37be-e229-4e8c-a2ee-0d81433d5d09",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 122,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "803e1d5d-dffd-4110-888c-3e67d6826ffb",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67c00df2-9c68-4568-b795-1ba7af6b58a3",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f39e8b3-4df2-4dc4-825d-91f3526dfb91",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1ed1ba48-b78d-4a50-ac6d-05a932d6f7b6",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba308dc0-b4d8-4ff0-b207-aa813161f132",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64152ffb-b031-4678-a774-240c753d2375",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dca9c764-124a-4403-951f-9fa3873f05d9",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87bc991b-5480-470b-8e4c-e465cc789300",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9dc6acd-1937-4aaa-bdf4-637af4cd5b1b",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00c232ef-93f9-40c0-8deb-fadd08a1ee5f",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b061f850-f343-4c6b-8271-b908451f9911",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "19c65532-b987-454f-b915-531f30820792",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c9d38a09-28ad-44ee-9d7f-f9dd69855ecb",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2d61304-203f-45f3-a4f6-9c81ae24b993",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28aae3aa-9292-43bf-b2aa-e6e61195c2f9",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05ca0cea-acb8-47eb-aca6-cc91ca2a197e",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d374758e-bf40-4949-bd47-874b0712941c",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78347ccb-d112-4066-b52a-3958f1e81099",
      "parentUUID": "7fb9f4f2-ac2b-45da-9d07-ef60a143e0b9",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddc072ee-1e26-4e4d-b60d-e8c8cf0f82c5",
      "parentUUID": "520f109d-6b1c-4345-9bca-3bd5b406f2e2",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 137,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f09c11dc-0241-413c-b9c9-cd18d76fac77",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "345b690f-1254-475f-9087-c6945325676e",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd586bcc-8473-4f73-872b-b12502159e00",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77cf4b17-e846-402c-9ddd-94e526ad57e5",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f76d2a3f-fbc0-48bd-8dd5-b93375c4f28a",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9788866a-4325-447a-89fc-df1ce82b016c",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "677d9167-3e8f-4081-a631-6c03ab37a03d",
      "parentUUID": "9691e347-98b4-4ba9-ae37-d26a5d1dd144",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7e8a2e0-2413-4a45-acfe-246b87704af6",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b84fe2c7-2400-4f7b-b577-3ab99a1563d7",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bebd443c-5202-49ed-a169-1c2533655624",
      "parentUUID": "b6a7f1f8-f5da-4e8d-ac13-55094b3d56b6",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c78af852-6e4c-45da-9d62-b7916dd9990b",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d5656e8-5153-43a5-8c28-8f1e576ee294",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 246,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ac70ead-fc97-47f4-98e4-50a08343b305",
      "parentUUID": "91097994-0133-4871-a25e-217c2d55fa83",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7899526c-2c59-4725-87ed-83dc192f43ee",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "099c87f0-290a-44b4-8a00-4ce294f5ec45",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8a90b71f-9514-4111-9055-6d668e7044a6",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f404ec44-53a0-4afe-b6ba-df71425c0895",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4be78757-3e35-4abe-accb-86647fb5cca5",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ce36bd1-8077-4592-99f2-759309315556",
      "parentUUID": "b58f617e-c0d4-4153-b1d0-9571ca999ec8",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a3e28d64-5009-42b5-9c88-4704903fecdc",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41216e27-d92a-4133-b7e3-6b9f6f35b78f",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f105ffd-7b10-4514-8412-71e4b0d0ac3f",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e7f077c-7c9a-4411-92d2-28830940fb72",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "86abea01-8c9d-4672-81ab-9104328392ff",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ee9e224-f1ce-4457-b3ef-4b36a719e2e0",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9964e559-d090-47ac-8711-f2de0299c6a9",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "39326e22-8e32-4b5f-a34f-5e5d4f08afae",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83d14ad4-2816-430e-9075-350567d63fe5",
      "parentUUID": "a1aa3b70-134f-4b97-9848-614228a7aa73",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb2e037b-7883-4c51-ade8-1c816431b184",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b871838-40dc-4644-9d26-fb0526d1fa0f",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "042e3a5c-cbac-490f-9ad0-b05b489d0465",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93d138be-1786-4916-8ce8-bf9a7988d55a",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9362bc88-d40a-46cb-ad65-d729688dcb83",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1afdf8f-ddca-41ff-9fdd-b7511116b0fb",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00a5f757-d477-423d-ad77-5351005d23f9",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddc24a39-e262-43d3-bc62-093416388d01",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ec8db6c-89d6-4630-b221-74e9366268eb",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f335ac0-02a2-41f6-85d3-40d8ff01bc6d",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df9c97bc-0542-491a-a47c-39e87f518822",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a901819-362a-40dc-9d90-efcbf3edf85c",
      "parentUUID": "32f4f2b5-e36b-4ac4-a715-ce395087275a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d0e14147-51fa-4696-9434-a74642d30b22",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92cbd17b-0088-4c1f-88e6-19c77487f0dd",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6f9277b-e355-48f4-bbde-af598939be6f",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e3ebc0d-5dd0-4191-9fcf-ccda41dcd56f",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84fa7149-96df-4792-a210-2eded167e186",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 95,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "385ce38f-b039-4e16-83b9-17249171f7a3",
      "parentUUID": "060fc573-cdbc-417f-900a-d6efe9cc9b23",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1972dfca-3bb7-4c7e-a1a3-111603ac1b94",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4d7de863-2c42-4fca-9c61-d589e7228f85",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d48fcadb-44c3-4045-8484-4f480cb3c9df",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e018430-5b16-4c7c-bb4f-36156d9c0388",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e91cbf7c-0685-49a4-981b-1e68f824804f",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9d7d751c-21cf-485b-92b6-962a35ad2f58",
      "parentUUID": "cb8052ed-6a6a-49eb-87da-0c6f3369d2de",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "108fed7a-b485-4aba-a343-af5ebc70ea99",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27708292-6b30-469f-9d7c-995d468710ff",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3dbbf57c-bf53-4dc4-85e1-0010f349ea71",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe767e64-e706-4d6f-8909-6d837647c93e",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ea334be9-958e-41da-aaea-d36593c44472",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15981f56-7b6a-4cd9-91b0-6c176ca86caa",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a52e230-895b-42e2-bd5a-466c8ea43405",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "15cbaa7d-1dd9-4994-b097-1cd7f860231d",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0be533aa-c992-4522-9a9c-2cbf05c87cd9",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f1fe7ee-3814-46c9-961f-b9ddeb927c29",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "670301fe-b10a-4f11-8f8f-c7502272e5ee",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8f0a31e1-6077-4c7c-b365-5bd6683aadd9",
      "parentUUID": "06aff2eb-edf8-4e12-8ecc-37b7d4642ca7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "780c6121-5945-45e9-bc08-ca487f351268",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85fbfcbb-b4ba-4890-806a-be3597b1d0cf",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d7a94bcd-5a3e-4357-8c64-639f15ee6418",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b6d34d6-dda5-467b-ac39-ea9124b5ccec",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7f897e7-f1ad-48bf-83e6-4cbcb9e5da07",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4e5a150-82ce-4628-a81a-320570d9222c",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb63e998-60c5-4634-9f99-80d2d0012eee",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "48df4c9e-a198-4290-b384-fa260118a054",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0eb6b331-8059-423e-ad48-d9fa4e5fff63",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8ab69ea-bde0-47bc-b038-9fe71e3cb53d",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f77ffac2-26eb-4915-87c6-26e8eaf49397",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18308bf3-bd5d-4e57-9f43-83192bd7baf9",
      "parentUUID": "27e1bc85-a062-41d3-8200-ea17a09b0fd8",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0862e34-5159-4098-8b7e-d03b49789b37",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a4481b5-ca89-4272-ad66-8e2355934ed2",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3c1f623-af97-4c18-9ef8-7a2fe3b3980c",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "746d1b80-0197-4e82-a9b9-cabeda3f7867",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d3978cf-d0de-4b3f-9927-9689899d39d4",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "039cc625-0567-4aa1-995b-96ba2acdce8a",
      "parentUUID": "edf36444-649e-4775-bee0-af4ea85da34c",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "62c0834e-ca5d-45b4-9d54-581f4098d5b8",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f76cb913-ad1c-4de8-8034-1bd69ba19b2f",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d7eabcf-a460-4a91-8c55-6a07ae8734b3",
      "parentUUID": "33de84d5-13e0-4ca5-86e3-2c89cdeb7241",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18dadf9a-8eba-4cb6-a56d-57caa42c1c2b",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "73acef05-6d15-4e02-885f-7d9c09dcf522",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2108390c-2d4a-4a28-9781-e6d79d5323b7",
      "parentUUID": "1e9e14a3-8b34-4049-96cb-c01f60927e6a",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58e99cb4-48df-4f2e-b8ee-d87c63de5d20",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8c5f39e-8967-42a3-b662-2862da7c4dff",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aae11f9a-b062-4532-922a-2900a9b1fb32",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9fbd38cf-429f-4813-8885-3851699dde42",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6cfed341-8dd6-4587-956b-11a56bc8c6cf",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f43ae406-566f-4795-8fa5-695c4d3eb8d5",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c3b391a-9246-489e-9238-25c4c214e6cf",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "933c66b3-e8a5-4662-bd61-174670df79cc",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05dceb56-64ef-4a6f-aabc-71713c8c39f5",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "da43e72a-33e1-434a-b617-72f672c1eeb2",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "956ff56e-ebd1-4abf-ab42-2a18681b67ea",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a18ed7b-798c-4868-a518-1f3dffd0e872",
      "parentUUID": "b7ce0b1e-c900-4a07-a76f-0c72069b39cb",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "54c363d5-016a-439d-b893-90dbff40601d",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fbef374-6b0e-4eeb-b32e-e68d3b5f85f0",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f29e31bb-2aa2-4989-9fb4-7c50f10b0e03",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9713f90b-c774-4c24-ac50-82b19579f3ea",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f736d948-49bf-4cb4-83d9-b7791e228d04",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "514d0d9d-994a-4cbb-8e4c-d63fc5303320",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b57c9951-e992-49a9-a11e-688f078624d5",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6982d85d-289e-42fb-8be5-28bb52db0f30",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b6c9cf1-219b-4ed0-a108-83e1742c8467",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "028f6991-7267-4d67-96b9-94fcaf64f50b",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "beead3f4-4418-4173-b0d9-9224d22f0c06",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e0349677-7468-460e-b5b0-8c340caa3db8",
      "parentUUID": "45c52dbb-3ca9-4b63-8da6-3ab135fdcd56",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7b91c7d6-b526-41b6-9b93-e6880c28d22b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f66dad70-7277-4c2d-9f8f-ac1b0d7d2772",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ec1d9a8-cfc5-4678-a12d-037f59dabdec",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ead6222-f803-4121-af76-652fe12ba18b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e5a9074-f6b8-4392-a2ab-b18b36d9e114",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "604bce42-eb33-4e22-b18b-bf3d3a661e15",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4108c1b1-2281-46ff-a524-88162198b03a",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3af36b94-3b91-4847-9710-399eee29786c",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1dac59d8-aae2-44a8-8937-2ff67ad726ad",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe8aceee-f0be-4b83-8a9f-4d2c45a10e7b",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "263589ce-0fc2-4574-a642-3bd6949738ed",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "954b6383-94d5-4c4d-92b2-0b79a57f3307",
      "parentUUID": "5f7805de-19be-4752-a858-489b5b5431b2",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e564cc3-0eae-4ccd-8b6f-58dc0a11ceae",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c916387-ddd9-4a7a-b918-293ec667f95b",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ab98c6d-8d01-4066-9e88-a6c2885c3360",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2db6810c-4c2f-4ad7-8dd1-3994889173a8",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83df58a9-bd00-4f44-80a6-814898784589",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "045f82ed-f5fb-4e7d-bb8d-4028c64efca2",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a6a4d8fa-7d80-4470-849b-994e23cb398b",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa27f3d1-5dae-4e04-b866-b5d59dec4c96",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "78120b77-0721-4f12-80d1-14468ff8b992",
      "parentUUID": "d39f41c5-cbdd-4fd7-9cc1-7304d422199e",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c8f9f08-a940-4a89-85db-2e461a0509b1",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03347a0b-c185-4a93-805c-7ad71195c8b4",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "882428d2-5399-4cf6-8ec4-9b4cb256e697",
      "parentUUID": "27f38d45-ff7d-4854-aea6-1d9510967333",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0bb20aa1-985e-42b7-bcbc-8d31341d63c1",
      "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3eea3ac-59dd-4216-9cda-aae0c91dcdc9",
      "parentUUID": "ee4aa4a1-7228-4e58-81aa-3ed24f78ba6a",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5d28bf1e-4342-44e7-81b8-a4b8def6e419",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55de18bd-16a9-4a29-9ff7-bf7024bf6656",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03727117-4724-4f0d-836c-c682e7299331",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2caedcd5-6e1f-4fe9-8fea-242b55a155c6",
      "parentUUID": "3b513a9e-5e26-4472-96cf-5deffb63a4ac",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "34871cae-64eb-4f91-aed9-58801d574d3b",
      "parentUUID": "af67b4f5-473e-46f5-98e8-49539503ca77",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "792eaa59-41f3-4c2c-9a67-b127df29be9a",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3bac8f7d-46d2-419a-9947-f7b492f93b52",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c3ef385-db4a-4f37-a110-3df774734e67",
      "parentUUID": "24be28af-8194-4716-bd7d-f2e0fd3b7584",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "731291b5-0823-4865-a9ee-30c513190a48",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "877d2864-ac8b-4f53-8522-d614970ef4a4",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b00436dc-8aef-4865-9ddf-87eda2981177",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "881da3f1-d126-4277-bdeb-313fa8cf50be",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8aee37e-83a8-4565-a97b-73cb701a95c4",
      "parentUUID": "647a7d2e-ec18-42f2-bf10-95fb69d06a73",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b47b25cb-e9a0-4039-bb98-d4e498ace521",
      "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "486a40e0-515a-4668-8cfb-914d468cdab1",
      "parentUUID": "e5399f3f-409a-4412-a724-bba55ca0cee5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c47708a5-d80f-4a6e-9d6f-423304d90315",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fb54e29-7d36-44cb-83d2-5de45d2285cb",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f8e17ab-313e-4ff7-b9ed-94297ff76105",
      "parentUUID": "cbe0fb07-e6aa-4978-aad7-ceff86560399",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2fbdc92-1d3d-4ba1-8fae-ea48678be195",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5dca4f8a-fe37-4594-8616-b6a1f1db2db5",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b75e523-930d-4da7-a2df-444450875a1f",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bec4772c-588a-4fc9-823c-f2df3140711a",
      "parentUUID": "08381e05-4efc-4172-85fb-b39c9c46eb88",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3bb6d77-81d3-40fb-8be6-7e6d4de666c0",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d915384-113e-4741-bd9c-b5e72403f1c5",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "51b22db1-e90a-4c12-8f29-9404cb77ac60",
      "parentUUID": "c57ca85d-b145-43b8-a879-95124fdeea2a",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "11de2472-a50b-46fc-929c-bc7a6da7cd86",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92acbd10-bb63-4101-9881-3356b37cd4be",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "35d4a860-e38f-4ab6-a9b9-dfb4315f2d2b",
      "parentUUID": "69efdcc9-2fd3-41c4-9626-94d868402346",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4aec2856-349b-4d8b-8a07-b0d8552c594f",
      "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d015fd23-ac08-4206-93f0-4d316edb84c7",
      "parentUUID": "e3c87d10-0d2b-463c-b277-49ba9df2983d",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "efaf5817-009e-4eac-b26d-7deb8987e6a6",
      "parentUUID": "6f2027a9-e3d0-45f5-b0c1-c70942ebd1af",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c50a6bd1-1355-46b9-86d3-c1274e6b0200",
      "parentUUID": "746d9cbc-58f3-4a1c-b913-09efcb2be9cf",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e550216-ad43-4273-bf80-a1f14456c6d0",
      "parentUUID": "5bfbfb96-bfca-4357-a233-0b0704a732d7",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed238f6f-de43-40cf-b957-cd0ab54de993",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0e70d48-32ac-4e5e-9c1e-2bda2ec320e2",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "77e0b5b6-e216-4783-ac12-a8759c60a189",
      "parentUUID": "46264c4e-f61f-4d5e-ba14-5592f23c154a",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c839254-426a-42b4-8011-725322498769",
      "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4eb35e4f-319d-456a-9116-2d0ac2bcea3f",
      "parentUUID": "5e0af47b-bd23-4cbb-b406-699d21005315",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0b10e03-9542-453f-84a4-9d58e60d4832",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1804013d-6724-44d8-9c91-a49c46f10741",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c84d515-3893-4770-8147-570c18f51ba2",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5894738c-34b7-4961-acd5-5f5c0378d1a5",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c43e33c-13c8-4b05-9d7d-aa56128eb41b",
      "parentUUID": "70c4103d-dbb9-4d4e-8731-5232da210c78",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}