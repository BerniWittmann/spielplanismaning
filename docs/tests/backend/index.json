{
  "stats": {
    "suites": 74,
    "tests": 366,
    "passes": 366,
    "pending": 0,
    "failures": 0,
    "start": "2017-04-17T07:11:52.810Z",
    "end": "2017-04-17T07:11:59.350Z",
    "duration": 6540,
    "testsRegistered": 366,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Ansprechpartner",
        "suites": [
          {
            "title": "soll einen Ansprechpartner ändern können",
            "suites": [],
            "tests": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5aae8690-78de-4feb-899b-0c6967e799f0",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc270681-fe66-4417-862c-ca00057cd433",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "42979abd-7424-418c-abb0-4716ee8cca56",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6904d443-654d-4cd2-afbd-f42af9900846",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "79c33df8-7a8f-4a65-b17e-79d3fe74befd",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/ansprechpartner.spec.js",
            "uuid": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
            "passes": [
              {
                "title": "der Name soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können der Name soll geändert werden können",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5aae8690-78de-4feb-899b-0c6967e799f0",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "die Email soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können die Email soll geändert werden können",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc270681-fe66-4417-862c-ca00057cd433",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "das Turnier soll geändert werden können",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "42979abd-7424-418c-abb0-4716ee8cca56",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6904d443-654d-4cd2-afbd-f42af9900846",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              },
              {
                "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "79c33df8-7a8f-4a65-b17e-79d3fe74befd",
                "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 172,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d912c585-8c83-4754-a03d-77ab66e57749",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7ad01b0-9532-41c1-b340-ae5e5c24c3ab",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4f15f0cb-ecd4-4718-a4d7-6fda9aa28845",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "780f4877-21a9-4753-be0b-6c7c2b5b6892",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/ansprechpartner.spec.js",
        "uuid": "8d9ba109-81ac-4367-9747-03e3f583cd22",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/ansprechpartner.spec.js",
        "passes": [
          {
            "title": "soll einen Ansprechpartner hinzufügen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
            "timedOut": false,
            "duration": 65,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d912c585-8c83-4754-a03d-77ab66e57749",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll alle Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7ad01b0-9532-41c1-b340-ae5e5c24c3ab",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll einen einzelnen Ansprechpartner laden",
            "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4f15f0cb-ecd4-4718-a4d7-6fda9aa28845",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          },
          {
            "title": "soll einen Ansprechpartner löschen können",
            "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "780f4877-21a9-4753-be0b-6c7c2b5b6892",
            "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 94,
        "rootEmpty": false
      },
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3'\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2472ffc3-0146-4f78-b13b-038cf293fead",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d5416fcc-8910-4c61-9fe1-3771540fba10",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6385af41-d5b0-4772-934f-c9b2e9408549",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8765784d-d158-44cb-b4bd-4ef51bbd6315",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die Anzahl PLätze zurück",
            "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6a7bb8a6-0741-46e9-aaca-7246b9e80a4e",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "930a1c3f-992e-484d-b456-255f6462e113",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "Lädt die Configuration",
            "fullTitle": "Route: Config Lädt die Configuration",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3'\n    });\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2472ffc3-0146-4f78-b13b-038cf293fead",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d5416fcc-8910-4c61-9fe1-3771540fba10",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6385af41-d5b0-4772-934f-c9b2e9408549",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8765784d-d158-44cb-b4bd-4ef51bbd6315",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          },
          {
            "title": "gibt die Anzahl PLätze zurück",
            "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6a7bb8a6-0741-46e9-aaca-7246b9e80a4e",
            "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 35,
        "rootEmpty": false
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e2250fa3-6991-484a-8cae-c8bbcff5a169",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "441b2345-d296-4711-a4e8-717a76c7d126",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f822adc-435a-4d09-9ddd-ad9b0bb8dce7",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7abb19bb-a521-47b1-83f2-fdf31a7f263a",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2e68aa32-1df9-44fa-a0c3-5a92df1eafea",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ddb7cf32-1114-4771-8d54-8f60e058d736",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ac7b1332-1586-49c8-88f2-11fcf5dc7bc1",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "ebf19190-cd98-4540-bd8c-ed74762f6928",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e2250fa3-6991-484a-8cae-c8bbcff5a169",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "441b2345-d296-4711-a4e8-717a76c7d126",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f822adc-435a-4d09-9ddd-ad9b0bb8dce7",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7abb19bb-a521-47b1-83f2-fdf31a7f263a",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2e68aa32-1df9-44fa-a0c3-5a92df1eafea",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ddb7cf32-1114-4771-8d54-8f60e058d736",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          },
          {
            "title": "Sendet einen Bug-Report",
            "fullTitle": "Route: Email Sendet einen Bug-Report",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ac7b1332-1586-49c8-88f2-11fcf5dc7bc1",
            "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 139,
        "rootEmpty": false
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "69da7109-a848-4104-871a-fb3a24b0d1db",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b7e00846-591c-4b51-9d4a-32116b543210",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ebd90d54-44f7-44c1-abaa-8a17df278b44",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cd9f73ea-487b-45d8-b888-8e257e820933",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 61,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "569eddc1-581d-44d8-bc92-3317ac15b868",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "531fc247-f0e3-4e78-b245-b183f3dd4d27",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1cc5b1cf-e57e-490d-a823-29b5405f891a",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "596fb5ea-8fd4-4aac-9347-ea99cd735562",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2ff5596-0ce9-4d7f-b7a2-5f903e8a396a",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 96,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "687eedbc-34a1-480e-956e-12fe73b52dfa",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "811edcf2-4c76-4412-9fff-ddc422d79842",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "69da7109-a848-4104-871a-fb3a24b0d1db",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b7e00846-591c-4b51-9d4a-32116b543210",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ebd90d54-44f7-44c1-abaa-8a17df278b44",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cd9f73ea-487b-45d8-b888-8e257e820933",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 61,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "569eddc1-581d-44d8-bc92-3317ac15b868",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "531fc247-f0e3-4e78-b245-b183f3dd4d27",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1cc5b1cf-e57e-490d-a823-29b5405f891a",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "596fb5ea-8fd4-4aac-9347-ea99cd735562",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2ff5596-0ce9-4d7f-b7a2-5f903e8a396a",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 96,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "687eedbc-34a1-480e-956e-12fe73b52dfa",
            "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 538,
        "rootEmpty": false
      },
      {
        "title": "Handlers",
        "suites": [
          {
            "title": "handle Error and send Response",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "82394cef-10b7-4689-abb1-9c6b26d179a9",
                "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "24afc939-7de8-439f-be80-56574e40f1dc",
                "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Response soll den Error handlen",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "82394cef-10b7-4689-abb1-9c6b26d179a9",
                "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Error and send Response soll die Response senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "24afc939-7de8-439f-be80-56574e40f1dc",
                "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 13,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "678d85fe-03d3-427c-bcf1-08a04fe09a88",
                "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "a130673c-f7d8-4c8f-87f3-783a170de32d",
                "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "2ae7f7a7-6cec-427a-b00a-a95694572884",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Message soll den Error handlen",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "678d85fe-03d3-427c-bcf1-08a04fe09a88",
                "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "a130673c-f7d8-4c8f-87f3-783a170de32d",
                "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Success-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "fb0250d2-4600-4ad5-bc1f-397fbee99e84",
                "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "a5256273-c45c-4279-869e-44f4fb388472",
                "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Success-Message soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "fb0250d2-4600-4ad5-bc1f-397fbee99e84",
                "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Success-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "a5256273-c45c-4279-869e-44f4fb388472",
                "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "handle Error and send Deleted-Message",
            "suites": [],
            "tests": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "ea842154-fbe1-459b-982b-a9e73c3e3fc6",
                "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "28a6532a-73ad-429d-b75a-5d3625e13c33",
                "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll den Error handlen",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "ea842154-fbe1-459b-982b-a9e73c3e3fc6",
                "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
                "skipped": false
              },
              {
                "title": "soll die Nachricht senden",
                "fullTitle": "Handlers handle Error and send Deleted-Message soll die Nachricht senden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "28a6532a-73ad-429d-b75a-5d3625e13c33",
                "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          },
          {
            "title": "handle Query Response",
            "suites": [],
            "tests": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "542d2009-be69-4a3d-8dc5-6ca3be5e51e8",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "52319b2b-5d14-4420-a896-b44d238474e8",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "d98f5b64-9982-4c0d-9271-0948dae3c435",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/handler.spec.js",
            "uuid": "cd1e1b45-304a-430c-b918-5515e49da033",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
            "passes": [
              {
                "title": "soll nicht gefundene Entitites handlen",
                "fullTitle": "Handlers handle Query Response soll nicht gefundene Entitites handlen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
                "err": {},
                "isRoot": false,
                "uuid": "542d2009-be69-4a3d-8dc5-6ca3be5e51e8",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              },
              {
                "title": "soll den Error handlen",
                "fullTitle": "Handlers handle Query Response soll den Error handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "52319b2b-5d14-4420-a896-b44d238474e8",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              },
              {
                "title": "soll die Response senden",
                "fullTitle": "Handlers handle Query Response soll die Response senden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
                "err": {},
                "isRoot": false,
                "uuid": "d98f5b64-9982-4c0d-9271-0948dae3c435",
                "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/handler.spec.js",
        "uuid": "1c6e705f-8b35-4fee-92e5-c99393a6c9a5",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/handler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Helpers",
        "suites": [
          {
            "title": "soll die Datenbank query basierend auf Parametern laden",
            "suites": [],
            "tests": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "1efdff89-3c8f-45e2-930b-0ed54b87a482",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "af73d419-1115-4480-a757-5b94e0462498",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "8976db76-0113-4e73-afe2-c1da46876ca4",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "bcc1f058-c63a-4c89-8b61-9074f4f5b774",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "0e156452-47ad-470c-9970-8a86e6c8ce9a",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "1efdff89-3c8f-45e2-930b-0ed54b87a482",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "af73d419-1115-4480-a757-5b94e0462498",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "8976db76-0113-4e73-afe2-c1da46876ca4",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "bcc1f058-c63a-4c89-8b61-9074f4f5b774",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "0e156452-47ad-470c-9970-8a86e6c8ce9a",
                "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "soll das Team-Ergebnis zurücksetzen können",
            "suites": [],
            "tests": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "e31d1ae9-7a3b-46cf-8828-f6b93d5291c3",
                "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c682af7e-e4a7-436a-9987-27ec6cd2ec17",
                "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "e31d1ae9-7a3b-46cf-8828-f6b93d5291c3",
                "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c682af7e-e4a7-436a-9987-27ec6cd2ec17",
                "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "soll den letzten Slash bei einem Pfad entfernen können",
            "suites": [],
            "tests": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "c56f63e6-a7af-4ab4-8d4e-0213fa23dbf6",
                "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "55494461-5212-422f-a5db-b725796936dc",
                "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "769b923b-1979-4f0d-bf1b-d2673315768a",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "c56f63e6-a7af-4ab4-8d4e-0213fa23dbf6",
                "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "55494461-5212-422f-a5db-b725796936dc",
                "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "soll die Route-Konfiguration laden",
            "suites": [],
            "tests": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "26ada94e-6606-4b9c-80ea-e27059655643",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "10eab601-926e-4e38-82c2-dbc8abb3c5e2",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "bba0a384-0266-484e-af28-63f9fd7dbe34",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "9dbaf476-de57-450f-92be-02b42eff7f3c",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "c244762e-69fd-49b8-bb23-79701d2183bf",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "7c8ac72d-b99a-434f-a6b2-45fd305ad8f9",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "338b4f0d-60d6-414f-978d-a659ea3413c5",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "f395f617-472d-4700-a125-410599322348",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "2d9248b4-b815-4528-905b-d386d9782e00",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "775762d2-3d1a-43b5-86ee-002f557f13b4",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "26ada94e-6606-4b9c-80ea-e27059655643",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "10eab601-926e-4e38-82c2-dbc8abb3c5e2",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "bba0a384-0266-484e-af28-63f9fd7dbe34",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "9dbaf476-de57-450f-92be-02b42eff7f3c",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "c244762e-69fd-49b8-bb23-79701d2183bf",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "7c8ac72d-b99a-434f-a6b2-45fd305ad8f9",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "338b4f0d-60d6-414f-978d-a659ea3413c5",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "f395f617-472d-4700-a125-410599322348",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "2d9248b4-b815-4528-905b-d386d9782e00",
                "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 9,
            "totalPasses": 9,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5,
            "rootEmpty": false
          },
          {
            "title": "soll den Spielplan auf Korrektheit prüfen",
            "suites": [],
            "tests": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "f4f29c10-a7aa-4848-8683-c59b76e41236",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "6913f923-8bd2-4d15-8e83-1f68c7e3f382",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "b79bd508-5bf7-4bea-8b4a-f62e9adcd0be",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "32863cdb-f168-4bd9-afb8-4dd26bbfd509",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "1973d822-bf61-4899-931f-06136ac56cf5",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "f4f29c10-a7aa-4848-8683-c59b76e41236",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "6913f923-8bd2-4d15-8e83-1f68c7e3f382",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "b79bd508-5bf7-4bea-8b4a-f62e9adcd0be",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "32863cdb-f168-4bd9-afb8-4dd26bbfd509",
                "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "soll das richtige Datum und Zeit für ein Spiel berechnen",
            "suites": [
              {
                "title": "Eintägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f64b58b3-3ee8-4b5c-8b83-56dcebcc20af",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa2d16d2-2dab-428f-814c-b864c25a7137",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fb421eb4-ceaa-484a-accb-77c571976d12",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "20c8f3b1-fb24-48ae-a3d9-766744b3c549",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b62fdda2-46a0-45be-806d-07a2e3744374",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f64b58b3-3ee8-4b5c-8b83-56dcebcc20af",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa2d16d2-2dab-428f-814c-b864c25a7137",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fb421eb4-ceaa-484a-accb-77c571976d12",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "20c8f3b1-fb24-48ae-a3d9-766744b3c549",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b62fdda2-46a0-45be-806d-07a2e3744374",
                        "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 45,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d30233d0-3805-40d1-bc11-35bacbe0d8a2",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6709a9b7-9a62-4ba0-97d8-78259d9a0827",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3cde5b9a-905c-410e-9d12-d100cfd0006e",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8369c61e-05e8-48fa-8048-df41c5a684a9",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "01153867-8f85-45bd-913b-c163de4a58ab",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d30233d0-3805-40d1-bc11-35bacbe0d8a2",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6709a9b7-9a62-4ba0-97d8-78259d9a0827",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3cde5b9a-905c-410e-9d12-d100cfd0006e",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8369c61e-05e8-48fa-8048-df41c5a684a9",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "01153867-8f85-45bd-913b-c163de4a58ab",
                        "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 5,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "569b1cae-6fd6-42c7-a5d4-efcbd6a720c3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "Zweitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1500e4e4-88fb-4321-87d1-bbab0cbb1a23",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c702a657-cdc1-47a6-9dbf-9707bd8ac113",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ddfe7f58-1bcf-487d-9c98-ca3b40bb94cb",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9bf8b8c0-164a-4ca6-b232-f664f9ac8217",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b95e9f5a-2120-4cd7-831a-a35a90ecbd11",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f89a6ea6-d57f-4b2c-ae56-01bdf95c2557",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9335b6ca-5af7-4679-beb1-ba9dd237fc31",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1500e4e4-88fb-4321-87d1-bbab0cbb1a23",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c702a657-cdc1-47a6-9dbf-9707bd8ac113",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ddfe7f58-1bcf-487d-9c98-ca3b40bb94cb",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9bf8b8c0-164a-4ca6-b232-f664f9ac8217",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b95e9f5a-2120-4cd7-831a-a35a90ecbd11",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f89a6ea6-d57f-4b2c-ae56-01bdf95c2557",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9335b6ca-5af7-4679-beb1-ba9dd237fc31",
                        "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 8,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4906978e-427b-4078-8552-8c28e65b62e6",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c9b36d8-e49b-4dc9-abbb-147d1aa1e653",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8563d2c1-088d-43ae-adfb-b7812a59f35c",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "620cd6df-0775-4c38-afcf-1b933067fc9f",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ae96b3a-8871-4c1c-a9a2-ace9c831a95f",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ea40ac08-4224-4b9d-827b-55467159a30b",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a3bc2b1-ade1-4d17-a059-ae727fffff47",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4906978e-427b-4078-8552-8c28e65b62e6",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c9b36d8-e49b-4dc9-abbb-147d1aa1e653",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8563d2c1-088d-43ae-adfb-b7812a59f35c",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "620cd6df-0775-4c38-afcf-1b933067fc9f",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ae96b3a-8871-4c1c-a9a2-ace9c831a95f",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ea40ac08-4224-4b9d-827b-55467159a30b",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a3bc2b1-ade1-4d17-a059-ae727fffff47",
                        "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 5,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "3173c739-ff50-4c31-9629-a0b0a23f9d02",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "Dreitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "147e0cc3-27a6-430c-968a-6c4ae7209c6d",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4e751d0-b60b-4baa-a81c-40eae220b894",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d6a346b5-bf3a-4253-9df4-200512493425",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f274688-d9f9-481a-bde1-04d94931f6a0",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e5a5a4d3-7045-4122-b0fd-377e4bdcabbf",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22dd3c6e-bc26-4291-8171-7be8cf32481c",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "97acd02b-907e-4257-b799-9a19b515b0f5",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0bccf5f8-3726-4d87-8e80-229e5491b39f",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e973560-6d63-47dc-882b-ecc520e16870",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "147e0cc3-27a6-430c-968a-6c4ae7209c6d",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4e751d0-b60b-4baa-a81c-40eae220b894",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d6a346b5-bf3a-4253-9df4-200512493425",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f274688-d9f9-481a-bde1-04d94931f6a0",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e5a5a4d3-7045-4122-b0fd-377e4bdcabbf",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22dd3c6e-bc26-4291-8171-7be8cf32481c",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "97acd02b-907e-4257-b799-9a19b515b0f5",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0bccf5f8-3726-4d87-8e80-229e5491b39f",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e973560-6d63-47dc-882b-ecc520e16870",
                        "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 7,
                    "rootEmpty": false
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "96176037-941a-41bd-aafe-b083e869dd25",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef651fdd-e993-460c-9e94-a05a314eb437",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b653a085-d774-4789-b17f-865ac0075ac2",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "60577cb0-410c-44e7-ae87-a6c2130303b2",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30d19330-2bd0-49a8-a3d8-8621622849d7",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e19c00bf-194a-47ad-84ff-fe7ff80364f9",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e1f7e22f-d179-4504-b0da-3e731b3fb1ac",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b1d9ab54-93cb-4a66-80f2-1be50540b589",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ad65078-50ee-4c4e-9e5d-73eeb3600aff",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "96176037-941a-41bd-aafe-b083e869dd25",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef651fdd-e993-460c-9e94-a05a314eb437",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b653a085-d774-4789-b17f-865ac0075ac2",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "60577cb0-410c-44e7-ae87-a6c2130303b2",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30d19330-2bd0-49a8-a3d8-8621622849d7",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e19c00bf-194a-47ad-84ff-fe7ff80364f9",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e1f7e22f-d179-4504-b0da-3e731b3fb1ac",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b1d9ab54-93cb-4a66-80f2-1be50540b589",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ad65078-50ee-4c4e-9e5d-73eeb3600aff",
                        "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 7,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "a8b6b419-0a2b-4d59-b85a-9d9c28139aaf",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "3f2bac22-b014-4eed-9a4b-ee2f4f63235b",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "ed206594-6e35-4c92-a126-b8a532f3d0c5",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "7db40322-43fa-4f75-b33b-45fde22afc4e",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "e4324c9a-16a5-458d-a97f-93770de67bd6",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "bebedef4-88c2-49d2-a4f0-059ae6d31296",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "db3175e3-acb9-4379-93c4-1321a126a01f",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/helpers.spec.js",
        "uuid": "17f63c84-a535-402d-8ee7-ade7a1d28842",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
        "passes": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "ed206594-6e35-4c92-a126-b8a532f3d0c5",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "7db40322-43fa-4f75-b33b-45fde22afc4e",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "e4324c9a-16a5-458d-a97f-93770de67bd6",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "bebedef4-88c2-49d2-a4f0-059ae6d31296",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "db3175e3-acb9-4379-93c4-1321a126a01f",
            "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3,
        "rootEmpty": false
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aeea31b1-85f8-4b5d-9fff-080ad1791afb",
            "parentUUID": "7e91d631-fbb1-4df8-b427-ec6187f0e24b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "7e91d631-fbb1-4df8-b427-ec6187f0e24b",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aeea31b1-85f8-4b5d-9fff-080ad1791afb",
            "parentUUID": "7e91d631-fbb1-4df8-b427-ec6187f0e24b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 17,
        "rootEmpty": false
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "617ba635-c17f-4b29-82ef-72148fbe7211",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0a926951-8f7f-459a-a9aa-634b96fa28c0",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d1ab2268-0567-4c2d-923b-2507692a92ed",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "643f4b69-9d65-47ac-91db-db4248cfe41c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc0b22e0-94af-4ddc-8d52-d3d8b7e6b77c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "74ffd650-55e3-4cd6-86ce-b11006021b09",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0d415f28-45d9-4095-98ab-ac4c09e95208",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ee90691c-25ee-4750-935e-591e1ed71f3c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d7707fda-e232-48ed-a1d5-ba998923ec65",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "617ba635-c17f-4b29-82ef-72148fbe7211",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0a926951-8f7f-459a-a9aa-634b96fa28c0",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d1ab2268-0567-4c2d-923b-2507692a92ed",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "643f4b69-9d65-47ac-91db-db4248cfe41c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cc0b22e0-94af-4ddc-8d52-d3d8b7e6b77c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "74ffd650-55e3-4cd6-86ce-b11006021b09",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0d415f28-45d9-4095-98ab-ac4c09e95208",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ee90691c-25ee-4750-935e-591e1ed71f3c",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d7707fda-e232-48ed-a1d5-ba998923ec65",
            "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 154,
        "rootEmpty": false
      },
      {
        "title": "Route: notFound",
        "suites": [],
        "tests": [
          {
            "title": "soll für eine ungültige GET Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b2b35832-ee43-47a5-9acb-c02f043b01c0",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige POST Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ba53a48-da96-4776-83d7-74b9871ead33",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige PUT Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b0cd469-15b4-45f4-9491-1dd10483c8ad",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige DELETE Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "23a467ce-7eda-455c-85b2-a7a5c1ab220a",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/notfound.spec.js",
        "uuid": "3e601aff-dd72-4651-afc4-14b24c15e424",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/notfound.spec.js",
        "passes": [
          {
            "title": "soll für eine ungültige GET Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b2b35832-ee43-47a5-9acb-c02f043b01c0",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige POST Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ba53a48-da96-4776-83d7-74b9871ead33",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige PUT Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b0cd469-15b4-45f4-9491-1dd10483c8ad",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          },
          {
            "title": "soll für eine ungültige DELETE Route einen 404 liefern",
            "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "23a467ce-7eda-455c-85b2-a7a5c1ab220a",
            "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 39,
        "rootEmpty": false
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 61,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7e346246-2fa5-4a4a-960a-383f9fa71d68",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 91,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bb330cab-bd20-4309-85df-2700cf72b303",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a49de8b-7917-48da-b34c-a68434a763b1",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7661522-e8c6-4a6a-8ca3-43542143437c",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "076dc445-eaca-439c-b525-d98038841346",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Platz laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b518646-3bcd-4486-9cd2-d04aaf951f7a",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Datum laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "748b3d1a-d3c1-47ec-98b0-4cbdae6bcd99",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e2e8c6d-8a45-469c-a6a1-7d9e954b0b65",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "866f36d5-1d1b-42b7-8e35-6e4ae1fb47a5",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 43,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "97940540-b54a-473f-908f-7efb666e4301",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "819bf906-88d7-4c20-93e3-279c0377fbb0",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7ee2d305-ab5c-4e5f-8a0c-a831d18a969b",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b0a99299-aa67-4a09-9ce6-13d8d00c2c31",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 187,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ed310ed2-20dd-482f-b734-c0ce20ac63aa",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e85d25a0-9e85-4aed-bd8e-15ddb404cdef",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 67,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2d33daed-81aa-41fc-9bb7-a6da348ed464",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 77,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52bfaa7b-b9bb-4b7c-bdc5-937a71bd5335",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cece3394-c70f-4f1e-9c94-943e63e571fa",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "2e594de3-1794-40e7-8510-30b87acd6bb5",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 61,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7e346246-2fa5-4a4a-960a-383f9fa71d68",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 91,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bb330cab-bd20-4309-85df-2700cf72b303",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a49de8b-7917-48da-b34c-a68434a763b1",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7661522-e8c6-4a6a-8ca3-43542143437c",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "076dc445-eaca-439c-b525-d98038841346",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Platz laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b518646-3bcd-4486-9cd2-d04aaf951f7a",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Spiele nach Datum laden",
            "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "748b3d1a-d3c1-47ec-98b0-4cbdae6bcd99",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6e2e8c6d-8a45-469c-a6a1-7d9e954b0b65",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "866f36d5-1d1b-42b7-8e35-6e4ae1fb47a5",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 43,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "97940540-b54a-473f-908f-7efb666e4301",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "819bf906-88d7-4c20-93e3-279c0377fbb0",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7ee2d305-ab5c-4e5f-8a0c-a831d18a969b",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b0a99299-aa67-4a09-9ce6-13d8d00c2c31",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 187,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ed310ed2-20dd-482f-b734-c0ce20ac63aa",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e85d25a0-9e85-4aed-bd8e-15ddb404cdef",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 67,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2d33daed-81aa-41fc-9bb7-a6da348ed464",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 77,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52bfaa7b-b9bb-4b7c-bdc5-937a71bd5335",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          },
          {
            "title": "soll die Reihenfolge der Spiele ändern können",
            "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cece3394-c70f-4f1e-9c94-943e63e571fa",
            "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 815,
        "rootEmpty": false
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "69e7d0a8-0c71-4bba-bba1-365fab206051",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e68108f-5193-43e0-8435-6149b35862cf",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c300fa1d-1bfe-4ae1-a5d9-4382d4ee6181",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d2907584-f2fd-485d-bd46-cae862ab4f62",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "93f0ea86-0a1e-429a-a645-06e35a944d80",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8c461034-6b4d-46db-800d-8babb5bd151f",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9772ffb5-591b-4833-bf89-ff9e886b5739",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80aa3c08-9c44-48d9-ba43-72dd914c0f0c",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
            "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
            "timedOut": false,
            "duration": 120,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "409a18c1-f46b-414e-b6a5-7fff8ae82a16",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "69e7d0a8-0c71-4bba-bba1-365fab206051",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e68108f-5193-43e0-8435-6149b35862cf",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c300fa1d-1bfe-4ae1-a5d9-4382d4ee6181",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d2907584-f2fd-485d-bd46-cae862ab4f62",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "93f0ea86-0a1e-429a-a645-06e35a944d80",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8c461034-6b4d-46db-800d-8babb5bd151f",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9772ffb5-591b-4833-bf89-ff9e886b5739",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80aa3c08-9c44-48d9-ba43-72dd914c0f0c",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          },
          {
            "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
            "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
            "timedOut": false,
            "duration": 120,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "409a18c1-f46b-414e-b6a5-7fff8ae82a16",
            "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 679,
        "rootEmpty": false
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "08a87931-1c09-4b8a-b0b9-9f7ebcf5be75",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b6f27608-4e25-4de2-82f0-37c9755aa2fc",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "30574678-258c-4078-a682-7e91da770462",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 72,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d09d9db5-0da8-4638-9eac-1d47c4887b64",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0df896b1-589f-4092-8331-870de9a6f91f",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "abf1bb5e-050c-402b-a0e1-17a432107e7c",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2864749-e024-48e2-8c93-8b78845c9226",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a2bd3cf0-4e51-4800-bb36-0154a4ac8202",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bededeb6-f2c0-4d5f-baeb-6049af02d407",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "054aca3d-c565-4c0f-9c77-0e1d8f5e4ffd",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ebfb7280-bf3a-4ac9-b7fb-e087e567bf86",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "08a87931-1c09-4b8a-b0b9-9f7ebcf5be75",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b6f27608-4e25-4de2-82f0-37c9755aa2fc",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "30574678-258c-4078-a682-7e91da770462",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 72,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d09d9db5-0da8-4638-9eac-1d47c4887b64",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0df896b1-589f-4092-8331-870de9a6f91f",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "abf1bb5e-050c-402b-a0e1-17a432107e7c",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c2864749-e024-48e2-8c93-8b78845c9226",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a2bd3cf0-4e51-4800-bb36-0154a4ac8202",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bededeb6-f2c0-4d5f-baeb-6049af02d407",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "054aca3d-c565-4c0f-9c77-0e1d8f5e4ffd",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ebfb7280-bf3a-4ac9-b7fb-e087e567bf86",
            "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 421,
        "rootEmpty": false
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 182,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c9ed2f5-4518-4937-9d22-d387f8af0cef",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6646e369-b3d9-4d05-aa4a-02c66a1b5e2a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 168,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f1ea2f7-d869-40d7-a66a-83866b65cd39",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5bc4653d-fc39-40c7-8496-b96456a7f0e0",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "962b5476-595f-45d2-8b6c-e964b99eb2ff",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 123,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "643b70ba-7d4e-485e-9d5d-91fe904264f1",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c00e142-b05e-4884-b144-31c688843d3a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aa502e49-e899-4cf9-8e6e-f6c9b46d2d46",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "20f56a55-3982-49c9-954e-712db8b1a07d",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ac57c675-af00-45f3-8073-1c3d2d36861e",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3236f8f4-cd3e-43bf-b929-d2ae89ac85de",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "63dc78ec-e6a6-4d96-a72c-68d61e0d65e1",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a712e313-9f4e-4240-b4a6-3defd822d83a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "850a9eff-bd7c-42b8-902e-f43774626b98",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19b458ad-9f20-4c49-8e49-e68421762dd4",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a13fbaa3-e45d-41a0-904c-f5de4197d330",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72ceefeb-b970-421b-a382-1a9a8c0ed688",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "83d4dfff-e0a4-4a4d-a0e4-d25e32144d9c",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "76596ca2-5b25-4004-972c-2521d366707b",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 182,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9c9ed2f5-4518-4937-9d22-d387f8af0cef",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6646e369-b3d9-4d05-aa4a-02c66a1b5e2a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 168,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f1ea2f7-d869-40d7-a66a-83866b65cd39",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5bc4653d-fc39-40c7-8496-b96456a7f0e0",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "962b5476-595f-45d2-8b6c-e964b99eb2ff",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 123,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "643b70ba-7d4e-485e-9d5d-91fe904264f1",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c00e142-b05e-4884-b144-31c688843d3a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aa502e49-e899-4cf9-8e6e-f6c9b46d2d46",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "20f56a55-3982-49c9-954e-712db8b1a07d",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ac57c675-af00-45f3-8073-1c3d2d36861e",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3236f8f4-cd3e-43bf-b929-d2ae89ac85de",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "63dc78ec-e6a6-4d96-a72c-68d61e0d65e1",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a712e313-9f4e-4240-b4a6-3defd822d83a",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "850a9eff-bd7c-42b8-902e-f43774626b98",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19b458ad-9f20-4c49-8e49-e68421762dd4",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a13fbaa3-e45d-41a0-904c-f5de4197d330",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72ceefeb-b970-421b-a382-1a9a8c0ed688",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "83d4dfff-e0a4-4a4d-a0e4-d25e32144d9c",
            "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1039,
        "rootEmpty": false
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9c1ce41c-b311-4e4f-b2bd-27f3f321be22",
                "parentUUID": "6e63f422-923c-4dd5-b6c5-6645a47f1e47",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "6e63f422-923c-4dd5-b6c5-6645a47f1e47",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9c1ce41c-b311-4e4f-b2bd-27f3f321be22",
                "parentUUID": "6e63f422-923c-4dd5-b6c5-6645a47f1e47",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9,
            "rootEmpty": false
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f59c3827-4e47-43bd-b432-452b5aa6f5b9",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b15e942b-6f02-4523-a061-08398fc48981",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6b6a67b2-818d-45be-866a-5b5a278c2505",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "023e2785-257e-4bf8-8f1d-3f33b28d5818",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "033cf324-f307-4591-861a-96aa86419b7b",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "84ff35ae-eeaa-4709-9448-64d65b106040",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3cb5c2ce-572d-49a1-9e31-06af4d661bed",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f59c3827-4e47-43bd-b432-452b5aa6f5b9",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b15e942b-6f02-4523-a061-08398fc48981",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6b6a67b2-818d-45be-866a-5b5a278c2505",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "023e2785-257e-4bf8-8f1d-3f33b28d5818",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "033cf324-f307-4591-861a-96aa86419b7b",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "84ff35ae-eeaa-4709-9448-64d65b106040",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3cb5c2ce-572d-49a1-9e31-06af4d661bed",
                "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 128,
            "rootEmpty": false
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e708aba1-97be-4d85-bf61-002f3a262b7d",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87ad3f41-b568-4f08-b8b2-024ea3e1bbd3",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55c00189-a909-43a6-bb2e-c60231947328",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e708aba1-97be-4d85-bf61-002f3a262b7d",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87ad3f41-b568-4f08-b8b2-024ea3e1bbd3",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55c00189-a909-43a6-bb2e-c60231947328",
                    "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 47,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb184f7f-527a-464f-8241-654e33f88abc",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a085661-c51f-4b68-a7cf-b2dfe90766df",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a11143a-9419-45bc-a282-e3b44524dd76",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb184f7f-527a-464f-8241-654e33f88abc",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a085661-c51f-4b68-a7cf-b2dfe90766df",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a11143a-9419-45bc-a282-e3b44524dd76",
                    "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 26,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0178d32a-f187-4ad6-890d-a8a7019615ef",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8122fd1-2fd1-48ba-8530-8877fc58aee2",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb8bb01a-3b2f-440e-844d-33d33d155da6",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00da3716-5250-4bc5-986b-7bff01fb4057",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93a61817-4f5a-411a-b9e1-b6c95698e471",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23254a72-907d-49f2-b7e2-f933e8c066ea",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0178d32a-f187-4ad6-890d-a8a7019615ef",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8122fd1-2fd1-48ba-8530-8877fc58aee2",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb8bb01a-3b2f-440e-844d-33d33d155da6",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00da3716-5250-4bc5-986b-7bff01fb4057",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93a61817-4f5a-411a-b9e1-b6c95698e471",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23254a72-907d-49f2-b7e2-f933e8c066ea",
                    "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 29,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5785a7a2-3d36-4ef4-9fb7-0855ec86592a",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fcb13b0-460e-4e90-8ccc-254395e10f68",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7e80b0b-01af-4a51-b3b7-e257f2356436",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da22f283-4445-4331-9012-d5de48b9c1b7",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60abe987-dd21-4eec-8bd5-606b9c6a775c",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28e37ef2-108f-484d-9e3c-a65148ee5ed9",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64599a1a-d142-4bc1-9bdc-09c0762dd123",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9d41d10-3196-454e-b0d7-419436698a49",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a461bfb4-a97d-432b-a90c-e1d0ad0e230c",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5785a7a2-3d36-4ef4-9fb7-0855ec86592a",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fcb13b0-460e-4e90-8ccc-254395e10f68",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7e80b0b-01af-4a51-b3b7-e257f2356436",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da22f283-4445-4331-9012-d5de48b9c1b7",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60abe987-dd21-4eec-8bd5-606b9c6a775c",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28e37ef2-108f-484d-9e3c-a65148ee5ed9",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64599a1a-d142-4bc1-9bdc-09c0762dd123",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9d41d10-3196-454e-b0d7-419436698a49",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a461bfb4-a97d-432b-a90c-e1d0ad0e230c",
                    "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 57,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80850de8-113c-43a8-9431-8d9636dd029c",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed95bf96-b1f5-4ee8-9ac7-7c12ef3293e9",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e680986f-f2e9-41a0-8af9-5a9b64e455ed",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a453a17f-467a-4f5d-afa3-d3144e1b38da",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f988d243-543c-40b8-bf55-14a81d173d2e",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9259fdc1-917e-4f76-a270-9cbb85c4f501",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a67bd5b3-c7e5-41b0-9b28-f7dd006094b2",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "408cce32-ab01-4aec-acc3-7e9b6d8b4bbc",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "623c0957-2415-4334-9c27-3e188ef92119",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc0b8c90-899a-4ea7-871d-48ac0c1b5fe7",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e3837f2-f6b3-40ff-8188-8b13cf7bab95",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f877b0a0-6960-4ef3-ab5f-03d6e8a15a86",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80850de8-113c-43a8-9431-8d9636dd029c",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed95bf96-b1f5-4ee8-9ac7-7c12ef3293e9",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e680986f-f2e9-41a0-8af9-5a9b64e455ed",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a453a17f-467a-4f5d-afa3-d3144e1b38da",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f988d243-543c-40b8-bf55-14a81d173d2e",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9259fdc1-917e-4f76-a270-9cbb85c4f501",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a67bd5b3-c7e5-41b0-9b28-f7dd006094b2",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "408cce32-ab01-4aec-acc3-7e9b6d8b4bbc",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "623c0957-2415-4334-9c27-3e188ef92119",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc0b8c90-899a-4ea7-871d-48ac0c1b5fe7",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e3837f2-f6b3-40ff-8188-8b13cf7bab95",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f877b0a0-6960-4ef3-ab5f-03d6e8a15a86",
                    "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 90,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/jugenden soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9313422-d564-44ab-8ff7-05799d44aed5",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b40a1a1d-343e-4f2b-914d-0cae7716a47a",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0539b501-2973-46c1-8234-5f982e08b875",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81274345-2eb0-4679-84df-d3c2e28a5b5a",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e80660d-49d8-4fc6-8695-acb0ed26ebfc",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "384f9809-966b-4f99-969a-25de7e9e6215",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9313422-d564-44ab-8ff7-05799d44aed5",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b40a1a1d-343e-4f2b-914d-0cae7716a47a",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0539b501-2973-46c1-8234-5f982e08b875",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81274345-2eb0-4679-84df-d3c2e28a5b5a",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e80660d-49d8-4fc6-8695-acb0ed26ebfc",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "384f9809-966b-4f99-969a-25de7e9e6215",
                    "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1e732a0-3602-41a3-9c69-129d8dde2ebd",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ed862da-ae8b-48c2-9211-0a8eef5ec6a9",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1bc3e658-1f7d-4153-8011-959b9cc4cc02",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e3b6fb0-a8d9-49ac-bb14-7c73567367cf",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c7f6a77-21b0-413d-9e9b-03fce61d3c41",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00b17611-a74a-4ec3-b3e9-b563fc8b8c21",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1e732a0-3602-41a3-9c69-129d8dde2ebd",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ed862da-ae8b-48c2-9211-0a8eef5ec6a9",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1bc3e658-1f7d-4153-8011-959b9cc4cc02",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e3b6fb0-a8d9-49ac-bb14-7c73567367cf",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c7f6a77-21b0-413d-9e9b-03fce61d3c41",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00b17611-a74a-4ec3-b3e9-b563fc8b8c21",
                    "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 23,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ac8188a-4442-4ca9-802a-2b4f7e0a8c4e",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b3e0890-15c4-4e2f-af7b-364abeac9391",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62b3d8ce-8c4d-455b-b8d8-02a611366dbc",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81abd2e7-ab55-4f64-854c-df6585a5075b",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47573448-6f19-4785-8c8a-dbf42459c329",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68807420-11ea-4a84-9aa9-960d3de5e44d",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76b81cf8-a36f-4d66-8a32-a513dbdbae4b",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4db460c1-3701-47dd-9c91-93ae7033c1da",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc0bcd77-b2d2-439b-84f2-3ee79dfd5384",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fff1e1b0-b847-4cd5-83ff-aa824d87dfc5",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb765acf-835d-458a-bb18-d2a0d68e2111",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a196612-c504-402d-a699-425c016d5448",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ac8188a-4442-4ca9-802a-2b4f7e0a8c4e",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b3e0890-15c4-4e2f-af7b-364abeac9391",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62b3d8ce-8c4d-455b-b8d8-02a611366dbc",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81abd2e7-ab55-4f64-854c-df6585a5075b",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47573448-6f19-4785-8c8a-dbf42459c329",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68807420-11ea-4a84-9aa9-960d3de5e44d",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76b81cf8-a36f-4d66-8a32-a513dbdbae4b",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4db460c1-3701-47dd-9c91-93ae7033c1da",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc0bcd77-b2d2-439b-84f2-3ee79dfd5384",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fff1e1b0-b847-4cd5-83ff-aa824d87dfc5",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb765acf-835d-458a-bb18-d2a0d68e2111",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a196612-c504-402d-a699-425c016d5448",
                    "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 95,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/order soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "afe01872-80a2-4bdb-8c73-ea520f251be9",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f704efce-6726-4377-98b1-6ebd2e429e0b",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5e8ca7a-2122-4128-b836-42a68098d326",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "debb4092-fe0c-4046-8b5c-ece459c44d6c",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edcbbba4-faf6-4722-a83d-c3cbf49944a0",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44ee707e-2ed4-4491-b431-81d0ec1dd68c",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd1954f0-44b3-4d41-bf65-73b31660d05a",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a69e565a-46ad-43bd-b124-ba321fc0719a",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "935ffb60-3dba-4ebc-a92e-9331193bc955",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa93eec6-34c9-401d-97ae-19409ca157a6",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a20ce392-567e-4f0b-bbbe-872d0b0e18e8",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47aa30ea-7a6f-4b12-889b-f86190feb130",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "afe01872-80a2-4bdb-8c73-ea520f251be9",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f704efce-6726-4377-98b1-6ebd2e429e0b",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5e8ca7a-2122-4128-b836-42a68098d326",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "debb4092-fe0c-4046-8b5c-ece459c44d6c",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edcbbba4-faf6-4722-a83d-c3cbf49944a0",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44ee707e-2ed4-4491-b431-81d0ec1dd68c",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd1954f0-44b3-4d41-bf65-73b31660d05a",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a69e565a-46ad-43bd-b124-ba321fc0719a",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "935ffb60-3dba-4ebc-a92e-9331193bc955",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa93eec6-34c9-401d-97ae-19409ca157a6",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a20ce392-567e-4f0b-bbbe-872d0b0e18e8",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47aa30ea-7a6f-4b12-889b-f86190feb130",
                    "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 63,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a97cc5b-2fda-4a68-9c79-120f11239111",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88a69e2c-969e-43b7-927d-db52bbba1b85",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53e4e01f-9d3c-4641-ba56-e0249448a353",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1a40cfe-6953-4d53-a33c-ca8f26e09293",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16176a5e-121c-4414-8489-57154cb05203",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63c7e0fd-41df-4ec2-bfd1-c559a3dc267a",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a97cc5b-2fda-4a68-9c79-120f11239111",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88a69e2c-969e-43b7-927d-db52bbba1b85",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53e4e01f-9d3c-4641-ba56-e0249448a353",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1a40cfe-6953-4d53-a33c-ca8f26e09293",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16176a5e-121c-4414-8489-57154cb05203",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63c7e0fd-41df-4ec2-bfd1-c559a3dc267a",
                    "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 28,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dd98a17-703f-48d4-bd62-21b6e8a54be5",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "625693ec-7b06-4b6a-a84f-e41ddf532f56",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e06dd8c6-9e79-46dd-936e-2a0144a0402a",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dd98a17-703f-48d4-bd62-21b6e8a54be5",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "625693ec-7b06-4b6a-a84f-e41ddf532f56",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e06dd8c6-9e79-46dd-936e-2a0144a0402a",
                    "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 89,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a163878-4434-42e4-bca2-1caf4ee3a896",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "546de277-6936-402b-8ab9-03d2d8efc78d",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e619028f-5663-480d-976f-b2668c090f06",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0f339f22-750c-4e0d-a251-56d9523c0826",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a163878-4434-42e4-bca2-1caf4ee3a896",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "546de277-6936-402b-8ab9-03d2d8efc78d",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e619028f-5663-480d-976f-b2668c090f06",
                    "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 14,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1050e55-a392-46d9-b6cb-d9acc2376249",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bec9411-de72-4991-b622-7d3d33fee9f3",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4b46fc7-b8e0-43f4-81e7-e4cd04c8b520",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba3acad4-a901-467a-a367-8efdb9d80ffb",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a007cb3-f595-49e0-8293-9b81ca970b70",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b05dd3f9-588c-49a8-ada6-e2f5fe97461d",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc04feaf-539d-4220-81a7-b93f996ff441",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80b2bf4d-83a8-49ad-83ce-bce37c8d7a0c",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de46d6d3-73b1-4c7c-9b07-3ce3843eeba4",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bb8cced-4a30-41d4-af8d-b6045154516c",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7945e0cf-851c-44c4-b985-24cbf9c3c344",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d981eed-9615-49fa-a3ca-40aeeda1c15e",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "38d924b5-11cb-4853-9787-e87b7c87b184",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1050e55-a392-46d9-b6cb-d9acc2376249",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bec9411-de72-4991-b622-7d3d33fee9f3",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4b46fc7-b8e0-43f4-81e7-e4cd04c8b520",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba3acad4-a901-467a-a367-8efdb9d80ffb",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a007cb3-f595-49e0-8293-9b81ca970b70",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b05dd3f9-588c-49a8-ada6-e2f5fe97461d",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc04feaf-539d-4220-81a7-b93f996ff441",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80b2bf4d-83a8-49ad-83ce-bce37c8d7a0c",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de46d6d3-73b1-4c7c-9b07-3ce3843eeba4",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bb8cced-4a30-41d4-af8d-b6045154516c",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7945e0cf-851c-44c4-b985-24cbf9c3c344",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d981eed-9615-49fa-a3ca-40aeeda1c15e",
                    "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 54,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccecd956-7389-490c-9563-66a9b6372940",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe307ec7-cf96-4d02-879b-3bb3d35954ac",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a9ae28f-7798-4941-b1d4-3e8bf7433399",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2609a85f-1c9c-40ec-98cc-5e1d1e06f05f",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7777321-8ed0-4dce-9487-92e6efc5390d",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c2f0289-026e-42b4-a420-f80a14276be3",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "920695bb-5b93-4e24-bc3c-5b7db2088b75",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69a04d9d-f85c-49fa-a601-3aea4f46b563",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb439a99-18c1-42fc-9ca0-b005a8196778",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4990656a-7226-43af-bb34-72e73752d893",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b7c61f4-abb7-4739-8d1a-d2aa96f80733",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "060b0d61-89c4-4e33-a376-cee2bb33ad4d",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccecd956-7389-490c-9563-66a9b6372940",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe307ec7-cf96-4d02-879b-3bb3d35954ac",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a9ae28f-7798-4941-b1d4-3e8bf7433399",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2609a85f-1c9c-40ec-98cc-5e1d1e06f05f",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7777321-8ed0-4dce-9487-92e6efc5390d",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c2f0289-026e-42b4-a420-f80a14276be3",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "920695bb-5b93-4e24-bc3c-5b7db2088b75",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69a04d9d-f85c-49fa-a601-3aea4f46b563",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb439a99-18c1-42fc-9ca0-b005a8196778",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4990656a-7226-43af-bb34-72e73752d893",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b7c61f4-abb7-4739-8d1a-d2aa96f80733",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "060b0d61-89c4-4e33-a376-cee2bb33ad4d",
                    "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 79,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/userDetails soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4059bf5-eb79-4a7e-9961-83866014753f",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec2eab5b-2f10-4668-aec3-51537faef284",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d886cccd-d856-4572-a0f6-76ffca919f3d",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "853ee646-f4af-4d01-a772-77c258d57c79",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f445a1e-f521-490a-8dce-45ef2d3940c1",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e5c2701-3222-468d-b673-3e4d5d3cf495",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0956097-167a-4ba3-8727-165d37648875",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b803b8e-e703-4f1b-bbf0-66c4a629ad09",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1824e924-6723-45f0-9ec4-601eb62870bf",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4295124-7f5d-482d-ae91-ad5974c057d1",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61aa769a-bdf9-4876-8b4b-99cb9227a59e",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eafda514-bfbc-4fc5-bbdf-fbb0bf03c12c",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4059bf5-eb79-4a7e-9961-83866014753f",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec2eab5b-2f10-4668-aec3-51537faef284",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d886cccd-d856-4572-a0f6-76ffca919f3d",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "853ee646-f4af-4d01-a772-77c258d57c79",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f445a1e-f521-490a-8dce-45ef2d3940c1",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e5c2701-3222-468d-b673-3e4d5d3cf495",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0956097-167a-4ba3-8727-165d37648875",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b803b8e-e703-4f1b-bbf0-66c4a629ad09",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1824e924-6723-45f0-9ec4-601eb62870bf",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4295124-7f5d-482d-ae91-ad5974c057d1",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61aa769a-bdf9-4876-8b4b-99cb9227a59e",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eafda514-bfbc-4fc5-bbdf-fbb0bf03c12c",
                    "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 53,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/ansprechpartner soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e31ad64e-47f6-4dd5-994c-92659c6f963d",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3598c17a-b135-40ac-8ce3-9d7627a4c8cd",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d565b8f-c89e-4125-8603-8210046d96a7",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3936a95d-b06e-4933-8fc3-75db58dfef39",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1c50a14-63c3-4e94-8931-f351c980b47e",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a0fc4b6-c593-4fef-8d19-2c1f4d694296",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36b4fb79-895c-4e50-9ca0-67b94daf89ea",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f50dea47-4330-4f2b-ac2b-336a1fcbe39d",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf66c64e-b787-4c02-aae8-5d997c0bd204",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "24b1094b-0224-465e-8c2b-159e61301d56",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e31ad64e-47f6-4dd5-994c-92659c6f963d",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3598c17a-b135-40ac-8ce3-9d7627a4c8cd",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d565b8f-c89e-4125-8603-8210046d96a7",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3936a95d-b06e-4933-8fc3-75db58dfef39",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1c50a14-63c3-4e94-8931-f351c980b47e",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a0fc4b6-c593-4fef-8d19-2c1f4d694296",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36b4fb79-895c-4e50-9ca0-67b94daf89ea",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f50dea47-4330-4f2b-ac2b-336a1fcbe39d",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf66c64e-b787-4c02-aae8-5d997c0bd204",
                    "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 80,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "50dff92c-f175-46e3-99f2-2dfe05a48783",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/authorization.spec.js",
        "uuid": "8e87cae1-a4b8-4b17-8b15-3f4665f8830f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Bad Request Handler",
        "suites": [
          {
            "title": "es soll geprüft werden ob benötigte Parameter vorhanden sind",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d01b5070-5b29-4a0c-b20e-676b877cb148",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa57ff0f-9241-435a-9f56-74d5ea3a9054",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c1f99e2-2d4e-4348-afa5-0f0a650adf3f",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [
              {
                "title": "Der Request soll korrekt ausgeführt werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d01b5070-5b29-4a0c-b20e-676b877cb148",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              },
              {
                "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa57ff0f-9241-435a-9f56-74d5ea3a9054",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              },
              {
                "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
                "fullTitle": "Bad Request Handler es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c1f99e2-2d4e-4348-afa5-0f0a650adf3f",
                "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 53,
            "rootEmpty": false
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22277b37-2ffb-4c52-8d05-e334f8cdb360",
                    "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a73eb84b-478c-4655-b9a9-848d456cb9d3",
                    "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "a70a0139-8b1e-4292-b72d-318bae861daf",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: benötigt den Key \"body.subject\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22277b37-2ffb-4c52-8d05-e334f8cdb360",
                    "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: benötigt den Key \"body.text\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a73eb84b-478c-4655-b9a9-848d456cb9d3",
                    "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 10,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/email/subscriber hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e0c17b9-353f-4a54-bd8e-e709f264f001",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e917fb80-c770-4f98-912e-af031e0dbce4",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42fb1dac-b326-4a5d-8001-b9de7d530e7f",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21f1cbdc-f210-4159-9fa5-a864e03efe5d",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e0c17b9-353f-4a54-bd8e-e709f264f001",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e917fb80-c770-4f98-912e-af031e0dbce4",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42fb1dac-b326-4a5d-8001-b9de7d530e7f",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21f1cbdc-f210-4159-9fa5-a864e03efe5d",
                    "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 32,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/email/bug hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2e4ab5a-5547-4ae4-8223-36ea0072e376",
                    "parentUUID": "35efad0a-fd3c-490c-b4d1-471955f201e5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "35efad0a-fd3c-490c-b4d1-471955f201e5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2e4ab5a-5547-4ae4-8223-36ea0072e376",
                    "parentUUID": "35efad0a-fd3c-490c-b4d1-471955f201e5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 4,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/gruppen hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3c71571-66f8-40ab-a77b-f06c094be0fb",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12d5cd18-b593-4f3c-80ad-f81dc855d6c7",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e3c5f3f-f94f-4866-89ac-bf9138acf113",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "9997160a-c8b0-443e-a343-38bc798039ec",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3c71571-66f8-40ab-a77b-f06c094be0fb",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12d5cd18-b593-4f3c-80ad-f81dc855d6c7",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e3c5f3f-f94f-4866-89ac-bf9138acf113",
                    "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 19,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/teams hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "847d3cbf-8ef2-430f-b10b-afd94dd23615",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8795c821-b743-4a3d-98bd-83d22e438e46",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b5f7c91-05f1-407f-bfe4-8ff7118d716b",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81397402-7318-45c6-991d-dde238f2e0c0",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "690f5166-0e62-4281-bf03-6ac119d48312",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "847d3cbf-8ef2-430f-b10b-afd94dd23615",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8795c821-b743-4a3d-98bd-83d22e438e46",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b5f7c91-05f1-407f-bfe4-8ff7118d716b",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81397402-7318-45c6-991d-dde238f2e0c0",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "690f5166-0e62-4281-bf03-6ac119d48312",
                    "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 34,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/jugenden hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac22ede6-1052-47eb-b0c7-6db21727d535",
                    "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18a84bfc-9ccc-4960-a697-1a2faf40e787",
                    "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac22ede6-1052-47eb-b0c7-6db21727d535",
                    "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18a84bfc-9ccc-4960-a697-1a2faf40e787",
                    "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 9,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e4b881d-a887-4eb4-b5b1-4a3e828ef61b",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ffc5eb0a-3188-48af-9cd6-f1fc3307c80b",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "273cf485-5bed-496c-bef9-4c99aa8f9e3d",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e4b881d-a887-4eb4-b5b1-4a3e828ef61b",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ffc5eb0a-3188-48af-9cd6-f1fc3307c80b",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "273cf485-5bed-496c-bef9-4c99aa8f9e3d",
                    "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 13,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spiele/tore hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a45eb41e-c2ae-475f-8a7e-a2a9dd86ebbe",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70e47cc8-49e7-42e7-8142-606934b1e221",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a46ec14-af9e-43ea-ac4c-38a519eea96d",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87e322dd-0bdf-462c-a4a5-a6829e820d22",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a45eb41e-c2ae-475f-8a7e-a2a9dd86ebbe",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70e47cc8-49e7-42e7-8142-606934b1e221",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a46ec14-af9e-43ea-ac4c-38a519eea96d",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87e322dd-0bdf-462c-a4a5-a6829e820d22",
                    "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 51,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c26724de-273d-40aa-8a03-af8c228ce46e",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdc70750-dc3c-45fd-950c-dc00059e7ccc",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9102a54f-beee-42c3-9b9b-60f272b6c5b5",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e895d44-6d54-4318-a56d-6badf05debb1",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee8dbd58-e7a7-4ef9-a7b0-0ed40845b80e",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8bbcc36-6310-4c76-84e0-e97454a62349",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c26724de-273d-40aa-8a03-af8c228ce46e",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdc70750-dc3c-45fd-950c-dc00059e7ccc",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9102a54f-beee-42c3-9b9b-60f272b6c5b5",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e895d44-6d54-4318-a56d-6badf05debb1",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee8dbd58-e7a7-4ef9-a7b0-0ed40845b80e",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8bbcc36-6310-4c76-84e0-e97454a62349",
                    "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 33,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/register hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fdb11c9-2558-4344-865e-1944cf1442fc",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc4e590a-f69e-4015-b85c-1668941f3e71",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4443ff38-1d7f-4cfb-9369-f48bbce5d338",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fdb11c9-2558-4344-865e-1944cf1442fc",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc4e590a-f69e-4015-b85c-1668941f3e71",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: benötigt den Key \"body.role\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4443ff38-1d7f-4cfb-9369-f48bbce5d338",
                    "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 17,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/login hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89f0b4c1-fef0-46dd-90fd-9ebb695ead75",
                    "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0adcd40-3d2a-4ca7-9d2d-a41fe15fe6da",
                    "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89f0b4c1-fef0-46dd-90fd-9ebb695ead75",
                    "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/login: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0adcd40-3d2a-4ca7-9d2d-a41fe15fe6da",
                    "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 6,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/delete hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5ffc4ee-af6d-4fd4-b2e4-174e063ffb10",
                    "parentUUID": "d278d02f-f1a5-4693-a34d-006441bcc3dd",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "d278d02f-f1a5-4693-a34d-006441bcc3dd",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5ffc4ee-af6d-4fd4-b2e4-174e063ffb10",
                    "parentUUID": "d278d02f-f1a5-4693-a34d-006441bcc3dd",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/password-forgot hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f84f85e-3570-4100-a704-919919a9d7e2",
                    "parentUUID": "2c6baf4d-12f6-4e30-b6eb-a051f10dfbe3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "2c6baf4d-12f6-4e30-b6eb-a051f10dfbe3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f84f85e-3570-4100-a704-919919a9d7e2",
                    "parentUUID": "2c6baf4d-12f6-4e30-b6eb-a051f10dfbe3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/password-reset/check hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3acb057-55e6-4846-a11e-272e51adcecb",
                    "parentUUID": "acbca163-80d7-47a1-a3ad-7a32a13fd281",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "acbca163-80d7-47a1-a3ad-7a32a13fd281",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3acb057-55e6-4846-a11e-272e51adcecb",
                    "parentUUID": "acbca163-80d7-47a1-a3ad-7a32a13fd281",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/password-reset hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e36ddb2-8272-4ea7-9390-0c57bb79c90f",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06430356-7a41-482e-acb0-1291fba8cb5f",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "813aeb07-0332-48bb-89eb-3828ee684592",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e36ddb2-8272-4ea7-9390-0c57bb79c90f",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06430356-7a41-482e-acb0-1291fba8cb5f",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "813aeb07-0332-48bb-89eb-3828ee684592",
                    "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 8,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/users/userDetails hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0e0ef2e-f0af-43bc-a681-d2459a8d5a94",
                    "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3fccf51-0e3e-428d-9951-e7d0051a64de",
                    "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "72cf5980-7973-4272-8ec2-98a19bee3407",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0e0ef2e-f0af-43bc-a681-d2459a8d5a94",
                    "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3fccf51-0e3e-428d-9951-e7d0051a64de",
                    "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 13,
                "rootEmpty": false
              },
              {
                "title": "die Route /api/ansprechpartner hat benötigte Request-Parameter",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dc02e63-8a13-469e-bdb0-b521bebd5839",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9a5f98b-712b-411e-b418-1ed0f7db355c",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc720755-7a6e-4db1-ba50-4f89ca112e7e",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "807784ab-94f2-47b4-a3de-214de1043da8",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ccabdeb-25d4-496a-bdcd-733f38222d12",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/badRequestHandler.spec.js",
                "uuid": "a7616179-cc5e-4657-971a-31ec454ed37a",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
                "passes": [
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dc02e63-8a13-469e-bdb0-b521bebd5839",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9a5f98b-712b-411e-b418-1ed0f7db355c",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc720755-7a6e-4db1-ba50-4f89ca112e7e",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "807784ab-94f2-47b4-a3de-214de1043da8",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "fullTitle": "Prüfung der Routen die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ccabdeb-25d4-496a-bdcd-733f38222d12",
                    "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 47,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/badRequestHandler.spec.js",
            "uuid": "260958ed-44bc-4b24-ad23-f0fab115f93a",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/badRequestHandler.spec.js",
        "uuid": "0f498aa9-c6f4-4b88-abc1-b39265184104",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/badRequestHandler.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "c9877960-13af-431c-b368-2f870c5ab1c8",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d912c585-8c83-4754-a03d-77ab66e57749",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7ad01b0-9532-41c1-b340-ae5e5c24c3ab",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f15f0cb-ecd4-4718-a4d7-6fda9aa28845",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "780f4877-21a9-4753-be0b-6c7c2b5b6892",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5aae8690-78de-4feb-899b-0c6967e799f0",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc270681-fe66-4417-862c-ca00057cd433",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42979abd-7424-418c-abb0-4716ee8cca56",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6904d443-654d-4cd2-afbd-f42af9900846",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "79c33df8-7a8f-4a65-b17e-79d3fe74befd",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3'\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2472ffc3-0146-4f78-b13b-038cf293fead",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d5416fcc-8910-4c61-9fe1-3771540fba10",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6385af41-d5b0-4772-934f-c9b2e9408549",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8765784d-d158-44cb-b4bd-4ef51bbd6315",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die Anzahl PLätze zurück",
      "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6a7bb8a6-0741-46e9-aaca-7246b9e80a4e",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2250fa3-6991-484a-8cae-c8bbcff5a169",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "441b2345-d296-4711-a4e8-717a76c7d126",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f822adc-435a-4d09-9ddd-ad9b0bb8dce7",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7abb19bb-a521-47b1-83f2-fdf31a7f263a",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2e68aa32-1df9-44fa-a0c3-5a92df1eafea",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddb7cf32-1114-4771-8d54-8f60e058d736",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac7b1332-1586-49c8-88f2-11fcf5dc7bc1",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69da7109-a848-4104-871a-fb3a24b0d1db",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7e00846-591c-4b51-9d4a-32116b543210",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebd90d54-44f7-44c1-abaa-8a17df278b44",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd9f73ea-487b-45d8-b888-8e257e820933",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "569eddc1-581d-44d8-bc92-3317ac15b868",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "531fc247-f0e3-4e78-b245-b183f3dd4d27",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1cc5b1cf-e57e-490d-a823-29b5405f891a",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "596fb5ea-8fd4-4aac-9347-ea99cd735562",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2ff5596-0ce9-4d7f-b7a2-5f903e8a396a",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "687eedbc-34a1-480e-956e-12fe73b52dfa",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "82394cef-10b7-4689-abb1-9c6b26d179a9",
      "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "24afc939-7de8-439f-be80-56574e40f1dc",
      "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "678d85fe-03d3-427c-bcf1-08a04fe09a88",
      "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "a130673c-f7d8-4c8f-87f3-783a170de32d",
      "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "fb0250d2-4600-4ad5-bc1f-397fbee99e84",
      "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "a5256273-c45c-4279-869e-44f4fb388472",
      "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "ea842154-fbe1-459b-982b-a9e73c3e3fc6",
      "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "28a6532a-73ad-429d-b75a-5d3625e13c33",
      "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "542d2009-be69-4a3d-8dc5-6ca3be5e51e8",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "52319b2b-5d14-4420-a896-b44d238474e8",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "d98f5b64-9982-4c0d-9271-0948dae3c435",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "ed206594-6e35-4c92-a126-b8a532f3d0c5",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "7db40322-43fa-4f75-b33b-45fde22afc4e",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "e4324c9a-16a5-458d-a97f-93770de67bd6",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bebedef4-88c2-49d2-a4f0-059ae6d31296",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "db3175e3-acb9-4379-93c4-1321a126a01f",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "1efdff89-3c8f-45e2-930b-0ed54b87a482",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "af73d419-1115-4480-a757-5b94e0462498",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "8976db76-0113-4e73-afe2-c1da46876ca4",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "bcc1f058-c63a-4c89-8b61-9074f4f5b774",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "0e156452-47ad-470c-9970-8a86e6c8ce9a",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "e31d1ae9-7a3b-46cf-8828-f6b93d5291c3",
      "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c682af7e-e4a7-436a-9987-27ec6cd2ec17",
      "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "c56f63e6-a7af-4ab4-8d4e-0213fa23dbf6",
      "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "55494461-5212-422f-a5db-b725796936dc",
      "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "26ada94e-6606-4b9c-80ea-e27059655643",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "10eab601-926e-4e38-82c2-dbc8abb3c5e2",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "bba0a384-0266-484e-af28-63f9fd7dbe34",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "9dbaf476-de57-450f-92be-02b42eff7f3c",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "c244762e-69fd-49b8-bb23-79701d2183bf",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "7c8ac72d-b99a-434f-a6b2-45fd305ad8f9",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "338b4f0d-60d6-414f-978d-a659ea3413c5",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "f395f617-472d-4700-a125-410599322348",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "2d9248b4-b815-4528-905b-d386d9782e00",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "f4f29c10-a7aa-4848-8683-c59b76e41236",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "6913f923-8bd2-4d15-8e83-1f68c7e3f382",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "b79bd508-5bf7-4bea-8b4a-f62e9adcd0be",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "32863cdb-f168-4bd9-afb8-4dd26bbfd509",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f64b58b3-3ee8-4b5c-8b83-56dcebcc20af",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "aa2d16d2-2dab-428f-814c-b864c25a7137",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "fb421eb4-ceaa-484a-accb-77c571976d12",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "20c8f3b1-fb24-48ae-a3d9-766744b3c549",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b62fdda2-46a0-45be-806d-07a2e3744374",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d30233d0-3805-40d1-bc11-35bacbe0d8a2",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "6709a9b7-9a62-4ba0-97d8-78259d9a0827",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3cde5b9a-905c-410e-9d12-d100cfd0006e",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8369c61e-05e8-48fa-8048-df41c5a684a9",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "01153867-8f85-45bd-913b-c163de4a58ab",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1500e4e4-88fb-4321-87d1-bbab0cbb1a23",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c702a657-cdc1-47a6-9dbf-9707bd8ac113",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ddfe7f58-1bcf-487d-9c98-ca3b40bb94cb",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9bf8b8c0-164a-4ca6-b232-f664f9ac8217",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b95e9f5a-2120-4cd7-831a-a35a90ecbd11",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f89a6ea6-d57f-4b2c-ae56-01bdf95c2557",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9335b6ca-5af7-4679-beb1-ba9dd237fc31",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "4906978e-427b-4078-8552-8c28e65b62e6",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "7c9b36d8-e49b-4dc9-abbb-147d1aa1e653",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8563d2c1-088d-43ae-adfb-b7812a59f35c",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "620cd6df-0775-4c38-afcf-1b933067fc9f",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1ae96b3a-8871-4c1c-a9a2-ace9c831a95f",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ea40ac08-4224-4b9d-827b-55467159a30b",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "2a3bc2b1-ade1-4d17-a059-ae727fffff47",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "147e0cc3-27a6-430c-968a-6c4ae7209c6d",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "a4e751d0-b60b-4baa-a81c-40eae220b894",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "d6a346b5-bf3a-4253-9df4-200512493425",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5f274688-d9f9-481a-bde1-04d94931f6a0",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e5a5a4d3-7045-4122-b0fd-377e4bdcabbf",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "22dd3c6e-bc26-4291-8171-7be8cf32481c",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "97acd02b-907e-4257-b799-9a19b515b0f5",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bccf5f8-3726-4d87-8e80-229e5491b39f",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9e973560-6d63-47dc-882b-ecc520e16870",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "96176037-941a-41bd-aafe-b083e869dd25",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "ef651fdd-e993-460c-9e94-a05a314eb437",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b653a085-d774-4789-b17f-865ac0075ac2",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "60577cb0-410c-44e7-ae87-a6c2130303b2",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "30d19330-2bd0-49a8-a3d8-8621622849d7",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e19c00bf-194a-47ad-84ff-fe7ff80364f9",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e1f7e22f-d179-4504-b0da-3e731b3fb1ac",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "b1d9ab54-93cb-4a66-80f2-1be50540b589",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "4ad65078-50ee-4c4e-9e5d-73eeb3600aff",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aeea31b1-85f8-4b5d-9fff-080ad1791afb",
      "parentUUID": "7e91d631-fbb1-4df8-b427-ec6187f0e24b",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "617ba635-c17f-4b29-82ef-72148fbe7211",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a926951-8f7f-459a-a9aa-634b96fa28c0",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1ab2268-0567-4c2d-923b-2507692a92ed",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "643f4b69-9d65-47ac-91db-db4248cfe41c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc0b22e0-94af-4ddc-8d52-d3d8b7e6b77c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74ffd650-55e3-4cd6-86ce-b11006021b09",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d415f28-45d9-4095-98ab-ac4c09e95208",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ee90691c-25ee-4750-935e-591e1ed71f3c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d7707fda-e232-48ed-a1d5-ba998923ec65",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige GET Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b2b35832-ee43-47a5-9acb-c02f043b01c0",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige POST Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ba53a48-da96-4776-83d7-74b9871ead33",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige PUT Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b0cd469-15b4-45f4-9491-1dd10483c8ad",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige DELETE Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23a467ce-7eda-455c-85b2-a7a5c1ab220a",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e346246-2fa5-4a4a-960a-383f9fa71d68",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 91,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb330cab-bd20-4309-85df-2700cf72b303",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a49de8b-7917-48da-b34c-a68434a763b1",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7661522-e8c6-4a6a-8ca3-43542143437c",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "076dc445-eaca-439c-b525-d98038841346",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Platz laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b518646-3bcd-4486-9cd2-d04aaf951f7a",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Datum laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "748b3d1a-d3c1-47ec-98b0-4cbdae6bcd99",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e2e8c6d-8a45-469c-a6a1-7d9e954b0b65",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "866f36d5-1d1b-42b7-8e35-6e4ae1fb47a5",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97940540-b54a-473f-908f-7efb666e4301",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "819bf906-88d7-4c20-93e3-279c0377fbb0",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7ee2d305-ab5c-4e5f-8a0c-a831d18a969b",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0a99299-aa67-4a09-9ce6-13d8d00c2c31",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 187,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed310ed2-20dd-482f-b734-c0ce20ac63aa",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e85d25a0-9e85-4aed-bd8e-15ddb404cdef",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d33daed-81aa-41fc-9bb7-a6da348ed464",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 77,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52bfaa7b-b9bb-4b7c-bdc5-937a71bd5335",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cece3394-c70f-4f1e-9c94-943e63e571fa",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69e7d0a8-0c71-4bba-bba1-365fab206051",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e68108f-5193-43e0-8435-6149b35862cf",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c300fa1d-1bfe-4ae1-a5d9-4382d4ee6181",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d2907584-f2fd-485d-bd46-cae862ab4f62",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93f0ea86-0a1e-429a-a645-06e35a944d80",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c461034-6b4d-46db-800d-8babb5bd151f",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9772ffb5-591b-4833-bf89-ff9e886b5739",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80aa3c08-9c44-48d9-ba43-72dd914c0f0c",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
      "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
      "timedOut": false,
      "duration": 120,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "409a18c1-f46b-414e-b6a5-7fff8ae82a16",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "08a87931-1c09-4b8a-b0b9-9f7ebcf5be75",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b6f27608-4e25-4de2-82f0-37c9755aa2fc",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30574678-258c-4078-a682-7e91da770462",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 72,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d09d9db5-0da8-4638-9eac-1d47c4887b64",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0df896b1-589f-4092-8331-870de9a6f91f",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "abf1bb5e-050c-402b-a0e1-17a432107e7c",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2864749-e024-48e2-8c93-8b78845c9226",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a2bd3cf0-4e51-4800-bb36-0154a4ac8202",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bededeb6-f2c0-4d5f-baeb-6049af02d407",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 60,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "054aca3d-c565-4c0f-9c77-0e1d8f5e4ffd",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebfb7280-bf3a-4ac9-b7fb-e087e567bf86",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c9ed2f5-4518-4937-9d22-d387f8af0cef",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6646e369-b3d9-4d05-aa4a-02c66a1b5e2a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 168,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f1ea2f7-d869-40d7-a66a-83866b65cd39",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5bc4653d-fc39-40c7-8496-b96456a7f0e0",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "962b5476-595f-45d2-8b6c-e964b99eb2ff",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 123,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "643b70ba-7d4e-485e-9d5d-91fe904264f1",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c00e142-b05e-4884-b144-31c688843d3a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa502e49-e899-4cf9-8e6e-f6c9b46d2d46",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "20f56a55-3982-49c9-954e-712db8b1a07d",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac57c675-af00-45f3-8073-1c3d2d36861e",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3236f8f4-cd3e-43bf-b929-d2ae89ac85de",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "63dc78ec-e6a6-4d96-a72c-68d61e0d65e1",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 208,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a712e313-9f4e-4240-b4a6-3defd822d83a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "850a9eff-bd7c-42b8-902e-f43774626b98",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19b458ad-9f20-4c49-8e49-e68421762dd4",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a13fbaa3-e45d-41a0-904c-f5de4197d330",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "72ceefeb-b970-421b-a382-1a9a8c0ed688",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83d4dfff-e0a4-4a4d-a0e4-d25e32144d9c",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c1ce41c-b311-4e4f-b2bd-27f3f321be22",
      "parentUUID": "6e63f422-923c-4dd5-b6c5-6645a47f1e47",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f59c3827-4e47-43bd-b432-452b5aa6f5b9",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b15e942b-6f02-4523-a061-08398fc48981",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b6a67b2-818d-45be-866a-5b5a278c2505",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "023e2785-257e-4bf8-8f1d-3f33b28d5818",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "033cf324-f307-4591-861a-96aa86419b7b",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84ff35ae-eeaa-4709-9448-64d65b106040",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cb5c2ce-572d-49a1-9e31-06af4d661bed",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e708aba1-97be-4d85-bf61-002f3a262b7d",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87ad3f41-b568-4f08-b8b2-024ea3e1bbd3",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55c00189-a909-43a6-bb2e-c60231947328",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eb184f7f-527a-464f-8241-654e33f88abc",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a085661-c51f-4b68-a7cf-b2dfe90766df",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a11143a-9419-45bc-a282-e3b44524dd76",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0178d32a-f187-4ad6-890d-a8a7019615ef",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8122fd1-2fd1-48ba-8530-8877fc58aee2",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb8bb01a-3b2f-440e-844d-33d33d155da6",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00da3716-5250-4bc5-986b-7bff01fb4057",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93a61817-4f5a-411a-b9e1-b6c95698e471",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23254a72-907d-49f2-b7e2-f933e8c066ea",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5785a7a2-3d36-4ef4-9fb7-0855ec86592a",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6fcb13b0-460e-4e90-8ccc-254395e10f68",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7e80b0b-01af-4a51-b3b7-e257f2356436",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "da22f283-4445-4331-9012-d5de48b9c1b7",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60abe987-dd21-4eec-8bd5-606b9c6a775c",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28e37ef2-108f-484d-9e3c-a65148ee5ed9",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64599a1a-d142-4bc1-9bdc-09c0762dd123",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9d41d10-3196-454e-b0d7-419436698a49",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a461bfb4-a97d-432b-a90c-e1d0ad0e230c",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80850de8-113c-43a8-9431-8d9636dd029c",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed95bf96-b1f5-4ee8-9ac7-7c12ef3293e9",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e680986f-f2e9-41a0-8af9-5a9b64e455ed",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a453a17f-467a-4f5d-afa3-d3144e1b38da",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f988d243-543c-40b8-bf55-14a81d173d2e",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9259fdc1-917e-4f76-a270-9cbb85c4f501",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a67bd5b3-c7e5-41b0-9b28-f7dd006094b2",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "408cce32-ab01-4aec-acc3-7e9b6d8b4bbc",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "623c0957-2415-4334-9c27-3e188ef92119",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc0b8c90-899a-4ea7-871d-48ac0c1b5fe7",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e3837f2-f6b3-40ff-8188-8b13cf7bab95",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f877b0a0-6960-4ef3-ab5f-03d6e8a15a86",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9313422-d564-44ab-8ff7-05799d44aed5",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b40a1a1d-343e-4f2b-914d-0cae7716a47a",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0539b501-2973-46c1-8234-5f982e08b875",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81274345-2eb0-4679-84df-d3c2e28a5b5a",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e80660d-49d8-4fc6-8695-acb0ed26ebfc",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "384f9809-966b-4f99-969a-25de7e9e6215",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1e732a0-3602-41a3-9c69-129d8dde2ebd",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ed862da-ae8b-48c2-9211-0a8eef5ec6a9",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1bc3e658-1f7d-4153-8011-959b9cc4cc02",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e3b6fb0-a8d9-49ac-bb14-7c73567367cf",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c7f6a77-21b0-413d-9e9b-03fce61d3c41",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00b17611-a74a-4ec3-b3e9-b563fc8b8c21",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ac8188a-4442-4ca9-802a-2b4f7e0a8c4e",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b3e0890-15c4-4e2f-af7b-364abeac9391",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "62b3d8ce-8c4d-455b-b8d8-02a611366dbc",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81abd2e7-ab55-4f64-854c-df6585a5075b",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47573448-6f19-4785-8c8a-dbf42459c329",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68807420-11ea-4a84-9aa9-960d3de5e44d",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "76b81cf8-a36f-4d66-8a32-a513dbdbae4b",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4db460c1-3701-47dd-9c91-93ae7033c1da",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc0bcd77-b2d2-439b-84f2-3ee79dfd5384",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fff1e1b0-b847-4cd5-83ff-aa824d87dfc5",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb765acf-835d-458a-bb18-d2a0d68e2111",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1a196612-c504-402d-a699-425c016d5448",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "afe01872-80a2-4bdb-8c73-ea520f251be9",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f704efce-6726-4377-98b1-6ebd2e429e0b",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5e8ca7a-2122-4128-b836-42a68098d326",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "debb4092-fe0c-4046-8b5c-ece459c44d6c",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edcbbba4-faf6-4722-a83d-c3cbf49944a0",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44ee707e-2ed4-4491-b431-81d0ec1dd68c",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd1954f0-44b3-4d41-bf65-73b31660d05a",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a69e565a-46ad-43bd-b124-ba321fc0719a",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "935ffb60-3dba-4ebc-a92e-9331193bc955",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa93eec6-34c9-401d-97ae-19409ca157a6",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a20ce392-567e-4f0b-bbbe-872d0b0e18e8",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47aa30ea-7a6f-4b12-889b-f86190feb130",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a97cc5b-2fda-4a68-9c79-120f11239111",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "88a69e2c-969e-43b7-927d-db52bbba1b85",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53e4e01f-9d3c-4641-ba56-e0249448a353",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e1a40cfe-6953-4d53-a33c-ca8f26e09293",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "16176a5e-121c-4414-8489-57154cb05203",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63c7e0fd-41df-4ec2-bfd1-c559a3dc267a",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dd98a17-703f-48d4-bd62-21b6e8a54be5",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "625693ec-7b06-4b6a-a84f-e41ddf532f56",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 83,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e06dd8c6-9e79-46dd-936e-2a0144a0402a",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a163878-4434-42e4-bca2-1caf4ee3a896",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "546de277-6936-402b-8ab9-03d2d8efc78d",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e619028f-5663-480d-976f-b2668c090f06",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1050e55-a392-46d9-b6cb-d9acc2376249",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3bec9411-de72-4991-b622-7d3d33fee9f3",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4b46fc7-b8e0-43f4-81e7-e4cd04c8b520",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba3acad4-a901-467a-a367-8efdb9d80ffb",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a007cb3-f595-49e0-8293-9b81ca970b70",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b05dd3f9-588c-49a8-ada6-e2f5fe97461d",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc04feaf-539d-4220-81a7-b93f996ff441",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80b2bf4d-83a8-49ad-83ce-bce37c8d7a0c",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "de46d6d3-73b1-4c7c-9b07-3ce3843eeba4",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bb8cced-4a30-41d4-af8d-b6045154516c",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7945e0cf-851c-44c4-b985-24cbf9c3c344",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d981eed-9615-49fa-a3ca-40aeeda1c15e",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ccecd956-7389-490c-9563-66a9b6372940",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe307ec7-cf96-4d02-879b-3bb3d35954ac",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a9ae28f-7798-4941-b1d4-3e8bf7433399",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2609a85f-1c9c-40ec-98cc-5e1d1e06f05f",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7777321-8ed0-4dce-9487-92e6efc5390d",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c2f0289-026e-42b4-a420-f80a14276be3",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "920695bb-5b93-4e24-bc3c-5b7db2088b75",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69a04d9d-f85c-49fa-a601-3aea4f46b563",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb439a99-18c1-42fc-9ca0-b005a8196778",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4990656a-7226-43af-bb34-72e73752d893",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b7c61f4-abb7-4739-8d1a-d2aa96f80733",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "060b0d61-89c4-4e33-a376-cee2bb33ad4d",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c4059bf5-eb79-4a7e-9961-83866014753f",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ec2eab5b-2f10-4668-aec3-51537faef284",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d886cccd-d856-4572-a0f6-76ffca919f3d",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "853ee646-f4af-4d01-a772-77c258d57c79",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f445a1e-f521-490a-8dce-45ef2d3940c1",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e5c2701-3222-468d-b673-3e4d5d3cf495",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0956097-167a-4ba3-8727-165d37648875",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b803b8e-e703-4f1b-bbf0-66c4a629ad09",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1824e924-6723-45f0-9ec4-601eb62870bf",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4295124-7f5d-482d-ae91-ad5974c057d1",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "61aa769a-bdf9-4876-8b4b-99cb9227a59e",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eafda514-bfbc-4fc5-bbdf-fbb0bf03c12c",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e31ad64e-47f6-4dd5-994c-92659c6f963d",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3598c17a-b135-40ac-8ce3-9d7627a4c8cd",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d565b8f-c89e-4125-8603-8210046d96a7",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3936a95d-b06e-4933-8fc3-75db58dfef39",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1c50a14-63c3-4e94-8931-f351c980b47e",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a0fc4b6-c593-4fef-8d19-2c1f4d694296",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36b4fb79-895c-4e50-9ca0-67b94daf89ea",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f50dea47-4330-4f2b-ac2b-336a1fcbe39d",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf66c64e-b787-4c02-aae8-5d997c0bd204",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d01b5070-5b29-4a0c-b20e-676b877cb148",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa57ff0f-9241-435a-9f56-74d5ea3a9054",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2c1f99e2-2d4e-4348-afa5-0f0a650adf3f",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22277b37-2ffb-4c52-8d05-e334f8cdb360",
      "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73eb84b-478c-4655-b9a9-848d456cb9d3",
      "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e0c17b9-353f-4a54-bd8e-e709f264f001",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e917fb80-c770-4f98-912e-af031e0dbce4",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42fb1dac-b326-4a5d-8001-b9de7d530e7f",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "21f1cbdc-f210-4159-9fa5-a864e03efe5d",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2e4ab5a-5547-4ae4-8223-36ea0072e376",
      "parentUUID": "35efad0a-fd3c-490c-b4d1-471955f201e5",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3c71571-66f8-40ab-a77b-f06c094be0fb",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "12d5cd18-b593-4f3c-80ad-f81dc855d6c7",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e3c5f3f-f94f-4866-89ac-bf9138acf113",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "847d3cbf-8ef2-430f-b10b-afd94dd23615",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8795c821-b743-4a3d-98bd-83d22e438e46",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b5f7c91-05f1-407f-bfe4-8ff7118d716b",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81397402-7318-45c6-991d-dde238f2e0c0",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "690f5166-0e62-4281-bf03-6ac119d48312",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac22ede6-1052-47eb-b0c7-6db21727d535",
      "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18a84bfc-9ccc-4960-a697-1a2faf40e787",
      "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e4b881d-a887-4eb4-b5b1-4a3e828ef61b",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ffc5eb0a-3188-48af-9cd6-f1fc3307c80b",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "273cf485-5bed-496c-bef9-4c99aa8f9e3d",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a45eb41e-c2ae-475f-8a7e-a2a9dd86ebbe",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70e47cc8-49e7-42e7-8142-606934b1e221",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a46ec14-af9e-43ea-ac4c-38a519eea96d",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87e322dd-0bdf-462c-a4a5-a6829e820d22",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c26724de-273d-40aa-8a03-af8c228ce46e",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cdc70750-dc3c-45fd-950c-dc00059e7ccc",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9102a54f-beee-42c3-9b9b-60f272b6c5b5",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e895d44-6d54-4318-a56d-6badf05debb1",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ee8dbd58-e7a7-4ef9-a7b0-0ed40845b80e",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8bbcc36-6310-4c76-84e0-e97454a62349",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fdb11c9-2558-4344-865e-1944cf1442fc",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dc4e590a-f69e-4015-b85c-1668941f3e71",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4443ff38-1d7f-4cfb-9369-f48bbce5d338",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89f0b4c1-fef0-46dd-90fd-9ebb695ead75",
      "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0adcd40-3d2a-4ca7-9d2d-a41fe15fe6da",
      "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5ffc4ee-af6d-4fd4-b2e4-174e063ffb10",
      "parentUUID": "d278d02f-f1a5-4693-a34d-006441bcc3dd",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f84f85e-3570-4100-a704-919919a9d7e2",
      "parentUUID": "2c6baf4d-12f6-4e30-b6eb-a051f10dfbe3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3acb057-55e6-4846-a11e-272e51adcecb",
      "parentUUID": "acbca163-80d7-47a1-a3ad-7a32a13fd281",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e36ddb2-8272-4ea7-9390-0c57bb79c90f",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06430356-7a41-482e-acb0-1291fba8cb5f",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "813aeb07-0332-48bb-89eb-3828ee684592",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e0e0ef2e-f0af-43bc-a681-d2459a8d5a94",
      "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c3fccf51-0e3e-428d-9951-e7d0051a64de",
      "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5dc02e63-8a13-469e-bdb0-b521bebd5839",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9a5f98b-712b-411e-b418-1ed0f7db355c",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc720755-7a6e-4db1-ba50-4f89ca112e7e",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "807784ab-94f2-47b4-a3de-214de1043da8",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ccabdeb-25d4-496a-bdcd-733f38222d12",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll einen Ansprechpartner hinzufügen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner hinzufügen können",
      "timedOut": false,
      "duration": 65,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var ansprechpartner = {\n    name: 'Hans Meyer',\n    turnier: 'Test Turnier',\n    email: 'test@byom.de'\n};\nrequest(server)\n    .post('/api/ansprechpartner')\n    .send(ansprechpartner)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(ansprechpartner.name);\n        expect(response.body.email).to.be.equal(ansprechpartner.email);\n        expect(response.body.turnier).to.be.equal(ansprechpartner.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        neuerAnsprechpartnerId = response.body._id;\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(neuerAnsprechpartnerId.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d912c585-8c83-4754-a03d-77ab66e57749",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll alle Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll alle Ansprechpartner laden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7ad01b0-9532-41c1-b340-ae5e5c24c3ab",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll einen einzelnen Ansprechpartner laden",
      "fullTitle": "Route: Ansprechpartner soll einen einzelnen Ansprechpartner laden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id.toString()).to.equal(initialerAnsprechpartner._id);\n        expect(response.body).to.contain.keys(initialerAnsprechpartner);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4f15f0cb-ecd4-4718-a4d7-6fda9aa28845",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "soll einen Ansprechpartner löschen können",
      "fullTitle": "Route: Ansprechpartner soll einen Ansprechpartner löschen können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .delete('/api/ansprechpartner')\n    .query({id: neuerAnsprechpartnerId})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        mongoose.model('Ansprechpartner').findById(neuerAnsprechpartnerId).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.equal(null);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "780f4877-21a9-4753-be0b-6c7c2b5b6892",
      "parentUUID": "8d9ba109-81ac-4367-9747-03e3f583cd22",
      "skipped": false
    },
    {
      "title": "der Name soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können der Name soll geändert werden können",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'neuer Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5aae8690-78de-4feb-899b-0c6967e799f0",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "die Email soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können die Email soll geändert werden können",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    email: 'neue@mail.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.email).to.equal(data.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc270681-fe66-4417-862c-ca00057cd433",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "das Turnier soll geändert werden können",
      "fullTitle": "soll einen Ansprechpartner ändern können das Turnier soll geändert werden können",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'neues Turnier mit Name'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42979abd-7424-418c-abb0-4716ee8cca56",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "Änderungen sollen auch gleichzeitig durchführbar seien",
      "fullTitle": "soll einen Ansprechpartner ändern können Änderungen sollen auch gleichzeitig durchführbar seien",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    turnier: 'turnier',\n    name: 'name',\n    email: 't@t.de'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: initialerAnsprechpartner._id})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(data.name);\n        expect(response.body.email).to.be.equal(data.email);\n        expect(response.body.turnier).to.be.equal(data.turnier);\n        expect(response.body._id).not.to.be.undefined;\n        var id = response.body._id;\n        mongoose.model('Ansprechpartner').findById(id).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).not.to.be.undefined\n            expect(res._id.toString()).to.equal(id.toString());\n            expect(res.name).to.equal(data.name);\n            expect(res.email).to.equal(data.email);\n            expect(res.turnier).to.equal(data.turnier);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6904d443-654d-4cd2-afbd-f42af9900846",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "fullTitle": "soll einen Ansprechpartner ändern können wenn der Ansprechpartner nicht gefunden wird, soll ein passender Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    name: 'Neu'\n};\nrequest(server)\n    .put('/api/ansprechpartner')\n    .query({id: 'completelyWrongID'})\n    .send(data)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(404);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_ANSPRECHPARTNER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "79c33df8-7a8f-4a65-b17e-79d3fe74befd",
      "parentUUID": "e3b62f06-9ff5-4394-af0f-e418171d97a9",
      "skipped": false
    },
    {
      "title": "Lädt die Configuration",
      "fullTitle": "Route: Config Lädt die Configuration",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.have.keys(['version', 'env', 'lockdown', 'plaetze']);\n    expect(response.body).to.deep.equal({\n        version: version,\n        env: 'testing',\n        lockdown: true,\n        plaetze: '3'\n    });\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2472ffc3-0146-4f78-b13b-038cf293fead",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d5416fcc-8910-4c61-9fe1-3771540fba10",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6385af41-d5b0-4772-934f-c9b2e9408549",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8765784d-d158-44cb-b4bd-4ef51bbd6315",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "gibt die Anzahl PLätze zurück",
      "fullTitle": "Route: Config gibt die Anzahl PLätze zurück",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/plaetze').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('3');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6a7bb8a6-0741-46e9-aaca-7246b9e80a4e",
      "parentUUID": "930a1c3f-992e-484d-b456-255f6462e113",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e2250fa3-6991-484a-8cae-c8bbcff5a169",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "441b2345-d296-4711-a4e8-717a76c7d126",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f822adc-435a-4d09-9ddd-ad9b0bb8dce7",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7abb19bb-a521-47b1-83f2-fdf31a7f263a",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2e68aa32-1df9-44fa-a0c3-5a92df1eafea",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ddb7cf32-1114-4771-8d54-8f60e058d736",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "Sendet einen Bug-Report",
      "fullTitle": "Route: Email Sendet einen Bug-Report",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    name: 'Vorname Nachname',\n    vorname: 'Vorname',\n    nachname: 'Nachname',\n    text: 'Text',\n    title: 'Title',\n    env: 'testing',\n    version: '0.0.0',\n    rolle: 'Admin',\n    username: 'username',\n    email: 'test@byom.de',\n    datetime: '14.01.2017 09:41'\n};\nrequest(server)\n    .post('/api/email/bug')\n    .send(email)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac7b1332-1586-49c8-88f2-11fcf5dc7bc1",
      "parentUUID": "ebf19190-cd98-4540-bd8c-ed74762f6928",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69da7109-a848-4104-871a-fb3a24b0d1db",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7e00846-591c-4b51-9d4a-32116b543210",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebd90d54-44f7-44c1-abaa-8a17df278b44",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd9f73ea-487b-45d8-b888-8e257e820933",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "569eddc1-581d-44d8-bc92-3317ac15b868",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "531fc247-f0e3-4e78-b245-b183f3dd4d27",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1cc5b1cf-e57e-490d-a823-29b5405f891a",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "596fb5ea-8fd4-4aac-9347-ea99cd735562",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2ff5596-0ce9-4d7f-b7a2-5f903e8a396a",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "687eedbc-34a1-480e-956e-12fe73b52dfa",
      "parentUUID": "811edcf2-4c76-4412-9fff-ddc422d79842",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Response soll den Error handlen",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndResponse(err, res, {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "82394cef-10b7-4689-abb1-9c6b26d179a9",
      "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Error and send Response soll die Response senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: 'test', id: 1234};\nhandler.handleErrorAndResponse(null, res, data);\nexpect(res.data).to.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "24afc939-7de8-439f-be80-56574e40f1dc",
      "parentUUID": "b2427bcb-4fa4-4968-8637-31fc490be2ce",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Message soll den Error handlen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndMessage(err, res, function () {\n});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "678d85fe-03d3-427c-bcf1-08a04fe09a88",
      "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndMessage(null, res, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "a130673c-f7d8-4c8f-87f3-783a170de32d",
      "parentUUID": "2ae7f7a7-6cec-427a-b00a-a95694572884",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Success-Message soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndSuccess(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "fb0250d2-4600-4ad5-bc1f-397fbee99e84",
      "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Success-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndSuccess(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "a5256273-c45c-4279-869e-44f4fb388472",
      "parentUUID": "a2056369-78f6-4d66-8c87-716ddd2bd66d",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Error and send Deleted-Message soll den Error handlen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleErrorAndDeleted(err, res);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "ea842154-fbe1-459b-982b-a9e73c3e3fc6",
      "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
      "skipped": false
    },
    {
      "title": "soll die Nachricht senden",
      "fullTitle": "handle Error and send Deleted-Message soll die Nachricht senden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleErrorAndDeleted(null, res);\nexpect(res.data.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "28a6532a-73ad-429d-b75a-5d3625e13c33",
      "parentUUID": "9725c3e0-6240-42cb-abd6-6d5acb19a303",
      "skipped": false
    },
    {
      "title": "soll nicht gefundene Entitites handlen",
      "fullTitle": "handle Query Response soll nicht gefundene Entitites handlen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "handler.handleQueryResponse(null, null, res, true, messages.ErrorGruppeNotFound);\nexpect(res.data.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\nexpect(res.statusCode).to.equal(404);",
      "err": {},
      "isRoot": false,
      "uuid": "542d2009-be69-4a3d-8dc5-6ca3be5e51e8",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll den Error handlen",
      "fullTitle": "handle Query Response soll den Error handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var err = {errorCode: 0, name: 'Error'};\nhandler.handleQueryResponse(err, {}, res, false, function () {});\nexpect(res.data.MESSAGEKEY).to.equal('ERROR');\nexpect(res.data.ERROR).to.deep.equal(err);\nexpect(res.statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "52319b2b-5d14-4420-a896-b44d238474e8",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll die Response senden",
      "fullTitle": "handle Query Response soll die Response senden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {data: '1234', id: 1234};\nhandler.handleQueryResponse(null, data, res, true, function () {});\nexpect(res.data).to.deep.equal(data);\nexpect(res.statusCode).to.equal(200);",
      "err": {},
      "isRoot": false,
      "uuid": "d98f5b64-9982-4c0d-9271-0948dae3c435",
      "parentUUID": "cd1e1b45-304a-430c-b918-5515e49da033",
      "skipped": false
    },
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "ed206594-6e35-4c92-a126-b8a532f3d0c5",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "7db40322-43fa-4f75-b33b-45fde22afc4e",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "e4324c9a-16a5-458d-a97f-93770de67bd6",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bebedef4-88c2-49d2-a4f0-059ae6d31296",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "db3175e3-acb9-4379-93c4-1321a126a01f",
      "parentUUID": "17f63c84-a535-402d-8ee7-ade7a1d28842",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "1efdff89-3c8f-45e2-930b-0ed54b87a482",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "af73d419-1115-4480-a757-5b94e0462498",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "8976db76-0113-4e73-afe2-c1da46876ca4",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "bcc1f058-c63a-4c89-8b61-9074f4f5b774",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "0e156452-47ad-470c-9970-8a86e6c8ce9a",
      "parentUUID": "bc545409-d94d-4f3e-8c72-fd63f7b109a3",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "e31d1ae9-7a3b-46cf-8828-f6b93d5291c3",
      "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c682af7e-e4a7-436a-9987-27ec6cd2ec17",
      "parentUUID": "30bf3ce9-47ac-4c93-b603-9ae08f7de373",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "c56f63e6-a7af-4ab4-8d4e-0213fa23dbf6",
      "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "55494461-5212-422f-a5db-b725796936dc",
      "parentUUID": "769b923b-1979-4f0d-bf1b-d2673315768a",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "26ada94e-6606-4b9c-80ea-e27059655643",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "10eab601-926e-4e38-82c2-dbc8abb3c5e2",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "bba0a384-0266-484e-af28-63f9fd7dbe34",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "9dbaf476-de57-450f-92be-02b42eff7f3c",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "c244762e-69fd-49b8-bb23-79701d2183bf",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "7c8ac72d-b99a-434f-a6b2-45fd305ad8f9",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "338b4f0d-60d6-414f-978d-a659ea3413c5",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "f395f617-472d-4700-a125-410599322348",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "2d9248b4-b815-4528-905b-d386d9782e00",
      "parentUUID": "775762d2-3d1a-43b5-86ee-002f557f13b4",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "f4f29c10-a7aa-4848-8683-c59b76e41236",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "6913f923-8bd2-4d15-8e83-1f68c7e3f382",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "b79bd508-5bf7-4bea-8b4a-f62e9adcd0be",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "32863cdb-f168-4bd9-afb8-4dd26bbfd509",
      "parentUUID": "1973d822-bf61-4899-931f-06136ac56cf5",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f64b58b3-3ee8-4b5c-8b83-56dcebcc20af",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "aa2d16d2-2dab-428f-814c-b864c25a7137",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "fb421eb4-ceaa-484a-accb-77c571976d12",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "20c8f3b1-fb24-48ae-a3d9-766744b3c549",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b62fdda2-46a0-45be-806d-07a2e3744374",
      "parentUUID": "53535872-4ba4-454f-9ce0-b40a8c0be761",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "d30233d0-3805-40d1-bc11-35bacbe0d8a2",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "6709a9b7-9a62-4ba0-97d8-78259d9a0827",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3cde5b9a-905c-410e-9d12-d100cfd0006e",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8369c61e-05e8-48fa-8048-df41c5a684a9",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "01153867-8f85-45bd-913b-c163de4a58ab",
      "parentUUID": "27aaae2a-077f-4fca-bccd-2d61da54e793",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1500e4e4-88fb-4321-87d1-bbab0cbb1a23",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "c702a657-cdc1-47a6-9dbf-9707bd8ac113",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ddfe7f58-1bcf-487d-9c98-ca3b40bb94cb",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9bf8b8c0-164a-4ca6-b232-f664f9ac8217",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b95e9f5a-2120-4cd7-831a-a35a90ecbd11",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f89a6ea6-d57f-4b2c-ae56-01bdf95c2557",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9335b6ca-5af7-4679-beb1-ba9dd237fc31",
      "parentUUID": "1e77b08f-5c68-43a4-8f6e-a2057c36f4bd",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "4906978e-427b-4078-8552-8c28e65b62e6",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "7c9b36d8-e49b-4dc9-abbb-147d1aa1e653",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8563d2c1-088d-43ae-adfb-b7812a59f35c",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "620cd6df-0775-4c38-afcf-1b933067fc9f",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1ae96b3a-8871-4c1c-a9a2-ace9c831a95f",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ea40ac08-4224-4b9d-827b-55467159a30b",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "2a3bc2b1-ade1-4d17-a059-ae727fffff47",
      "parentUUID": "aab5aa19-030c-404a-a8cd-113b42c7ccfc",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "147e0cc3-27a6-430c-968a-6c4ae7209c6d",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "a4e751d0-b60b-4baa-a81c-40eae220b894",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "d6a346b5-bf3a-4253-9df4-200512493425",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5f274688-d9f9-481a-bde1-04d94931f6a0",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e5a5a4d3-7045-4122-b0fd-377e4bdcabbf",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "22dd3c6e-bc26-4291-8171-7be8cf32481c",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "97acd02b-907e-4257-b799-9a19b515b0f5",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bccf5f8-3726-4d87-8e80-229e5491b39f",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "9e973560-6d63-47dc-882b-ecc520e16870",
      "parentUUID": "f8020b47-0b4d-4dd1-b3c1-1b656ff2d435",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "96176037-941a-41bd-aafe-b083e869dd25",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "ef651fdd-e993-460c-9e94-a05a314eb437",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b653a085-d774-4789-b17f-865ac0075ac2",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "60577cb0-410c-44e7-ae87-a6c2130303b2",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "30d19330-2bd0-49a8-a3d8-8621622849d7",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e19c00bf-194a-47ad-84ff-fe7ff80364f9",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e1f7e22f-d179-4504-b0da-3e731b3fb1ac",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "b1d9ab54-93cb-4a66-80f2-1be50540b589",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "4ad65078-50ee-4c4e-9e5d-73eeb3600aff",
      "parentUUID": "823c3f12-3051-445a-a264-bff3bfc3d8ae",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aeea31b1-85f8-4b5d-9fff-080ad1791afb",
      "parentUUID": "7e91d631-fbb1-4df8-b427-ec6187f0e24b",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "617ba635-c17f-4b29-82ef-72148fbe7211",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a926951-8f7f-459a-a9aa-634b96fa28c0",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d1ab2268-0567-4c2d-923b-2507692a92ed",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "643f4b69-9d65-47ac-91db-db4248cfe41c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cc0b22e0-94af-4ddc-8d52-d3d8b7e6b77c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74ffd650-55e3-4cd6-86ce-b11006021b09",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d415f28-45d9-4095-98ab-ac4c09e95208",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ee90691c-25ee-4750-935e-591e1ed71f3c",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d7707fda-e232-48ed-a1d5-ba998923ec65",
      "parentUUID": "3edf1766-2d24-4b08-92a5-831d5ec0cdd4",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige GET Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige GET Route einen 404 liefern",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b2b35832-ee43-47a5-9acb-c02f043b01c0",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige POST Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige POST Route einen 404 liefern",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4ba53a48-da96-4776-83d7-74b9871ead33",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige PUT Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige PUT Route einen 404 liefern",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b0cd469-15b4-45f4-9491-1dd10483c8ad",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll für eine ungültige DELETE Route einen 404 liefern",
      "fullTitle": "Route: notFound soll für eine ungültige DELETE Route einen 404 liefern",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, '/api/invalid')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.status).to.equal(404);\n        expect(response.body.MESSAGE).to.equal('Nicht gefunden');\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23a467ce-7eda-455c-85b2-a7a5c1ab220a",
      "parentUUID": "3e601aff-dd72-4651-afc4-14b24c15e424",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7e346246-2fa5-4a4a-960a-383f9fa71d68",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 91,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb330cab-bd20-4309-85df-2700cf72b303",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6a49de8b-7917-48da-b34c-a68434a763b1",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a7661522-e8c6-4a6a-8ca3-43542143437c",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "076dc445-eaca-439c-b525-d98038841346",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Platz laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Platz laden",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?platz=1')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9b518646-3bcd-4486-9cd2-d04aaf951f7a",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Spiele nach Datum laden",
      "fullTitle": "Route: Spiele soll die Spiele nach Datum laden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?date=2017-02-01')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(0);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "748b3d1a-d3c1-47ec-98b0-4cbdae6bcd99",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e2e8c6d-8a45-469c-a6a1-7d9e954b0b65",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "866f36d5-1d1b-42b7-8e35-6e4ae1fb47a5",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97940540-b54a-473f-908f-7efb666e4301",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "819bf906-88d7-4c20-93e3-279c0377fbb0",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7ee2d305-ab5c-4e5f-8a0c-a831d18a969b",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b0a99299-aa67-4a09-9ce6-13d8d00c2c31",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 187,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed310ed2-20dd-482f-b734-c0ce20ac63aa",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e85d25a0-9e85-4aed-bd8e-15ddb404cdef",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2d33daed-81aa-41fc-9bb7-a6da348ed464",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 77,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52bfaa7b-b9bb-4b7c-bdc5-937a71bd5335",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll die Reihenfolge der Spiele ändern können",
      "fullTitle": "Route: Spiele soll die Reihenfolge der Spiele ändern können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/order')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(409);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_SPIELPLAN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cece3394-c70f-4f1e-9c94-943e63e571fa",
      "parentUUID": "2e594de3-1794-40e7-8510-30b87acd6bb5",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69e7d0a8-0c71-4bba-bba1-365fab206051",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e68108f-5193-43e0-8435-6149b35862cf",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c300fa1d-1bfe-4ae1-a5d9-4382d4ee6181",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d2907584-f2fd-485d-bd46-cae862ab4f62",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn die Startzeit vor der Endzeit liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '19:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '10:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93f0ea86-0a1e-429a-a645-06e35a944d80",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn das Startdatum nach dem Enddatum liegt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '31.12.2000',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_ZEITEN_UNGUELTIG');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c461034-6b4d-46db-800d-8babb5bd151f",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4,\n    endzeit: '19:00',\n    startdatum: '01.01.1970',\n    enddatum: '01.01.1970'\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9772ffb5-591b-4833-bf89-ff9e886b5739",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80aa3c08-9c44-48d9-ba43-72dd914c0f0c",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll den Spielplan mit Erhalt von Spielen regenerieren",
      "fullTitle": "Route: Spielplan soll den Spielplan mit Erhalt von Spielen regenerieren",
      "timedOut": false,
      "duration": 120,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .send({keep: true})\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "409a18c1-f46b-414e-b6a5-7fff8ae82a16",
      "parentUUID": "2b3506ce-0ac1-4d24-96fa-49d25e9096e0",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "08a87931-1c09-4b8a-b0b9-9f7ebcf5be75",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b6f27608-4e25-4de2-82f0-37c9755aa2fc",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30574678-258c-4078-a682-7e91da770462",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 72,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d09d9db5-0da8-4638-9eac-1d47c4887b64",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0df896b1-589f-4092-8331-870de9a6f91f",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "abf1bb5e-050c-402b-a0e1-17a432107e7c",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2864749-e024-48e2-8c93-8b78845c9226",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a2bd3cf0-4e51-4800-bb36-0154a4ac8202",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bededeb6-f2c0-4d5f-baeb-6049af02d407",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 60,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "054aca3d-c565-4c0f-9c77-0e1d8f5e4ffd",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ebfb7280-bf3a-4ac9-b7fb-e087e567bf86",
      "parentUUID": "19e89e55-357f-445e-a550-3f75b8fd5d3f",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c9ed2f5-4518-4937-9d22-d387f8af0cef",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6646e369-b3d9-4d05-aa4a-02c66a1b5e2a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 168,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(409);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_ALREADY_EXISTS');\n        expect(res.body.MESSAGE).to.equal('Benutzer test-user existiert bereits');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f1ea2f7-d869-40d7-a66a-83866b65cd39",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5bc4653d-fc39-40c7-8496-b96456a7f0e0",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "962b5476-595f-45d2-8b6c-e964b99eb2ff",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 123,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "643b70ba-7d4e-485e-9d5d-91fe904264f1",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c00e142-b05e-4884-b144-31c688843d3a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa502e49-e899-4cf9-8e6e-f6c9b46d2d46",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "20f56a55-3982-49c9-954e-712db8b1a07d",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac57c675-af00-45f3-8073-1c3d2d36861e",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3236f8f4-cd3e-43bf-b929-d2ae89ac85de",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "63dc78ec-e6a6-4d96-a72c-68d61e0d65e1",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 208,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a712e313-9f4e-4240-b4a6-3defd822d83a",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "850a9eff-bd7c-42b8-902e-f43774626b98",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19b458ad-9f20-4c49-8e49-e68421762dd4",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a13fbaa3-e45d-41a0-904c-f5de4197d330",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "72ceefeb-b970-421b-a382-1a9a8c0ed688",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83d4dfff-e0a4-4a4d-a0e4-d25e32144d9c",
      "parentUUID": "76596ca2-5b25-4004-972c-2521d366707b",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c1ce41c-b311-4e4f-b2bd-27f3f321be22",
      "parentUUID": "6e63f422-923c-4dd5-b6c5-6645a47f1e47",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f59c3827-4e47-43bd-b432-452b5aa6f5b9",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b15e942b-6f02-4523-a061-08398fc48981",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b6a67b2-818d-45be-866a-5b5a278c2505",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "023e2785-257e-4bf8-8f1d-3f33b28d5818",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "033cf324-f307-4591-861a-96aa86419b7b",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Checksummen nicht stimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = jwt.verify(roleTokens.bearbeiter, process.env.SECRET);\ntoken.role = {\n    name: 'Admin',\n    rank: 1\n};\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(token, process.env.SECRET))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "84ff35ae-eeaa-4709-9448-64d65b106040",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cb5c2ce-572d-49a1-9e31-06af4d661bed",
      "parentUUID": "bc7bf67a-b1cf-47a8-aad1-21b0f8c5d7e6",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e708aba1-97be-4d85-bf61-002f3a262b7d",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87ad3f41-b568-4f08-b8b2-024ea3e1bbd3",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55c00189-a909-43a6-bb2e-c60231947328",
      "parentUUID": "955ef8d4-5de7-42e4-be8d-8d957947c24a",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eb184f7f-527a-464f-8241-654e33f88abc",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a085661-c51f-4b68-a7cf-b2dfe90766df",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a11143a-9419-45bc-a282-e3b44524dd76",
      "parentUUID": "954beb0a-3c4e-421c-a9a8-da587cf1d4aa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0178d32a-f187-4ad6-890d-a8a7019615ef",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8122fd1-2fd1-48ba-8530-8877fc58aee2",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb8bb01a-3b2f-440e-844d-33d33d155da6",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00da3716-5250-4bc5-986b-7bff01fb4057",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "93a61817-4f5a-411a-b9e1-b6c95698e471",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "23254a72-907d-49f2-b7e2-f933e8c066ea",
      "parentUUID": "ccfa85a4-fc69-4df4-9c2a-0c159747fd6c",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5785a7a2-3d36-4ef4-9fb7-0855ec86592a",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6fcb13b0-460e-4e90-8ccc-254395e10f68",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7e80b0b-01af-4a51-b3b7-e257f2356436",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "da22f283-4445-4331-9012-d5de48b9c1b7",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60abe987-dd21-4eec-8bd5-606b9c6a775c",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28e37ef2-108f-484d-9e3c-a65148ee5ed9",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "64599a1a-d142-4bc1-9bdc-09c0762dd123",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d9d41d10-3196-454e-b0d7-419436698a49",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a461bfb4-a97d-432b-a90c-e1d0ad0e230c",
      "parentUUID": "5ba22f50-4ecf-41ea-a070-de92ce01f155",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80850de8-113c-43a8-9431-8d9636dd029c",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ed95bf96-b1f5-4ee8-9ac7-7c12ef3293e9",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e680986f-f2e9-41a0-8af9-5a9b64e455ed",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a453a17f-467a-4f5d-afa3-d3144e1b38da",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f988d243-543c-40b8-bf55-14a81d173d2e",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9259fdc1-917e-4f76-a270-9cbb85c4f501",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a67bd5b3-c7e5-41b0-9b28-f7dd006094b2",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "408cce32-ab01-4aec-acc3-7e9b6d8b4bbc",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "623c0957-2415-4334-9c27-3e188ef92119",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc0b8c90-899a-4ea7-871d-48ac0c1b5fe7",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e3837f2-f6b3-40ff-8188-8b13cf7bab95",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f877b0a0-6960-4ef3-ab5f-03d6e8a15a86",
      "parentUUID": "853c8360-b4b8-4c46-a6b1-048726e32cad",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9313422-d564-44ab-8ff7-05799d44aed5",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b40a1a1d-343e-4f2b-914d-0cae7716a47a",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0539b501-2973-46c1-8234-5f982e08b875",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81274345-2eb0-4679-84df-d3c2e28a5b5a",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8e80660d-49d8-4fc6-8695-acb0ed26ebfc",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "384f9809-966b-4f99-969a-25de7e9e6215",
      "parentUUID": "09d08a62-10be-490c-8801-0119d0a3ed2a",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f1e732a0-3602-41a3-9c69-129d8dde2ebd",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ed862da-ae8b-48c2-9211-0a8eef5ec6a9",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1bc3e658-1f7d-4153-8011-959b9cc4cc02",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e3b6fb0-a8d9-49ac-bb14-7c73567367cf",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7c7f6a77-21b0-413d-9e9b-03fce61d3c41",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00b17611-a74a-4ec3-b3e9-b563fc8b8c21",
      "parentUUID": "59186f0d-80ba-465d-9c95-0ef77960eba1",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ac8188a-4442-4ca9-802a-2b4f7e0a8c4e",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4b3e0890-15c4-4e2f-af7b-364abeac9391",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "62b3d8ce-8c4d-455b-b8d8-02a611366dbc",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81abd2e7-ab55-4f64-854c-df6585a5075b",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47573448-6f19-4785-8c8a-dbf42459c329",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68807420-11ea-4a84-9aa9-960d3de5e44d",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "76b81cf8-a36f-4d66-8a32-a513dbdbae4b",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4db460c1-3701-47dd-9c91-93ae7033c1da",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc0bcd77-b2d2-439b-84f2-3ee79dfd5384",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fff1e1b0-b847-4cd5-83ff-aa824d87dfc5",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bb765acf-835d-458a-bb18-d2a0d68e2111",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1a196612-c504-402d-a699-425c016d5448",
      "parentUUID": "d82c5c8b-7a01-44d5-9b57-95e54ed9ecf3",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "afe01872-80a2-4bdb-8c73-ea520f251be9",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f704efce-6726-4377-98b1-6ebd2e429e0b",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein GET /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5e8ca7a-2122-4128-b836-42a68098d326",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "debb4092-fe0c-4046-8b5c-ece459c44d6c",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "edcbbba4-faf6-4722-a83d-c3cbf49944a0",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein POST /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "44ee707e-2ed4-4491-b431-81d0ec1dd68c",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cd1954f0-44b3-4d41-bf65-73b31660d05a",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a69e565a-46ad-43bd-b124-ba321fc0719a",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein PUT /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "935ffb60-3dba-4ebc-a92e-9331193bc955",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa93eec6-34c9-401d-97ae-19409ca157a6",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a20ce392-567e-4f0b-bbbe-872d0b0e18e8",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/order soll geschützt sein DELETE /api/spiele/order: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47aa30ea-7a6f-4b12-889b-f86190feb130",
      "parentUUID": "f1735506-2d9c-4912-8a10-4c8a1b8d7cae",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3a97cc5b-2fda-4a68-9c79-120f11239111",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "88a69e2c-969e-43b7-927d-db52bbba1b85",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53e4e01f-9d3c-4641-ba56-e0249448a353",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e1a40cfe-6953-4d53-a33c-ca8f26e09293",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "16176a5e-121c-4414-8489-57154cb05203",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "63c7e0fd-41df-4ec2-bfd1-c559a3dc267a",
      "parentUUID": "e70264c3-27e8-4fda-8fc9-d199b24fd49f",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9dd98a17-703f-48d4-bd62-21b6e8a54be5",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "625693ec-7b06-4b6a-a84f-e41ddf532f56",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 83,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e06dd8c6-9e79-46dd-936e-2a0144a0402a",
      "parentUUID": "772c9390-6c5a-4e0b-b51f-1cf3baba64ae",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2a163878-4434-42e4-bca2-1caf4ee3a896",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "546de277-6936-402b-8ab9-03d2d8efc78d",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e619028f-5663-480d-976f-b2668c090f06",
      "parentUUID": "0f339f22-750c-4e0d-a251-56d9523c0826",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1050e55-a392-46d9-b6cb-d9acc2376249",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3bec9411-de72-4991-b622-7d3d33fee9f3",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4b46fc7-b8e0-43f4-81e7-e4cd04c8b520",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba3acad4-a901-467a-a367-8efdb9d80ffb",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0a007cb3-f595-49e0-8293-9b81ca970b70",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b05dd3f9-588c-49a8-ada6-e2f5fe97461d",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc04feaf-539d-4220-81a7-b93f996ff441",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "80b2bf4d-83a8-49ad-83ce-bce37c8d7a0c",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "de46d6d3-73b1-4c7c-9b07-3ce3843eeba4",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7bb8cced-4a30-41d4-af8d-b6045154516c",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7945e0cf-851c-44c4-b985-24cbf9c3c344",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d981eed-9615-49fa-a3ca-40aeeda1c15e",
      "parentUUID": "38d924b5-11cb-4853-9787-e87b7c87b184",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ccecd956-7389-490c-9563-66a9b6372940",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fe307ec7-cf96-4d02-879b-3bb3d35954ac",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a9ae28f-7798-4941-b1d4-3e8bf7433399",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2609a85f-1c9c-40ec-98cc-5e1d1e06f05f",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b7777321-8ed0-4dce-9487-92e6efc5390d",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6c2f0289-026e-42b4-a420-f80a14276be3",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "920695bb-5b93-4e24-bc3c-5b7db2088b75",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "69a04d9d-f85c-49fa-a601-3aea4f46b563",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cb439a99-18c1-42fc-9ca0-b005a8196778",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4990656a-7226-43af-bb34-72e73752d893",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b7c61f4-abb7-4739-8d1a-d2aa96f80733",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "060b0d61-89c4-4e33-a376-cee2bb33ad4d",
      "parentUUID": "e2835593-6bfb-46c4-9c11-f8b83000e1c5",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c4059bf5-eb79-4a7e-9961-83866014753f",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ec2eab5b-2f10-4668-aec3-51537faef284",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d886cccd-d856-4572-a0f6-76ffca919f3d",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "853ee646-f4af-4d01-a772-77c258d57c79",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f445a1e-f521-490a-8dce-45ef2d3940c1",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e5c2701-3222-468d-b673-3e4d5d3cf495",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f0956097-167a-4ba3-8727-165d37648875",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2b803b8e-e703-4f1b-bbf0-66c4a629ad09",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1824e924-6723-45f0-9ec4-601eb62870bf",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d4295124-7f5d-482d-ae91-ad5974c057d1",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "61aa769a-bdf9-4876-8b4b-99cb9227a59e",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eafda514-bfbc-4fc5-bbdf-fbb0bf03c12c",
      "parentUUID": "0485e061-ced4-4b75-a078-cdd0b61f3c59",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e31ad64e-47f6-4dd5-994c-92659c6f963d",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3598c17a-b135-40ac-8ce3-9d7627a4c8cd",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein POST /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8d565b8f-c89e-4125-8603-8210046d96a7",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3936a95d-b06e-4933-8fc3-75db58dfef39",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a1c50a14-63c3-4e94-8931-f351c980b47e",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein PUT /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a0fc4b6-c593-4fef-8d19-2c1f4d694296",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36b4fb79-895c-4e50-9ca0-67b94daf89ea",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f50dea47-4330-4f2b-ac2b-336a1fcbe39d",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/ansprechpartner soll geschützt sein DELETE /api/ansprechpartner: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bf66c64e-b787-4c02-aae8-5d997c0bd204",
      "parentUUID": "24b1094b-0224-465e-8c2b-159e61301d56",
      "skipped": false
    },
    {
      "title": "Der Request soll korrekt ausgeführt werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Der Request soll korrekt ausgeführt werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test', text: 'test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d01b5070-5b29-4a0c-b20e-676b877cb148",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "Fehlen alle Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlen alle Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "aa57ff0f-9241-435a-9f56-74d5ea3a9054",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "Fehlt ein Parameter soll ein Fehler geworfen werden",
      "fullTitle": "es soll geprüft werden ob benötigte Parameter vorhanden sind Fehlt ein Parameter soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/email/')\n    .set('Authorization', token)\n    .send({subject: 'Test'})\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2c1f99e2-2d4e-4348-afa5-0f0a650adf3f",
      "parentUUID": "7fb9c1ce-acb4-43d9-a3e6-451a527e6564",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.subject\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.subject\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "22277b37-2ffb-4c52-8d05-e334f8cdb360",
      "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
      "skipped": false
    },
    {
      "title": "POST /api/email: benötigt den Key \"body.text\"",
      "fullTitle": "die Route /api/email hat benötigte Request-Parameter POST /api/email: benötigt den Key \"body.text\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a73eb84b-478c-4655-b9a9-848d456cb9d3",
      "parentUUID": "a70a0139-8b1e-4292-b72d-318bae861daf",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.team\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e0c17b9-353f-4a54-bd8e-e709f264f001",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter POST /api/email/subscriber: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e917fb80-c770-4f98-912e-af031e0dbce4",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.team\"",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "42fb1dac-b326-4a5d-8001-b9de7d530e7f",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "fullTitle": "die Route /api/email/subscriber hat benötigte Request-Parameter DELETE /api/email/subscriber: benötigt den Key \"query.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "21f1cbdc-f210-4159-9fa5-a864e03efe5d",
      "parentUUID": "8cd17374-c9f4-4d37-a82a-760a64444e33",
      "skipped": false
    },
    {
      "title": "POST /api/email/bug: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/email/bug hat benötigte Request-Parameter POST /api/email/bug: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c2e4ab5a-5547-4ae4-8223-36ea0072e376",
      "parentUUID": "35efad0a-fd3c-490c-b4d1-471955f201e5",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b3c71571-66f8-40ab-a77b-f06c094be0fb",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter POST /api/gruppen: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "12d5cd18-b593-4f3c-80ad-f81dc855d6c7",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/gruppen hat benötigte Request-Parameter DELETE /api/gruppen: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e3c5f3f-f94f-4866-89ac-bf9138acf113",
      "parentUUID": "9997160a-c8b0-443e-a343-38bc798039ec",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.jugend\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.jugend\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "847d3cbf-8ef2-430f-b10b-afd94dd23615",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"query.gruppe\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"query.gruppe\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8795c821-b743-4a3d-98bd-83d22e438e46",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/teams: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter POST /api/teams: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6b5f7c91-05f1-407f-bfe4-8ff7118d716b",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter PUT /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "81397402-7318-45c6-991d-dde238f2e0c0",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/teams hat benötigte Request-Parameter DELETE /api/teams: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "690f5166-0e62-4281-bf03-6ac119d48312",
      "parentUUID": "810c9615-4f94-4b28-b9d9-1d4d78a73397",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter POST /api/jugenden: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ac22ede6-1052-47eb-b0c7-6db21727d535",
      "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/jugenden hat benötigte Request-Parameter DELETE /api/jugenden: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "18a84bfc-9ccc-4960-a697-1a2faf40e787",
      "parentUUID": "fbe2b58a-bbed-49f6-9dd7-2ca3f9f2973a",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.jugend\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.jugend\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e4b881d-a887-4eb4-b5b1-4a3e828ef61b",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter POST /api/spiele: benötigt den Key \"body.gruppe\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ffc5eb0a-3188-48af-9cd6-f1fc3307c80b",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele hat benötigte Request-Parameter DELETE /api/spiele: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "273cf485-5bed-496c-bef9-4c99aa8f9e3d",
      "parentUUID": "d6206dcd-4ab8-4a57-a94a-72332b409a94",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a45eb41e-c2ae-475f-8a7e-a2a9dd86ebbe",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreA\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "70e47cc8-49e7-42e7-8142-606934b1e221",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter PUT /api/spiele/tore: benötigt den Key \"body.toreB\"",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4a46ec14-af9e-43ea-ac4c-38a519eea96d",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/spiele/tore hat benötigte Request-Parameter DELETE /api/spiele/tore: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87e322dd-0bdf-462c-a4a5-a6829e820d22",
      "parentUUID": "e21faf9d-e5c6-4840-afb7-67ce083d21d3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startzeit\"",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c26724de-273d-40aa-8a03-af8c228ce46e",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.spielzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "cdc70750-dc3c-45fd-950c-dc00059e7ccc",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.pausenzeit\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9102a54f-beee-42c3-9b9b-60f272b6c5b5",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.endzeit\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4e895d44-6d54-4318-a56d-6badf05debb1",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.startdatum\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ee8dbd58-e7a7-4ef9-a7b0-0ed40845b80e",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "fullTitle": "die Route /api/spielplan/zeiten hat benötigte Request-Parameter PUT /api/spielplan/zeiten: benötigt den Key \"body.enddatum\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f8bbcc36-6310-4c76-84e0-e97454a62349",
      "parentUUID": "631d72db-c1d6-4bbe-bbf3-9d4a327a51e3",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3fdb11c9-2558-4344-865e-1944cf1442fc",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "dc4e590a-f69e-4015-b85c-1668941f3e71",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: benötigt den Key \"body.role\"",
      "fullTitle": "die Route /api/users/register hat benötigte Request-Parameter POST /api/users/register: benötigt den Key \"body.role\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4443ff38-1d7f-4cfb-9369-f48bbce5d338",
      "parentUUID": "38b1bc8f-3b7e-461e-9764-8370a67c1dcb",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89f0b4c1-fef0-46dd-90fd-9ebb695ead75",
      "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
      "skipped": false
    },
    {
      "title": "POST /api/users/login: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/login hat benötigte Request-Parameter POST /api/users/login: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0adcd40-3d2a-4ca7-9d2d-a41fe15fe6da",
      "parentUUID": "8c340c9b-7e9a-4341-834f-0bfc663fb07c",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/delete hat benötigte Request-Parameter PUT /api/users/delete: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f5ffc4ee-af6d-4fd4-b2e4-174e063ffb10",
      "parentUUID": "d278d02f-f1a5-4693-a34d-006441bcc3dd",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/password-forgot hat benötigte Request-Parameter PUT /api/users/password-forgot: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f84f85e-3570-4100-a704-919919a9d7e2",
      "parentUUID": "2c6baf4d-12f6-4e30-b6eb-a051f10dfbe3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset/check hat benötigte Request-Parameter PUT /api/users/password-reset/check: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e3acb057-55e6-4846-a11e-272e51adcecb",
      "parentUUID": "acbca163-80d7-47a1-a3ad-7a32a13fd281",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.token\"",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e36ddb2-8272-4ea7-9390-0c57bb79c90f",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06430356-7a41-482e-acb0-1291fba8cb5f",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "fullTitle": "die Route /api/users/password-reset hat benötigte Request-Parameter PUT /api/users/password-reset: benötigt den Key \"body.password\"",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "813aeb07-0332-48bb-89eb-3828ee684592",
      "parentUUID": "06aabe53-d425-43ed-b4ec-62fe199d54dc",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e0e0ef2e-f0af-43bc-a681-d2459a8d5a94",
      "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "fullTitle": "die Route /api/users/userDetails hat benötigte Request-Parameter PUT /api/users/userDetails: benötigt den Key \"body.username\"",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c3fccf51-0e3e-428d-9951-e7d0051a64de",
      "parentUUID": "72cf5980-7973-4272-8ec2-98a19bee3407",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.name\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5dc02e63-8a13-469e-bdb0-b521bebd5839",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.turnier\"",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e9a5f98b-712b-411e-b418-1ed0f7db355c",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter POST /api/ansprechpartner: benötigt den Key \"body.email\"",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bc720755-7a6e-4db1-ba50-4f89ca112e7e",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter PUT /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "807784ab-94f2-47b4-a3de-214de1043da8",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    },
    {
      "title": "DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "fullTitle": "die Route /api/ansprechpartner hat benötigte Request-Parameter DELETE /api/ansprechpartner: benötigt den Key \"query.id\"",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .query(object.query)\n    .set('Authorization', token)\n    .send(object.body)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3ccabdeb-25d4-496a-bdcd-733f38222d12",
      "parentUUID": "a7616179-cc5e-4657-971a-31ec454ed37a",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}