{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-25T12:25:56.586Z",
    "end": "2017-05-25T12:25:58.014Z",
    "duration": 1428,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 143,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e8a35f7b-0f11-4562-bd21-65933ab3d83e",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 37,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f11e3c7-a00d-4b22-92db-88798cdc93fb",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7cf06bf4-687e-4589-9e48-6910590e92c9",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05ea2a28-d40d-4929-80a7-11bc023c8ef8",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "29f1ddbd-3f13-4216-81ec-9790170e4525",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).to.have.lengthOf(anzahlVorher + 1);\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ff9fb9c7-7f1c-42fc-bf34-c840ae7a80f8",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "acf1d212-8ea1-4e8c-99df-e5329ea2948c",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 120,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken())\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ca961af6-3cc3-43bf-aae0-ebc2caffc20d",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Team').find().exec(function (err, res) {\n                if (err) throw err;\n                anzahlTeamsVorher = res.length;\n                return request(server)\n                    .del('/api/gruppen?id=' + neueGruppeId)\n                    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n                    .set('Authorization', server.adminToken())\n                    .expect(200)\n                    .end(function (err, res) {\n                        if (err) throw err;\n                        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                        const clsSession = cls.getNamespace();\n                        return clsSession.run(function () {\n                            clsSession.set('beachEventID', server.eventID);\n                            mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                                if (err) throw err;\n                                expect(res).not.to.exist;\n                                const clsSession = cls.getNamespace();\n                                return clsSession.run(function () {\n                                    clsSession.set('beachEventID', server.eventID);\n                                    mongoose.model('Team').find().exec(function (err, res) {\n                                        if (err) throw err;\n                                        expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "67d5370f-f116-4f4f-b8af-06ffb7f10e64",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 120000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 143,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e8a35f7b-0f11-4562-bd21-65933ab3d83e",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 37,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9f11e3c7-a00d-4b22-92db-88798cdc93fb",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7cf06bf4-687e-4589-9e48-6910590e92c9",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "05ea2a28-d40d-4929-80a7-11bc023c8ef8",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "29f1ddbd-3f13-4216-81ec-9790170e4525",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).to.have.lengthOf(anzahlVorher + 1);\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ff9fb9c7-7f1c-42fc-bf34-c840ae7a80f8",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "acf1d212-8ea1-4e8c-99df-e5329ea2948c",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 120,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken())\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ca961af6-3cc3-43bf-aae0-ebc2caffc20d",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Team').find().exec(function (err, res) {\n                if (err) throw err;\n                anzahlTeamsVorher = res.length;\n                return request(server)\n                    .del('/api/gruppen?id=' + neueGruppeId)\n                    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n                    .set('Authorization', server.adminToken())\n                    .expect(200)\n                    .end(function (err, res) {\n                        if (err) throw err;\n                        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                        const clsSession = cls.getNamespace();\n                        return clsSession.run(function () {\n                            clsSession.set('beachEventID', server.eventID);\n                            mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                                if (err) throw err;\n                                expect(res).not.to.exist;\n                                const clsSession = cls.getNamespace();\n                                return clsSession.run(function () {\n                                    clsSession.set('beachEventID', server.eventID);\n                                    mongoose.model('Team').find().exec(function (err, res) {\n                                        if (err) throw err;\n                                        expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "67d5370f-f116-4f4f-b8af-06ffb7f10e64",
            "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 799,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 120000,
    "uuid": "e07aa7d5-caad-4bba-b1e4-ad49fd60142f",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 143,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8a35f7b-0f11-4562-bd21-65933ab3d83e",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f11e3c7-a00d-4b22-92db-88798cdc93fb",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7cf06bf4-687e-4589-9e48-6910590e92c9",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05ea2a28-d40d-4929-80a7-11bc023c8ef8",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "29f1ddbd-3f13-4216-81ec-9790170e4525",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).to.have.lengthOf(anzahlVorher + 1);\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff9fb9c7-7f1c-42fc-bf34-c840ae7a80f8",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "acf1d212-8ea1-4e8c-99df-e5329ea2948c",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 120,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken())\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca961af6-3cc3-43bf-aae0-ebc2caffc20d",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Team').find().exec(function (err, res) {\n                if (err) throw err;\n                anzahlTeamsVorher = res.length;\n                return request(server)\n                    .del('/api/gruppen?id=' + neueGruppeId)\n                    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n                    .set('Authorization', server.adminToken())\n                    .expect(200)\n                    .end(function (err, res) {\n                        if (err) throw err;\n                        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                        const clsSession = cls.getNamespace();\n                        return clsSession.run(function () {\n                            clsSession.set('beachEventID', server.eventID);\n                            mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                                if (err) throw err;\n                                expect(res).not.to.exist;\n                                const clsSession = cls.getNamespace();\n                                return clsSession.run(function () {\n                                    clsSession.set('beachEventID', server.eventID);\n                                    mongoose.model('Team').find().exec(function (err, res) {\n                                        if (err) throw err;\n                                        expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67d5370f-f116-4f4f-b8af-06ffb7f10e64",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 143,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8a35f7b-0f11-4562-bd21-65933ab3d83e",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9f11e3c7-a00d-4b22-92db-88798cdc93fb",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7cf06bf4-687e-4589-9e48-6910590e92c9",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "05ea2a28-d40d-4929-80a7-11bc023c8ef8",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "29f1ddbd-3f13-4216-81ec-9790170e4525",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).to.have.lengthOf(anzahlVorher + 1);\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ff9fb9c7-7f1c-42fc-bf34-c840ae7a80f8",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "acf1d212-8ea1-4e8c-99df-e5329ea2948c",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 120,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'aaaa1111bbbb2222cccc3333')\n    .set('Authorization', server.adminToken())\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ca961af6-3cc3-43bf-aae0-ebc2caffc20d",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n    .set('Authorization', server.adminToken())\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        const clsSession = cls.getNamespace();\n        return clsSession.run(function () {\n            clsSession.set('beachEventID', server.eventID);\n            mongoose.model('Team').find().exec(function (err, res) {\n                if (err) throw err;\n                anzahlTeamsVorher = res.length;\n                return request(server)\n                    .del('/api/gruppen?id=' + neueGruppeId)\n                    .set(constants.BEACH_EVENT_HEADER_NAME, server.eventID)\n                    .set('Authorization', server.adminToken())\n                    .expect(200)\n                    .end(function (err, res) {\n                        if (err) throw err;\n                        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                        const clsSession = cls.getNamespace();\n                        return clsSession.run(function () {\n                            clsSession.set('beachEventID', server.eventID);\n                            mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                                if (err) throw err;\n                                expect(res).not.to.exist;\n                                const clsSession = cls.getNamespace();\n                                return clsSession.run(function () {\n                                    clsSession.set('beachEventID', server.eventID);\n                                    mongoose.model('Team').find().exec(function (err, res) {\n                                        if (err) throw err;\n                                        expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "67d5370f-f116-4f4f-b8af-06ffb7f10e64",
      "parentUUID": "4f76afb5-ec95-4d67-9aec-3202f7c46c1b",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}