{
  "stats": {
    "suites": 28,
    "tests": 206,
    "passes": 206,
    "pending": 0,
    "failures": 0,
    "start": "2017-01-16T08:55:57.231Z",
    "end": "2017-01-16T08:56:01.836Z",
    "duration": 4605,
    "testsRegistered": 206,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Route: Config",
        "suites": [],
        "tests": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cdfecde0-7646-44d8-b116-6c6b2c538efb",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c824dad4-924a-41ba-b45f-4ff1274ca945",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c1efcf81-4ebf-4e41-8f94-e305e58ba340",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt die Kontaktangaben zurück",
            "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "df5d5ade-d1fc-42ae-9f3a-380b105bc26d",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/config.spec.js",
        "uuid": "7c239420-4a03-4e5e-81c7-955c92824f9e",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/config.spec.js",
        "passes": [
          {
            "title": "gibt die richtige Versionsnummer zurück",
            "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cdfecde0-7646-44d8-b116-6c6b2c538efb",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt den Lockdownmode zurück",
            "fullTitle": "Route: Config gibt den Lockdownmode zurück",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c824dad4-924a-41ba-b45f-4ff1274ca945",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt die Umgebung zurück",
            "fullTitle": "Route: Config gibt die Umgebung zurück",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c1efcf81-4ebf-4e41-8f94-e305e58ba340",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          },
          {
            "title": "gibt die Kontaktangaben zurück",
            "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "df5d5ade-d1fc-42ae-9f3a-380b105bc26d",
            "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 59
      },
      {
        "title": "Route: Email",
        "suites": [],
        "tests": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "99428fe5-4761-40b4-9de2-15d4c5e58dd1",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "49ebf1c0-cefc-48ac-be98-eca21bd1a0f7",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c747d59-127a-4b18-91fe-5e2e554b0830",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0d8d647f-6d8f-467b-bc9c-e40b5fdd25f9",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9e38e7dd-a2d4-4649-88ff-e0405de0e814",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fd61d389-47e5-4ea9-b867-7d957e5a6a42",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/email.spec.js",
        "uuid": "b361051a-26f1-4322-a355-38a2dffa524c",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/email.spec.js",
        "passes": [
          {
            "title": "soll Abonnenten hinzufügen können",
            "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "99428fe5-4761-40b4-9de2-15d4c5e58dd1",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "49ebf1c0-cefc-48ac-be98-eca21bd1a0f7",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Bei leerem Text soll ein Fehler geworfen werden",
            "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c747d59-127a-4b18-91fe-5e2e554b0830",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "Sendet eine Email an alle Abonennten",
            "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0d8d647f-6d8f-467b-bc9c-e40b5fdd25f9",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "soll die Abonnenten laden",
            "fullTitle": "Route: Email soll die Abonnenten laden",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9e38e7dd-a2d4-4649-88ff-e0405de0e814",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          },
          {
            "title": "soll Abonnenten löschen können",
            "fullTitle": "Route: Email soll Abonnenten löschen können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fd61d389-47e5-4ea9-b867-7d957e5a6a42",
            "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 254
      },
      {
        "title": "Route: Gruppen",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "27764e5a-c69a-420a-8626-1c31714f4568",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 72,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3cb016d7-484e-42e1-8484-69194cf478a9",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ad746ee4-0e30-4959-9701-9b69f573c3b0",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5eaac1b2-cfec-4ddb-a035-841d73b50ee3",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5fc04198-8c45-4215-ae34-40556dbf07ca",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 85,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9325c5c5-210b-4d17-9aae-afcc6249b434",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52d92523-8963-4920-88e7-b667cefbdb92",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "503db379-638d-4ddc-87a3-4181b18dde64",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "98e9775e-dd3c-4e93-87b4-e1ce1c024bcd",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 124,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fda24c7-8f24-414c-b202-32b3bac5db24",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/gruppen.spec.js",
        "uuid": "76f327ba-cdc5-4358-9f64-28c95a732c80",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/gruppen.spec.js",
        "passes": [
          {
            "title": "soll alle Gruppen laden können",
            "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
            "timedOut": false,
            "duration": 32,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "27764e5a-c69a-420a-8626-1c31714f4568",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Gruppe laden können",
            "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
            "timedOut": false,
            "duration": 72,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3cb016d7-484e-42e1-8484-69194cf478a9",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll die Gruppen einer Jugend laden können",
            "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ad746ee4-0e30-4959-9701-9b69f573c3b0",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5eaac1b2-cfec-4ddb-a035-841d73b50ee3",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5fc04198-8c45-4215-ae34-40556dbf07ca",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe hinzufügen können",
            "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
            "timedOut": false,
            "duration": 85,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9325c5c5-210b-4d17-9aae-afcc6249b434",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52d92523-8963-4920-88e7-b667cefbdb92",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "503db379-638d-4ddc-87a3-4181b18dde64",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "98e9775e-dd3c-4e93-87b4-e1ce1c024bcd",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          },
          {
            "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
            "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
            "timedOut": false,
            "duration": 124,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7fda24c7-8f24-414c-b202-32b3bac5db24",
            "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 524
      },
      {
        "title": "Route: Index",
        "suites": [],
        "tests": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c44d733b-7717-444a-bf97-5b6148c0225a",
            "parentUUID": "a9194f1a-3f25-4c17-a2bf-6ec3ef981f46",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/index.spec.js",
        "uuid": "a9194f1a-3f25-4c17-a2bf-6ec3ef981f46",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/index.spec.js",
        "passes": [
          {
            "title": "soll die index.html rendern",
            "fullTitle": "Route: Index soll die index.html rendern",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c44d733b-7717-444a-bf97-5b6148c0225a",
            "parentUUID": "a9194f1a-3f25-4c17-a2bf-6ec3ef981f46",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 19
      },
      {
        "title": "Route: Jugenden",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd2f6504-ab83-435b-ae71-a26ebc1d814e",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55b3fdf2-3e79-49c1-a225-8a3d2ae3225a",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d18886af-8224-4aca-9e65-a9e460b432f2",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 75,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a002c82b-47ba-4bde-833c-56067f4d6bc4",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e604d115-441b-408b-9d06-5bd317f1cf0c",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a713d8bf-3cd2-40c7-8855-df458ce64b63",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "393ff929-5caa-4edd-b146-0d20e8e3ecdd",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "612a97e7-7664-4197-9b71-1c8fff37acc5",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f90b3a4e-2c78-45cc-af5c-cea418be4389",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/jugenden.spec.js",
        "uuid": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/jugenden.spec.js",
        "passes": [
          {
            "title": "soll alle Jugenden laden können",
            "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bd2f6504-ab83-435b-ae71-a26ebc1d814e",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine einzelne Jugend laden können",
            "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "55b3fdf2-3e79-49c1-a225-8a3d2ae3225a",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d18886af-8224-4aca-9e65-a9e460b432f2",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
            "timedOut": false,
            "duration": 75,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a002c82b-47ba-4bde-833c-56067f4d6bc4",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll die Gesamtzahl der Tore laden",
            "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e604d115-441b-408b-9d06-5bd317f1cf0c",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll die Tore für eine einzelne Jugend laden",
            "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a713d8bf-3cd2-40c7-8855-df458ce64b63",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "393ff929-5caa-4edd-b146-0d20e8e3ecdd",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "612a97e7-7664-4197-9b71-1c8fff37acc5",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          },
          {
            "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f90b3a4e-2c78-45cc-af5c-cea418be4389",
            "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 351
      },
      {
        "title": "Route: Spiele",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f40f869a-817e-42e0-afb2-d68bf08154bd",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "68067706-075b-4e6a-b68f-028b9ab64a29",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 50,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fcb31cfa-c933-47f9-9ce7-181c0fb65df1",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1ccb5f9-51c7-403c-adb8-e10d1eb94d4d",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0dfb216f-9167-478e-9a37-219f25ddbb4c",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6d0f0fd-3fb1-4eda-bf87-b8f5e85c2e27",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e117930b-e083-42e7-aea0-5f721b701c4e",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1b657c28-d6a9-406f-8abb-a28b76cdae5b",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2e4da117-3197-4efe-b97b-e4daebeba8cc",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b8d02066-0989-4ba7-899a-8e0526e52407",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0f7e5c05-1cff-49c2-a533-83877d4cc4db",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "13a8697c-6824-4276-a1f0-7d5889c63dd0",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "30afb70f-2aed-4732-856f-be1727510124",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "066bc29b-bfc4-4fcc-b027-b87b6deedcc1",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9db56cae-4714-46a4-ba96-00e9d4458976",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spiele.spec.js",
        "uuid": "22271119-10ad-45e3-9bfd-13d06c725dd4",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spiele.spec.js",
        "passes": [
          {
            "title": "soll alle Spiele laden können",
            "fullTitle": "Route: Spiele soll alle Spiele laden können",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f40f869a-817e-42e0-afb2-d68bf08154bd",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Spiel laden können",
            "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "68067706-075b-4e6a-b68f-028b9ab64a29",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Gruppe laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
            "timedOut": false,
            "duration": 50,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fcb31cfa-c933-47f9-9ce7-181c0fb65df1",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele einer Jugend laden",
            "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b1ccb5f9-51c7-403c-adb8-e10d1eb94d4d",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Spiele eines Teams laden",
            "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0dfb216f-9167-478e-9a37-219f25ddbb4c",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6d0f0fd-3fb1-4eda-bf87-b8f5e85c2e27",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e117930b-e083-42e7-aea0-5f721b701c4e",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein Spiel speichern können",
            "fullTitle": "Route: Spiele soll ein Spiel speichern können",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1b657c28-d6a9-406f-8abb-a28b76cdae5b",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2e4da117-3197-4efe-b97b-e4daebeba8cc",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll ein Spiel löschen können",
            "fullTitle": "Route: Spiele soll ein Spiel löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b8d02066-0989-4ba7-899a-8e0526e52407",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll alle Spiele löschen können",
            "fullTitle": "Route: Spiele soll alle Spiele löschen können",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0f7e5c05-1cff-49c2-a533-83877d4cc4db",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll alle Spiele speichern können",
            "fullTitle": "Route: Spiele soll alle Spiele speichern können",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "13a8697c-6824-4276-a1f0-7d5889c63dd0",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "30afb70f-2aed-4732-856f-be1727510124",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll die Tore zurücksetzen können",
            "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
            "timedOut": false,
            "duration": 63,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "066bc29b-bfc4-4fcc-b027-b87b6deedcc1",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          },
          {
            "title": "soll das Ergebnis speichern",
            "fullTitle": "Route: Spiele soll das Ergebnis speichern",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9db56cae-4714-46a4-ba96-00e9d4458976",
            "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 15,
        "totalPasses": 15,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 500
      },
      {
        "title": "Route: Spielplan",
        "suites": [],
        "tests": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3e8d27e4-219b-48e3-9f09-5d86f9809e73",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8839746e-6e84-4213-acb0-c0621e2002ff",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8c1b47f3-4668-4707-9d9b-bfb55f184d74",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "56e80c8f-f54e-4b86-b966-daf300e4bd4e",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "997cf9c7-79cc-41f7-a764-40f008aa35b3",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen speichern",
            "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2af19492-1484-402a-a065-e225eefe207d",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen laden",
            "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a41429fc-7272-4c1e-983f-3c409e01cf5c",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b18bfaa-1039-4673-bbca-0b1155c79d32",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/spielplan.spec.js",
        "uuid": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/spielplan.spec.js",
        "passes": [
          {
            "title": "soll den Spielplan laden können",
            "fullTitle": "Route: Spielplan soll den Spielplan laden können",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3e8d27e4-219b-48e3-9f09-5d86f9809e73",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8839746e-6e84-4213-acb0-c0621e2002ff",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8c1b47f3-4668-4707-9d9b-bfb55f184d74",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "56e80c8f-f54e-4b86-b966-daf300e4bd4e",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Zeiten updaten können",
            "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "997cf9c7-79cc-41f7-a764-40f008aa35b3",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen speichern",
            "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2af19492-1484-402a-a065-e225eefe207d",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll die Ausnahmen laden",
            "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a41429fc-7272-4c1e-983f-3c409e01cf5c",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          },
          {
            "title": "soll den Spielplan generieren",
            "fullTitle": "Route: Spielplan soll den Spielplan generieren",
            "timedOut": false,
            "duration": 293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b18bfaa-1039-4673-bbca-0b1155c79d32",
            "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 479
      },
      {
        "title": "Route: Teams",
        "suites": [],
        "tests": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "797a5af8-530d-404f-98db-8c792e84d64c",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9cab7893-d785-4012-ba56-aeefb86dd9ee",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e99df993-e061-4094-8dc9-290d166223ba",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c5edfd02-ff30-499b-8111-c8bf7e0dc497",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "25816acb-4bed-4885-879c-7f0a53106125",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "908dba4c-cef5-47bc-9fa8-3ae007b37c3e",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "392af9d7-cad7-4337-a959-8416b42d6f2a",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3aec248f-8110-4b4d-9746-50074c099ea3",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1eacd81d-966b-4023-8cc7-467912d562a5",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2fa2cbc6-1957-497d-9705-f244d687bcd5",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2f0e4801-9691-478a-86ae-6bb84d183c5b",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/teams.spec.js",
        "uuid": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/teams.spec.js",
        "passes": [
          {
            "title": "soll alle Teams laden können",
            "fullTitle": "Route: Teams soll alle Teams laden können",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "797a5af8-530d-404f-98db-8c792e84d64c",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein einzelnes Team laden können",
            "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9cab7893-d785-4012-ba56-aeefb86dd9ee",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Jugend laden können",
            "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e99df993-e061-4094-8dc9-290d166223ba",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Teams einer Gruppe laden können",
            "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c5edfd02-ff30-499b-8111-c8bf7e0dc497",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "25816acb-4bed-4885-879c-7f0a53106125",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein Team hinzufügen können",
            "fullTitle": "Route: Teams soll ein Team hinzufügen können",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "908dba4c-cef5-47bc-9fa8-3ae007b37c3e",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "392af9d7-cad7-4337-a959-8416b42d6f2a",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll den Namen eines Teams aktualisieren können",
            "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3aec248f-8110-4b4d-9746-50074c099ea3",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1eacd81d-966b-4023-8cc7-467912d562a5",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll ein Team löschen",
            "fullTitle": "Route: Teams soll ein Team löschen",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2fa2cbc6-1957-497d-9705-f244d687bcd5",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          },
          {
            "title": "soll die Ergebnisse aller Teams zurücksetzen",
            "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2f0e4801-9691-478a-86ae-6bb84d183c5b",
            "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 11,
        "totalPasses": 11,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 282
      },
      {
        "title": "Route: Users",
        "suites": [],
        "tests": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4958e12b-6dee-40af-9b5b-397ca60a8f64",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eeac9b9b-e073-499c-b119-6827a01e8175",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e6e07ab5-47f3-4397-a141-79bd0dba717e",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .expect(200)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "539023ff-4958-4a5c-897b-20042ec4ad0c",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "00cf144d-d0dd-44be-8f23-c4b55a61b29d",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3d934c1c-e194-4533-8561-b60b418321dd",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f336a02c-4a00-464f-ad89-498d18c1f914",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c08044e3-a2dd-42d9-a7df-05dc3a888d44",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e89ef19f-7aa1-488a-9545-a7864942aaa0",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a9045d8-ca61-412c-b375-27a7d742ec5c",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6c31116-da69-4944-946b-67ce1de07d65",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .expect(200)\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3ab89297-54f8-4bb3-b25b-b477f65b06d0",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1ef0a49b-5e21-41a7-b90b-e6b65fff17a6",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19f8c743-e864-444f-bc4a-7ca54887d51b",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d83bea9d-eae9-44b8-b411-8720e6ba09ad",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "53ecef21-4a31-4a21-930b-561c09f4d213",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "03206b80-4cdb-41ea-9cff-c139299bf808",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0e56f70c-7a98-4cee-bc6b-f747688f6cfd",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/users.spec.js",
        "uuid": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/users.spec.js",
        "passes": [
          {
            "title": "soll einen Nutzer registrieren können",
            "fullTitle": "Route: Users soll einen Nutzer registrieren können",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4958e12b-6dee-40af-9b5b-397ca60a8f64",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
            "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
            "timedOut": false,
            "duration": 21,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eeac9b9b-e073-499c-b119-6827a01e8175",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll keine doppelten Nutzernamen geben",
            "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e6e07ab5-47f3-4397-a141-79bd0dba717e",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer einloggen können",
            "fullTitle": "Route: Users soll einen Nutzer einloggen können",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .expect(200)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "539023ff-4958-4a5c-897b-20042ec4ad0c",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "00cf144d-d0dd-44be-8f23-c4b55a61b29d",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Passwort",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3d934c1c-e194-4533-8561-b60b418321dd",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
            "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f336a02c-4a00-464f-ad89-498d18c1f914",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
            "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c08044e3-a2dd-42d9-a7df-05dc3a888d44",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Der Nutzername berni soll nicht gelöscht werden können",
            "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e89ef19f-7aa1-488a-9545-a7864942aaa0",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll den Nutzernamen ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a9045d8-ca61-412c-b375-27a7d742ec5c",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll ein neues Passwort anfordern können",
            "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6c31116-da69-4944-946b-67ce1de07d65",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll prüfen können ob ein ResetToken gültig ist",
            "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
            "timedOut": false,
            "duration": 25,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .expect(200)\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3ab89297-54f8-4bb3-b25b-b477f65b06d0",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll ein neues Passwort speichern",
            "fullTitle": "Route: Users soll ein neues Passwort speichern",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1ef0a49b-5e21-41a7-b90b-e6b65fff17a6",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll die Email ändern können",
            "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19f8c743-e864-444f-bc4a-7ca54887d51b",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d83bea9d-eae9-44b8-b411-8720e6ba09ad",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "53ecef21-4a31-4a21-930b-561c09f4d213",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "03206b80-4cdb-41ea-9cff-c139299bf808",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          },
          {
            "title": "soll einen Nutzer löschen können",
            "fullTitle": "Route: Users soll einen Nutzer löschen können",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0e56f70c-7a98-4cee-bc6b-f747688f6cfd",
            "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 18,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 404
      },
      {
        "title": "API Authorization",
        "suites": [
          {
            "title": "API Authorization: Es wird keine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "db5b097f-6984-4c53-b187-2d85d673a9d6",
                "parentUUID": "23f8c296-3097-4624-80aa-12d135b6bd5a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "23f8c296-3097-4624-80aa-12d135b6bd5a",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "Der Request soll ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "db5b097f-6984-4c53-b187-2d85d673a9d6",
                "parentUUID": "23f8c296-3097-4624-80aa-12d135b6bd5a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 57
          },
          {
            "title": "API Authorization: Es wird eine bestimmte Rolle benötigt",
            "suites": [],
            "tests": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c8baa59f-6a2d-40c0-8696-df2d4797082b",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0fadb651-5a00-46f5-b8e7-dabf8f79b9ea",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5ecfdcab-cc98-4512-93f5-ad8bba80cbff",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "59835da5-2eb1-4380-ba64-90542c3f08b5",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "00b664d3-efe8-4025-a176-42ab61fa0408",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66ac0fb5-43ef-4443-bf27-5c2d397f6995",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "4e52a27e-b654-4735-b099-cc9ffa70979e",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [
              {
                "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c8baa59f-6a2d-40c0-8696-df2d4797082b",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0fadb651-5a00-46f5-b8e7-dabf8f79b9ea",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5ecfdcab-cc98-4512-93f5-ad8bba80cbff",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "59835da5-2eb1-4380-ba64-90542c3f08b5",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "00b664d3-efe8-4025-a176-42ab61fa0408",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              },
              {
                "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "fullTitle": "API Authorization API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66ac0fb5-43ef-4443-bf27-5c2d397f6995",
                "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 115
          },
          {
            "title": "Prüfung der Routen",
            "suites": [
              {
                "title": "die Route /api/email soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df0bd9fd-64d6-4610-b09f-88b2113546ad",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7a71687-c929-4e9b-aab0-d85c9031a47b",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e343791b-8890-4d41-a103-3a9f2df4a53e",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df0bd9fd-64d6-4610-b09f-88b2113546ad",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7a71687-c929-4e9b-aab0-d85c9031a47b",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/email: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e343791b-8890-4d41-a103-3a9f2df4a53e",
                    "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 13
              },
              {
                "title": "die Route /api/email/subscriber soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7ee8ed3-78d9-4788-98bb-a6d82f69ab67",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10e2dd9c-1a75-4ee0-b196-c9bfaca55773",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e96c024d-cf98-42a6-9bf3-d0c44d762b3e",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7ee8ed3-78d9-4788-98bb-a6d82f69ab67",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10e2dd9c-1a75-4ee0-b196-c9bfaca55773",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e96c024d-cf98-42a6-9bf3-d0c44d762b3e",
                    "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 34
              },
              {
                "title": "die Route /api/gruppen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99fa0ae0-f874-4989-a9c9-045832ac07cb",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a0b62b5-f08e-423b-ab1a-319d50e6fa3d",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "895f3ff3-d09b-43f2-8329-e19f9995d694",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c17cf445-e7a7-4596-9068-532a32d1775d",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87cbd32c-f39d-463a-81f3-cf79884b9165",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89709ac6-8841-40a8-8b7e-dd0c314f1dab",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99fa0ae0-f874-4989-a9c9-045832ac07cb",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a0b62b5-f08e-423b-ab1a-319d50e6fa3d",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "895f3ff3-d09b-43f2-8329-e19f9995d694",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c17cf445-e7a7-4596-9068-532a32d1775d",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87cbd32c-f39d-463a-81f3-cf79884b9165",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89709ac6-8841-40a8-8b7e-dd0c314f1dab",
                    "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 63
              },
              {
                "title": "die Route /api/teams soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99171e94-3649-4250-bf8a-0f580e90a470",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a18210f3-5167-428d-ae87-f5aa6e8537ec",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0b12b0f-0a7e-4cdd-be2e-07d5874f4541",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a19e9b5a-94de-4587-92bb-33910e7e8d1f",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "041189dd-e61e-49fb-a654-7a161203ef36",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bb84041-1f02-46fd-9897-b88a9c33fe62",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4df3c3f-fcbe-43c6-852c-dbf2695531d3",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9408b69-365a-4d6e-94d8-8bd6a2a1716c",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fab27027-ab0a-4e30-baf2-4cbc18388ddc",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "99f8d336-3217-4d46-b693-092f7c7d1131",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99171e94-3649-4250-bf8a-0f580e90a470",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a18210f3-5167-428d-ae87-f5aa6e8537ec",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0b12b0f-0a7e-4cdd-be2e-07d5874f4541",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a19e9b5a-94de-4587-92bb-33910e7e8d1f",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "041189dd-e61e-49fb-a654-7a161203ef36",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bb84041-1f02-46fd-9897-b88a9c33fe62",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4df3c3f-fcbe-43c6-852c-dbf2695531d3",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9408b69-365a-4d6e-94d8-8bd6a2a1716c",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fab27027-ab0a-4e30-baf2-4cbc18388ddc",
                    "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 81
              },
              {
                "title": "die Route /api/teams/resetErgebnisse soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "153fddef-646a-4798-9d64-1230a84599c2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "312b0661-d134-4ed6-8ff5-45a2bc4da263",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0351ac1-1e74-410c-af59-868b1ff6d7aa",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d274fdbd-8e35-45ef-b104-8396c8706734",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41a27211-eab4-4276-8e69-c8b3fdb1897f",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36998e6c-3947-4bac-91d8-768df07aa1b2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c263b78-cc59-45d2-9501-75eb2a878425",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f0660b2-6c2e-4ea1-8347-3a939867c27c",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c11d3125-5f86-475f-bc39-679a15899c9f",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "855db2ce-2b73-4ed0-b19e-1ad9d49032f6",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "642ac373-becc-46d1-a782-41192f3b90d4",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e91ad85-2163-4129-ad59-d4b82cdab7a2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "153fddef-646a-4798-9d64-1230a84599c2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "312b0661-d134-4ed6-8ff5-45a2bc4da263",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0351ac1-1e74-410c-af59-868b1ff6d7aa",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d274fdbd-8e35-45ef-b104-8396c8706734",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41a27211-eab4-4276-8e69-c8b3fdb1897f",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36998e6c-3947-4bac-91d8-768df07aa1b2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c263b78-cc59-45d2-9501-75eb2a878425",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f0660b2-6c2e-4ea1-8347-3a939867c27c",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c11d3125-5f86-475f-bc39-679a15899c9f",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "855db2ce-2b73-4ed0-b19e-1ad9d49032f6",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "642ac373-becc-46d1-a782-41192f3b90d4",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e91ad85-2163-4129-ad59-d4b82cdab7a2",
                    "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 133
              },
              {
                "title": "die Route /api/jugenden soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8c69b7b-1872-4c20-adbf-f1e3fe065d63",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9b91ccf-4c66-4e30-9224-46bb3fc2cb42",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f067eb8c-7062-42c7-8e1e-d75b85d4feb1",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07e3b010-eea6-4c48-95d2-81c8d49355a8",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06d310fe-dd4a-4254-8f86-169a08fc3115",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92da04c7-15eb-4431-963d-5dd6fc4fda63",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8c69b7b-1872-4c20-adbf-f1e3fe065d63",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9b91ccf-4c66-4e30-9224-46bb3fc2cb42",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f067eb8c-7062-42c7-8e1e-d75b85d4feb1",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07e3b010-eea6-4c48-95d2-81c8d49355a8",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06d310fe-dd4a-4254-8f86-169a08fc3115",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92da04c7-15eb-4431-963d-5dd6fc4fda63",
                    "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 50
              },
              {
                "title": "die Route /api/spiele soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90eedcea-9a31-43ee-bef1-c6aa5721eae7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68dbfc2d-4a3b-4d2f-aee5-1dfec14383d7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "feaa19d7-9824-4d59-a0c7-b280a3d00f3a",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58f70562-947b-46ee-8a28-60ae314affb7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "674e72a6-7945-4f5f-bac0-674581364a01",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb617c21-5108-4fda-a546-f2fdf53cac3c",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90eedcea-9a31-43ee-bef1-c6aa5721eae7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68dbfc2d-4a3b-4d2f-aee5-1dfec14383d7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "feaa19d7-9824-4d59-a0c7-b280a3d00f3a",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58f70562-947b-46ee-8a28-60ae314affb7",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "674e72a6-7945-4f5f-bac0-674581364a01",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb617c21-5108-4fda-a546-f2fdf53cac3c",
                    "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 75
              },
              {
                "title": "die Route /api/spiele/alle soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cbf5391-e944-44fb-9131-f06f3abf32c1",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c58bc7a-4804-44bc-955f-826cc3259870",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9afe5235-b8cb-4087-8f05-b32919f1a2c9",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83314f64-b5ca-4c2c-a6dc-a95bcc06fe0b",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8b188cf-d3a0-4280-bb33-c72b9c2fb002",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e107e63c-63f2-41f8-8045-efcb5dd5630d",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ce82cfc-dca4-40b7-a096-d4637307f58d",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99e008e1-9c56-484f-bd1d-62f6af7c13a6",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f9e22467-e80e-4dcb-a0cd-eb555f4456c8",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e1d3e2b-b5e3-44c7-a1b7-1907a1b2dcf0",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5156ba75-78a3-4e69-9c13-260243586a06",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "165d47c4-ea8d-4c12-980c-98be13920fac",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cbf5391-e944-44fb-9131-f06f3abf32c1",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c58bc7a-4804-44bc-955f-826cc3259870",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9afe5235-b8cb-4087-8f05-b32919f1a2c9",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83314f64-b5ca-4c2c-a6dc-a95bcc06fe0b",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8b188cf-d3a0-4280-bb33-c72b9c2fb002",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e107e63c-63f2-41f8-8045-efcb5dd5630d",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ce82cfc-dca4-40b7-a096-d4637307f58d",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99e008e1-9c56-484f-bd1d-62f6af7c13a6",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f9e22467-e80e-4dcb-a0cd-eb555f4456c8",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e1d3e2b-b5e3-44c7-a1b7-1907a1b2dcf0",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5156ba75-78a3-4e69-9c13-260243586a06",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "165d47c4-ea8d-4c12-980c-98be13920fac",
                    "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 109
              },
              {
                "title": "die Route /api/spiele/tore soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ebf229f-3826-4725-83e5-150505a054cb",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "836161ee-e3ac-4644-82c5-a5bbcc147429",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83ee0df1-dd69-412b-ad00-461f1db4dd58",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba59ccbe-3663-4b9a-abdc-fa8f2872b8df",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "025aa7cc-576d-43a0-9bf9-2db4f08c55c3",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad2e1a33-7875-412b-9553-137ef8422ee1",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ebf229f-3826-4725-83e5-150505a054cb",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "836161ee-e3ac-4644-82c5-a5bbcc147429",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83ee0df1-dd69-412b-ad00-461f1db4dd58",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba59ccbe-3663-4b9a-abdc-fa8f2872b8df",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "025aa7cc-576d-43a0-9bf9-2db4f08c55c3",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad2e1a33-7875-412b-9553-137ef8422ee1",
                    "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 58
              },
              {
                "title": "die Route /api/spielplan soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65388ba1-0381-4d38-9562-34c3735c628f",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d080045e-fa0e-464b-9aac-5f289cc700b0",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 188,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c12d89e-32c9-42df-8b8e-991798a2f5b4",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65388ba1-0381-4d38-9562-34c3735c628f",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d080045e-fa0e-464b-9aac-5f289cc700b0",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 188,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c12d89e-32c9-42df-8b8e-991798a2f5b4",
                    "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 204
              },
              {
                "title": "die Route /api/spielplan/zeiten soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e26e19e9-3a58-4da0-82d9-f646ccd22941",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12d69db6-038c-4f7b-b3c7-74a60a16920b",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8ace05b-2301-400e-9cdb-4f9b0a661c67",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e26e19e9-3a58-4da0-82d9-f646ccd22941",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12d69db6-038c-4f7b-b3c7-74a60a16920b",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8ace05b-2301-400e-9cdb-4f9b0a661c67",
                    "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 17
              },
              {
                "title": "die Route /api/spielplan/ausnahmen soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c2cf24b-f41a-471f-8b8f-b38949a98e44",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60d3a08a-cd0b-451b-9d92-b7b1586df59b",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47146135-0021-4ba8-9ef7-17f6f8c69286",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b674822-17e0-4a22-8896-4b516c8366fa",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "414329ab-8b29-42f2-8875-7b4996327ce2",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b037b52-8b4c-45f5-90d1-42ee0a513d24",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e554fe49-1b37-4cfa-8f8a-6c5aaa2dc431",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85b16463-cd73-437c-afa9-aa14dfa0f990",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "612d0dbf-c8c3-441a-a36d-2cf3c9c47086",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8b448fc-522d-41c0-91dc-aee59e9a280c",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e31a8952-7402-42f5-b919-ad8bf46ee906",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c47c478d-4374-44e5-b8c1-89b62ac6e947",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "076e2f24-ad6f-461d-8b89-1561c7896978",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c2cf24b-f41a-471f-8b8f-b38949a98e44",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60d3a08a-cd0b-451b-9d92-b7b1586df59b",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47146135-0021-4ba8-9ef7-17f6f8c69286",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b674822-17e0-4a22-8896-4b516c8366fa",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "414329ab-8b29-42f2-8875-7b4996327ce2",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b037b52-8b4c-45f5-90d1-42ee0a513d24",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e554fe49-1b37-4cfa-8f8a-6c5aaa2dc431",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85b16463-cd73-437c-afa9-aa14dfa0f990",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "612d0dbf-c8c3-441a-a36d-2cf3c9c47086",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8b448fc-522d-41c0-91dc-aee59e9a280c",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e31a8952-7402-42f5-b919-ad8bf46ee906",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c47c478d-4374-44e5-b8c1-89b62ac6e947",
                    "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 65
              },
              {
                "title": "die Route /api/users/register soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7aa573ed-69d3-430b-8aed-f1204cfd997d",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27a22588-52b1-4f3e-97c3-be86b51944e7",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89b21a3d-50b2-4333-bd02-5751073eeaa2",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ecf117fa-6568-45a5-845c-58e813756cc4",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db149c3d-830f-4623-97fe-06394386a115",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ab3c738-2366-4a92-89c9-93c6632d36b9",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "729d61c2-cefa-486e-ad34-d2784bcc95d7",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4630bda2-8358-43f3-9573-942cf6163d86",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c01c2b7d-0f06-4e65-96b4-67bfb980a557",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28006a12-bc10-4d8a-8c1d-30a34d98f54e",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "459c3eff-699d-4e13-ae74-6ea44e9100fc",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "297dd5b4-06c9-4893-a215-68fe4d339347",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "70516810-f857-4920-ad04-43da20cccc13",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7aa573ed-69d3-430b-8aed-f1204cfd997d",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27a22588-52b1-4f3e-97c3-be86b51944e7",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89b21a3d-50b2-4333-bd02-5751073eeaa2",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ecf117fa-6568-45a5-845c-58e813756cc4",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db149c3d-830f-4623-97fe-06394386a115",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ab3c738-2366-4a92-89c9-93c6632d36b9",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "729d61c2-cefa-486e-ad34-d2784bcc95d7",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4630bda2-8358-43f3-9573-942cf6163d86",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c01c2b7d-0f06-4e65-96b4-67bfb980a557",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28006a12-bc10-4d8a-8c1d-30a34d98f54e",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "459c3eff-699d-4e13-ae74-6ea44e9100fc",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "297dd5b4-06c9-4893-a215-68fe4d339347",
                    "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 62
              },
              {
                "title": "die Route /api/users/delete soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bdc1bc54-3a5b-4788-92f8-ab3cde339ea5",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "027bf674-76d4-4068-8a3d-0cb1b4dc22bb",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c92e87f-7ea8-4f17-80d8-dd2da2b933d1",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fd1e456-697a-4d1e-8b72-06d6cb51c264",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c451e98-d64c-407f-b453-7cec0e095d01",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a015a68-274a-4b73-8be3-c1277c5b94e8",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74d57fc0-3fa6-4977-a81b-67aaf2a11113",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "775eb2d9-6a81-4e7a-8db0-69bd6343c694",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b9ad18f-ede3-4f37-b1cd-06b7105d7b85",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3f768a2-2a47-46cb-b5a3-93d6553c1f16",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7350968c-97b7-4e37-9ef3-7599b134efae",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8bc9ff2-666d-4267-8ed5-03d37e3543b0",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "b316083f-960a-4315-b5a8-808067cdeb6e",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bdc1bc54-3a5b-4788-92f8-ab3cde339ea5",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "027bf674-76d4-4068-8a3d-0cb1b4dc22bb",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c92e87f-7ea8-4f17-80d8-dd2da2b933d1",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fd1e456-697a-4d1e-8b72-06d6cb51c264",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c451e98-d64c-407f-b453-7cec0e095d01",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a015a68-274a-4b73-8be3-c1277c5b94e8",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74d57fc0-3fa6-4977-a81b-67aaf2a11113",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "775eb2d9-6a81-4e7a-8db0-69bd6343c694",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b9ad18f-ede3-4f37-b1cd-06b7105d7b85",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3f768a2-2a47-46cb-b5a3-93d6553c1f16",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7350968c-97b7-4e37-9ef3-7599b134efae",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8bc9ff2-666d-4267-8ed5-03d37e3543b0",
                    "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 56
              },
              {
                "title": "die Route /api/users/userDetails soll geschützt sein",
                "suites": [],
                "tests": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47b1b768-ea4e-4524-8ecb-be23db7412c6",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "745d0b40-94d9-4c81-a400-fb072fdc91ae",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bef33699-1bd4-4769-bead-c1e9a0d1b5f8",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "491830c1-ea1a-4be7-a2f9-181f3a364b94",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d493e377-8e85-4325-8c49-b3dcba51aec8",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95f2ab78-fea6-4969-ac61-87e1203d0e4a",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75ee07e8-f2cb-4d84-aa20-1784c753db0d",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "076a1beb-b00e-400e-b7c3-447d78a04cc6",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03660cf5-702c-4ffc-9587-723682b4ee79",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97128c5f-3db2-478a-a08e-7596d86f615d",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "829c6a57-cdd4-47b3-8fbb-9b2bdd1c55b5",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce65f489-1b86-490d-9c7c-e77a7d4c2ffd",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/middleware/authorization.spec.js",
                "uuid": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
                "passes": [
                  {
                    "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47b1b768-ea4e-4524-8ecb-be23db7412c6",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "745d0b40-94d9-4c81-a400-fb072fdc91ae",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bef33699-1bd4-4769-bead-c1e9a0d1b5f8",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "491830c1-ea1a-4be7-a2f9-181f3a364b94",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d493e377-8e85-4325-8c49-b3dcba51aec8",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95f2ab78-fea6-4969-ac61-87e1203d0e4a",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75ee07e8-f2cb-4d84-aa20-1784c753db0d",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "076a1beb-b00e-400e-b7c3-447d78a04cc6",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03660cf5-702c-4ffc-9587-723682b4ee79",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97128c5f-3db2-478a-a08e-7596d86f615d",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "829c6a57-cdd4-47b3-8fbb-9b2bdd1c55b5",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  },
                  {
                    "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "fullTitle": "Prüfung der Routen die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce65f489-1b86-490d-9c7c-e77a7d4c2ffd",
                    "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 12,
                "totalPasses": 12,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 69
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/middleware/authorization.spec.js",
            "uuid": "c89d1278-d5c3-4c0f-bbbf-b180be0233d2",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/middleware/authorization.spec.js",
        "uuid": "1d52f866-8587-486c-9141-ca398c51e2ef",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/middleware/authorization.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "db139e82-db56-4cb7-aed3-7366c9427dda",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cdfecde0-7646-44d8-b116-6c6b2c538efb",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c824dad4-924a-41ba-b45f-4ff1274ca945",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c1efcf81-4ebf-4e41-8f94-e305e58ba340",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt die Kontaktangaben zurück",
      "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "df5d5ade-d1fc-42ae-9f3a-380b105bc26d",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99428fe5-4761-40b4-9de2-15d4c5e58dd1",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "49ebf1c0-cefc-48ac-be98-eca21bd1a0f7",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c747d59-127a-4b18-91fe-5e2e554b0830",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d8d647f-6d8f-467b-bc9c-e40b5fdd25f9",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e38e7dd-a2d4-4649-88ff-e0405de0e814",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fd61d389-47e5-4ea9-b867-7d957e5a6a42",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27764e5a-c69a-420a-8626-1c31714f4568",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 72,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cb016d7-484e-42e1-8484-69194cf478a9",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad746ee4-0e30-4959-9701-9b69f573c3b0",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5eaac1b2-cfec-4ddb-a035-841d73b50ee3",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fc04198-8c45-4215-ae34-40556dbf07ca",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 85,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9325c5c5-210b-4d17-9aae-afcc6249b434",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52d92523-8963-4920-88e7-b667cefbdb92",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "503db379-638d-4ddc-87a3-4181b18dde64",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98e9775e-dd3c-4e93-87b4-e1ce1c024bcd",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 124,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fda24c7-8f24-414c-b202-32b3bac5db24",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c44d733b-7717-444a-bf97-5b6148c0225a",
      "parentUUID": "a9194f1a-3f25-4c17-a2bf-6ec3ef981f46",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd2f6504-ab83-435b-ae71-a26ebc1d814e",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55b3fdf2-3e79-49c1-a225-8a3d2ae3225a",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d18886af-8224-4aca-9e65-a9e460b432f2",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 75,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a002c82b-47ba-4bde-833c-56067f4d6bc4",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e604d115-441b-408b-9d06-5bd317f1cf0c",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a713d8bf-3cd2-40c7-8855-df458ce64b63",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "393ff929-5caa-4edd-b146-0d20e8e3ecdd",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "612a97e7-7664-4197-9b71-1c8fff37acc5",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f90b3a4e-2c78-45cc-af5c-cea418be4389",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f40f869a-817e-42e0-afb2-d68bf08154bd",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68067706-075b-4e6a-b68f-028b9ab64a29",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fcb31cfa-c933-47f9-9ce7-181c0fb65df1",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1ccb5f9-51c7-403c-adb8-e10d1eb94d4d",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0dfb216f-9167-478e-9a37-219f25ddbb4c",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6d0f0fd-3fb1-4eda-bf87-b8f5e85c2e27",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e117930b-e083-42e7-aea0-5f721b701c4e",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b657c28-d6a9-406f-8abb-a28b76cdae5b",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2e4da117-3197-4efe-b97b-e4daebeba8cc",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8d02066-0989-4ba7-899a-8e0526e52407",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f7e5c05-1cff-49c2-a533-83877d4cc4db",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13a8697c-6824-4276-a1f0-7d5889c63dd0",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30afb70f-2aed-4732-856f-be1727510124",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "066bc29b-bfc4-4fcc-b027-b87b6deedcc1",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9db56cae-4714-46a4-ba96-00e9d4458976",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e8d27e4-219b-48e3-9f09-5d86f9809e73",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8839746e-6e84-4213-acb0-c0621e2002ff",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c1b47f3-4668-4707-9d9b-bfb55f184d74",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "56e80c8f-f54e-4b86-b966-daf300e4bd4e",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "997cf9c7-79cc-41f7-a764-40f008aa35b3",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen speichern",
      "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2af19492-1484-402a-a065-e225eefe207d",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen laden",
      "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a41429fc-7272-4c1e-983f-3c409e01cf5c",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b18bfaa-1039-4673-bbca-0b1155c79d32",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "797a5af8-530d-404f-98db-8c792e84d64c",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cab7893-d785-4012-ba56-aeefb86dd9ee",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e99df993-e061-4094-8dc9-290d166223ba",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5edfd02-ff30-499b-8111-c8bf7e0dc497",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25816acb-4bed-4885-879c-7f0a53106125",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "908dba4c-cef5-47bc-9fa8-3ae007b37c3e",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "392af9d7-cad7-4337-a959-8416b42d6f2a",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3aec248f-8110-4b4d-9746-50074c099ea3",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1eacd81d-966b-4023-8cc7-467912d562a5",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fa2cbc6-1957-497d-9705-f244d687bcd5",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f0e4801-9691-478a-86ae-6bb84d183c5b",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4958e12b-6dee-40af-9b5b-397ca60a8f64",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eeac9b9b-e073-499c-b119-6827a01e8175",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e6e07ab5-47f3-4397-a141-79bd0dba717e",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .expect(200)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "539023ff-4958-4a5c-897b-20042ec4ad0c",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00cf144d-d0dd-44be-8f23-c4b55a61b29d",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3d934c1c-e194-4533-8561-b60b418321dd",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f336a02c-4a00-464f-ad89-498d18c1f914",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c08044e3-a2dd-42d9-a7df-05dc3a888d44",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e89ef19f-7aa1-488a-9545-a7864942aaa0",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a9045d8-ca61-412c-b375-27a7d742ec5c",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6c31116-da69-4944-946b-67ce1de07d65",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .expect(200)\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3ab89297-54f8-4bb3-b25b-b477f65b06d0",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ef0a49b-5e21-41a7-b90b-e6b65fff17a6",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19f8c743-e864-444f-bc4a-7ca54887d51b",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d83bea9d-eae9-44b8-b411-8720e6ba09ad",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53ecef21-4a31-4a21-930b-561c09f4d213",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03206b80-4cdb-41ea-9cff-c139299bf808",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e56f70c-7a98-4cee-bc6b-f747688f6cfd",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db5b097f-6984-4c53-b187-2d85d673a9d6",
      "parentUUID": "23f8c296-3097-4624-80aa-12d135b6bd5a",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8baa59f-6a2d-40c0-8696-df2d4797082b",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fadb651-5a00-46f5-b8e7-dabf8f79b9ea",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ecfdcab-cc98-4512-93f5-ad8bba80cbff",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "59835da5-2eb1-4380-ba64-90542c3f08b5",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00b664d3-efe8-4025-a176-42ab61fa0408",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "66ac0fb5-43ef-4443-bf27-5c2d397f6995",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df0bd9fd-64d6-4610-b09f-88b2113546ad",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7a71687-c929-4e9b-aab0-d85c9031a47b",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e343791b-8890-4d41-a103-3a9f2df4a53e",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d7ee8ed3-78d9-4788-98bb-a6d82f69ab67",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10e2dd9c-1a75-4ee0-b196-c9bfaca55773",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e96c024d-cf98-42a6-9bf3-d0c44d762b3e",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99fa0ae0-f874-4989-a9c9-045832ac07cb",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a0b62b5-f08e-423b-ab1a-319d50e6fa3d",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "895f3ff3-d09b-43f2-8329-e19f9995d694",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c17cf445-e7a7-4596-9068-532a32d1775d",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87cbd32c-f39d-463a-81f3-cf79884b9165",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89709ac6-8841-40a8-8b7e-dd0c314f1dab",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99171e94-3649-4250-bf8a-0f580e90a470",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a18210f3-5167-428d-ae87-f5aa6e8537ec",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0b12b0f-0a7e-4cdd-be2e-07d5874f4541",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a19e9b5a-94de-4587-92bb-33910e7e8d1f",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "041189dd-e61e-49fb-a654-7a161203ef36",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5bb84041-1f02-46fd-9897-b88a9c33fe62",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4df3c3f-fcbe-43c6-852c-dbf2695531d3",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9408b69-365a-4d6e-94d8-8bd6a2a1716c",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fab27027-ab0a-4e30-baf2-4cbc18388ddc",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "153fddef-646a-4798-9d64-1230a84599c2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "312b0661-d134-4ed6-8ff5-45a2bc4da263",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0351ac1-1e74-410c-af59-868b1ff6d7aa",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d274fdbd-8e35-45ef-b104-8396c8706734",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41a27211-eab4-4276-8e69-c8b3fdb1897f",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36998e6c-3947-4bac-91d8-768df07aa1b2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c263b78-cc59-45d2-9501-75eb2a878425",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f0660b2-6c2e-4ea1-8347-3a939867c27c",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c11d3125-5f86-475f-bc39-679a15899c9f",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "855db2ce-2b73-4ed0-b19e-1ad9d49032f6",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "642ac373-becc-46d1-a782-41192f3b90d4",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e91ad85-2163-4129-ad59-d4b82cdab7a2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8c69b7b-1872-4c20-adbf-f1e3fe065d63",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9b91ccf-4c66-4e30-9224-46bb3fc2cb42",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f067eb8c-7062-42c7-8e1e-d75b85d4feb1",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07e3b010-eea6-4c48-95d2-81c8d49355a8",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06d310fe-dd4a-4254-8f86-169a08fc3115",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92da04c7-15eb-4431-963d-5dd6fc4fda63",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "90eedcea-9a31-43ee-bef1-c6aa5721eae7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68dbfc2d-4a3b-4d2f-aee5-1dfec14383d7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "feaa19d7-9824-4d59-a0c7-b280a3d00f3a",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58f70562-947b-46ee-8a28-60ae314affb7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "674e72a6-7945-4f5f-bac0-674581364a01",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb617c21-5108-4fda-a546-f2fdf53cac3c",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cbf5391-e944-44fb-9131-f06f3abf32c1",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c58bc7a-4804-44bc-955f-826cc3259870",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9afe5235-b8cb-4087-8f05-b32919f1a2c9",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83314f64-b5ca-4c2c-a6dc-a95bcc06fe0b",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8b188cf-d3a0-4280-bb33-c72b9c2fb002",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e107e63c-63f2-41f8-8045-efcb5dd5630d",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ce82cfc-dca4-40b7-a096-d4637307f58d",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99e008e1-9c56-484f-bd1d-62f6af7c13a6",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9e22467-e80e-4dcb-a0cd-eb555f4456c8",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e1d3e2b-b5e3-44c7-a1b7-1907a1b2dcf0",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5156ba75-78a3-4e69-9c13-260243586a06",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "165d47c4-ea8d-4c12-980c-98be13920fac",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ebf229f-3826-4725-83e5-150505a054cb",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "836161ee-e3ac-4644-82c5-a5bbcc147429",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83ee0df1-dd69-412b-ad00-461f1db4dd58",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba59ccbe-3663-4b9a-abdc-fa8f2872b8df",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "025aa7cc-576d-43a0-9bf9-2db4f08c55c3",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad2e1a33-7875-412b-9553-137ef8422ee1",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "65388ba1-0381-4d38-9562-34c3735c628f",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d080045e-fa0e-464b-9aac-5f289cc700b0",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c12d89e-32c9-42df-8b8e-991798a2f5b4",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e26e19e9-3a58-4da0-82d9-f646ccd22941",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "12d69db6-038c-4f7b-b3c7-74a60a16920b",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8ace05b-2301-400e-9cdb-4f9b0a661c67",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c2cf24b-f41a-471f-8b8f-b38949a98e44",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60d3a08a-cd0b-451b-9d92-b7b1586df59b",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47146135-0021-4ba8-9ef7-17f6f8c69286",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b674822-17e0-4a22-8896-4b516c8366fa",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "414329ab-8b29-42f2-8875-7b4996327ce2",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b037b52-8b4c-45f5-90d1-42ee0a513d24",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e554fe49-1b37-4cfa-8f8a-6c5aaa2dc431",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85b16463-cd73-437c-afa9-aa14dfa0f990",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "612d0dbf-c8c3-441a-a36d-2cf3c9c47086",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8b448fc-522d-41c0-91dc-aee59e9a280c",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e31a8952-7402-42f5-b919-ad8bf46ee906",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c47c478d-4374-44e5-b8c1-89b62ac6e947",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7aa573ed-69d3-430b-8aed-f1204cfd997d",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27a22588-52b1-4f3e-97c3-be86b51944e7",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89b21a3d-50b2-4333-bd02-5751073eeaa2",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ecf117fa-6568-45a5-845c-58e813756cc4",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db149c3d-830f-4623-97fe-06394386a115",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ab3c738-2366-4a92-89c9-93c6632d36b9",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "729d61c2-cefa-486e-ad34-d2784bcc95d7",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4630bda2-8358-43f3-9573-942cf6163d86",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c01c2b7d-0f06-4e65-96b4-67bfb980a557",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28006a12-bc10-4d8a-8c1d-30a34d98f54e",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "459c3eff-699d-4e13-ae74-6ea44e9100fc",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "297dd5b4-06c9-4893-a215-68fe4d339347",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bdc1bc54-3a5b-4788-92f8-ab3cde339ea5",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "027bf674-76d4-4068-8a3d-0cb1b4dc22bb",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c92e87f-7ea8-4f17-80d8-dd2da2b933d1",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fd1e456-697a-4d1e-8b72-06d6cb51c264",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c451e98-d64c-407f-b453-7cec0e095d01",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a015a68-274a-4b73-8be3-c1277c5b94e8",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74d57fc0-3fa6-4977-a81b-67aaf2a11113",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "775eb2d9-6a81-4e7a-8db0-69bd6343c694",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b9ad18f-ede3-4f37-b1cd-06b7105d7b85",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f3f768a2-2a47-46cb-b5a3-93d6553c1f16",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7350968c-97b7-4e37-9ef3-7599b134efae",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8bc9ff2-666d-4267-8ed5-03d37e3543b0",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47b1b768-ea4e-4524-8ecb-be23db7412c6",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "745d0b40-94d9-4c81-a400-fb072fdc91ae",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bef33699-1bd4-4769-bead-c1e9a0d1b5f8",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "491830c1-ea1a-4be7-a2f9-181f3a364b94",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d493e377-8e85-4325-8c49-b3dcba51aec8",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "95f2ab78-fea6-4969-ac61-87e1203d0e4a",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75ee07e8-f2cb-4d84-aa20-1784c753db0d",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "076a1beb-b00e-400e-b7c3-447d78a04cc6",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03660cf5-702c-4ffc-9587-723682b4ee79",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97128c5f-3db2-478a-a08e-7596d86f615d",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "829c6a57-cdd4-47b3-8fbb-9b2bdd1c55b5",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce65f489-1b86-490d-9c7c-e77a7d4c2ffd",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "gibt die richtige Versionsnummer zurück",
      "fullTitle": "Route: Config gibt die richtige Versionsnummer zurück",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/version').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(version);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cdfecde0-7646-44d8-b116-6c6b2c538efb",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt den Lockdownmode zurück",
      "fullTitle": "Route: Config gibt den Lockdownmode zurück",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/lockdownmode').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal(true);\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c824dad4-924a-41ba-b45f-4ff1274ca945",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt die Umgebung zurück",
      "fullTitle": "Route: Config gibt die Umgebung zurück",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/env').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body).to.equal('testing');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c1efcf81-4ebf-4e41-8f94-e305e58ba340",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "gibt die Kontaktangaben zurück",
      "fullTitle": "Route: Config gibt die Kontaktangaben zurück",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server).get('/api/config/kontakt').end(function (err, response) {\n    if (err) return done(err);\n    expect(response).not.to.be.undefined;\n    expect(response.statusCode).to.equal(200);\n    expect(response.body[0].name).to.equal('Klaus Krecken');\n    expect(response.body[1].name).to.equal('Stefan Meyer');\n    return done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "df5d5ade-d1fc-42ae-9f3a-380b105bc26d",
      "parentUUID": "7c239420-4a03-4e5e-81c7-955c92824f9e",
      "skipped": false
    },
    {
      "title": "soll Abonnenten hinzufügen können",
      "fullTitle": "Route: Email soll Abonnenten hinzufügen können",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var abonnement = {\n    email: 'test@t.de',\n    team: teamid\n};\nrequest(server)\n    .post('/api/email/subscriber')\n    .send(abonnement)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.email).to.be.equal(abonnement.email);\n        expect(response.body._id).to.exist;\n        return mongoose.model('Subscriber').findOne({email: abonnement.email}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.email).to.be.equal(abonnement.email);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99428fe5-4761-40b4-9de2-15d4c5e58dd1",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Bei leerem Betreff soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Betreff soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "49ebf1c0-cefc-48ac-be98-eca21bd1a0f7",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Bei leerem Text soll ein Fehler geworfen werden",
      "fullTitle": "Route: Email Bei leerem Text soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    betreff: 'Test-Email Betreff'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c747d59-127a-4b18-91fe-5e2e554b0830",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "Sendet eine Email an alle Abonennten",
      "fullTitle": "Route: Email Sendet eine Email an alle Abonennten",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = {\n    subject: 'Betreff',\n    text: 'Test-Email Text'\n};\nrequest(server)\n    .post('/api/email/')\n    .send(email)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0d8d647f-6d8f-467b-bc9c-e40b5fdd25f9",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll die Abonnenten laden",
      "fullTitle": "Route: Email soll die Abonnenten laden",
      "timedOut": false,
      "duration": 69,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/email/subscriber')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[1].email).to.be.equal('test@t.de');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9e38e7dd-a2d4-4649-88ff-e0405de0e814",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll Abonnenten löschen können",
      "fullTitle": "Route: Email soll Abonnenten löschen können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/email/subscriber?email=test@t.de&team=' + teamid)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n        return mongoose.model('Subscriber').find({}).exec(function (err, subs) {\n            if (err) return done(err);\n            expect(subs).to.have.lengthOf(1);\n            expect(subs[0].email).to.be.equal('test@test.de');\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fd61d389-47e5-4ea9-b867-7d957e5a6a42",
      "parentUUID": "b361051a-26f1-4322-a355-38a2dffa524c",
      "skipped": false
    },
    {
      "title": "soll alle Gruppen laden können",
      "fullTitle": "Route: Gruppen soll alle Gruppen laden können",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(3);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe A');\n        expect(response.body[2].name).to.be.equal('Gruppe B');\n        gruppeid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27764e5a-c69a-420a-8626-1c31714f4568",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Gruppe laden können",
      "fullTitle": "Route: Gruppen soll eine einzelne Gruppe laden können",
      "timedOut": false,
      "duration": 72,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?id=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(gruppeid);\n        expect(response.body.name).to.be.equal('Gruppe A');\n        expect(response.body.jugend.name).to.be.equal('Jugend 1');\n        anzahlTeamsGruppe = response.body.teams.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3cb016d7-484e-42e1-8484-69194cf478a9",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll die Gruppen einer Jugend laden können",
      "fullTitle": "Route: Gruppen soll die Gruppen einer Jugend laden können",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/gruppen?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].name).to.be.equal('Gruppe A');\n        expect(response.body[1].name).to.be.equal('Gruppe B');\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[1].jugend._id.toString()).to.be.equal(jugendid.toString());\n        expect(response.body[0].jugend.name).to.be.equal('Jugend 2');\n        expect(response.body[1].jugend.name).to.be.equal('Jugend 2');\n        anzahlVorher = response.body.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad746ee4-0e30-4959-9701-9b69f573c3b0",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einem leeren Gruppenname soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5eaac1b2-cfec-4ddb-a035-841d73b50ee3",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen Bei einer nicht vorhandenen Jugend soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Ich hab keine Jugend'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + undefined)\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5fc04198-8c45-4215-ae34-40556dbf07ca",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe hinzufügen können",
      "fullTitle": "Route: Gruppen soll eine Gruppe hinzufügen können",
      "timedOut": false,
      "duration": 85,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gruppe = {\n    name: 'Neue Gruppe'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .send(gruppe)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(gruppe.name);\n        expect(response.body.jugend).to.be.equal(jugendid.toString());\n        neueGruppeId = response.body._id;\n        neueGruppeJugend = response.body.jugend;\n        mongoose.model('Gruppe').find({jugend: jugendid.toString()}).exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(anzahlVorher + 1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9325c5c5-210b-4d17-9aae-afcc6249b434",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "fullTitle": "Route: Gruppen soll beim Hinzufügen einer Fünften Gruppe einen Fehler werfen",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//Test vorbereitung\nvar gruppe = {\n    name: 'Gruppe D'\n};\nrequest(server)\n    .post('/api/gruppen?jugend=' + jugendid.toString())\n    .set('Authorization', server.adminToken)\n    .send(gruppe)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        //Eigentliche Testausführung\n        gruppe = {\n            name: 'Letzte Gruppe'\n        };\n        return request(server)\n            .post('/api/gruppen?jugend=' + jugendid.toString())\n            .send(gruppe)\n            .set('Authorization', server.adminToken)\n            .expect(418)\n            .set('Accept', 'application/json')\n            .end(function (err, response) {\n                if (err) return done(err);\n                expect(response).not.to.be.undefined;\n                expect(response.statusCode).to.equal(418);\n                expect(response.body.MESSAGE).to.exist;\n                expect(response.body.MESSAGEKEY).to.be.equal('ERROR_GROUP_MAX_AMOUNT');\n                return done();\n            });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "52d92523-8963-4920-88e7-b667cefbdb92",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen fehlt, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "503db379-638d-4ddc-87a3-4181b18dde64",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Gruppen wenn die Gruppenid zum löschen falsch ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/gruppen?id=' + 'iafja1SicherNICHTRICHTIG')\n    .set('Authorization', server.adminToken)\n    .expect(404)\n    .end(function (err, res) {\n        if (err) throw err;\n        expect(res).not.to.be.unfined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_GROUP_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "98e9775e-dd3c-4e93-87b4-e1ce1c024bcd",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll eine Gruppe löschen können und die Teams mitlöschen",
      "fullTitle": "Route: Gruppen soll eine Gruppe löschen können und die Teams mitlöschen",
      "timedOut": false,
      "duration": 124,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/teams?jugend=' + neueGruppeJugend + '&gruppe=' + neueGruppeId)\n    .send({name: 'Test Team'})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err) {\n        if (err) throw err;\n        var anzahlTeamsVorher;\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            anzahlTeamsVorher = res.length;\n            return request(server)\n                .del('/api/gruppen?id=' + neueGruppeId)\n                .set('Authorization', server.adminToken)\n                .expect(200)\n                .end(function (err, res) {\n                    if (err) throw err;\n                    expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n                    mongoose.model('Gruppe').findById(neueGruppeId).exec(function (err, res) {\n                        if (err) throw err;\n                        expect(res).not.to.exist;\n                        mongoose.model('Team').find().exec(function (err, res) {\n                            if (err) throw err;\n                            expect(res.length).to.be.equal(anzahlTeamsVorher - 1);\n                            done();\n                        });\n                    });\n                });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7fda24c7-8f24-414c-b202-32b3bac5db24",
      "parentUUID": "76f327ba-cdc5-4358-9f64-28c95a732c80",
      "skipped": false
    },
    {
      "title": "soll die index.html rendern",
      "fullTitle": "Route: Index soll die index.html rendern",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/')\n    .expect(200)\n    .set('Accept', 'text/html')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.text).to.contain('<html');\n        expect(response.text).to.contain('<body');\n        expect(response.text).to.contain('</body>');\n        expect(response.text).to.contain('</html>');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c44d733b-7717-444a-bf97-5b6148c0225a",
      "parentUUID": "a9194f1a-3f25-4c17-a2bf-6ec3ef981f46",
      "skipped": false
    },
    {
      "title": "soll alle Jugenden laden können",
      "fullTitle": "Route: Jugenden soll alle Jugenden laden können",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        jugendid = response.body[1]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bd2f6504-ab83-435b-ae71-a26ebc1d814e",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine einzelne Jugend laden können",
      "fullTitle": "Route: Jugenden soll eine einzelne Jugend laden können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden?id=' + jugendid.toString())\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body._id).to.be.equal(jugendid);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "55b3fdf2-3e79-49c1-a225-8a3d2ae3225a",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn kein Name angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d18886af-8224-4aca-9e65-a9e460b432f2",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "fullTitle": "Route: Jugenden soll eine Jugend hinzufügen können und eine Gruppe dafür erstellen",
      "timedOut": false,
      "duration": 75,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var jugend = {\n    name: 'Neue Jugend'\n};\nrequest(server)\n    .post('/api/jugenden')\n    .send(jugend)\n    .expect(200)\n    .set('Authorization', server.adminToken)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        expect(response.body.name).to.be.equal(jugend.name);\n        neueJugendid = response.body._id;\n        expect(response.body.gruppen).to.have.lengthOf(1);\n        mongoose.model('Jugend').find().exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.have.lengthOf(3);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a002c82b-47ba-4bde-833c-56067f4d6bc4",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll die Gesamtzahl der Tore laden",
      "fullTitle": "Route: Jugenden soll die Gesamtzahl der Tore laden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore')\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(14);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e604d115-441b-408b-9d06-5bd317f1cf0c",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll die Tore für eine einzelne Jugend laden",
      "fullTitle": "Route: Jugenden soll die Tore für eine einzelne Jugend laden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/jugenden/tore?id=' + jugendid.toString())\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.equal(9);\n        done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a713d8bf-3cd2-40c7-8855-df458ce64b63",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn keine JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "393ff929-5caa-4edd-b146-0d20e8e3ecdd",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Jugenden wenn eine falsche JugendId zum löschen angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/jugenden?id=DASgibtsN1cht')\n    .expect(400)\n    .set('Authorization', server.adminToken)\n    .end(function (err, response) {\n        if (err) throw err;\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "612a97e7-7664-4197-9b71-1c8fff37acc5",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "fullTitle": "Route: Jugenden soll eine Jugend löschen können und die Teams & Gruppen mitlöschen",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var anzahlGruppenVorher;\nmongoose.model('Gruppe').find().exec(function (err, res) {\n    if (err) throw err;\n    anzahlGruppenVorher = res.length;\n    request(server)\n        .del('/api/jugenden?id=' + neueJugendid)\n        .expect(200)\n        .set('Authorization', server.adminToken)\n        .end(function (err, res) {\n            if (err) throw err;\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_DELETE_MESSAGE');\n            mongoose.model('Jugend').findById(neueJugendid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res).not.to.exist;\n                mongoose.model('Gruppe').find().exec(function (err, res) {\n                    if (err) throw err;\n                    expect(res.length).to.be.below(anzahlGruppenVorher);\n                    done();\n                });\n            });\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f90b3a4e-2c78-45cc-af5c-cea418be4389",
      "parentUUID": "cc6ac5b3-0007-4229-a9ad-d4d5e7af799e",
      "skipped": false
    },
    {
      "title": "soll alle Spiele laden können",
      "fullTitle": "Route: Spiele soll alle Spiele laden können",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(9);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f40f869a-817e-42e0-afb2-d68bf08154bd",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Spiel laden können",
      "fullTitle": "Route: Spiele soll ein einzelnes Spiel laden können",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?id=' + spielid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Object');\n        expect(response.body.nummer).to.be.a('number');\n        expect([1, 2, 3]).to.contain(response.body.platz);\n        expect(response.body._id.toString()).to.be.equal(spielid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68067706-075b-4e6a-b68f-028b9ab64a29",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Gruppe laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Gruppe laden",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?gruppe=' + gruppenid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppenid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fcb31cfa-c933-47f9-9ce7-181c0fb65df1",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele einer Jugend laden",
      "fullTitle": "Route: Spiele soll die Spiele einer Jugend laden",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(4);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b1ccb5f9-51c7-403c-adb8-e10d1eb94d4d",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Spiele eines Teams laden",
      "fullTitle": "Route: Spiele soll die Spiele eines Teams laden",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spiele?team=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.a('Array');\n        expect(response.body).to.have.lengthOf(1);\n        //das geladene Team soll entweder Team A oder Team B sein\n        expect([response.body[0].teamA._id.toString(), response.body[0].teamB._id.toString()]).to.contain(teamid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0dfb216f-9167-478e-9a37-219f25ddbb4c",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Gruppe ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6d0f0fd-3fb1-4eda-bf87-b8f5e85c2e27",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn die Jugend ungültig ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e117930b-e083-42e7-aea0-5f721b701c4e",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein Spiel speichern können",
      "fullTitle": "Route: Spiele soll ein Spiel speichern können",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiel = {\n    jugend: jugendid,\n    gruppe: gruppenid\n};\nrequest(server)\n    .post('/api/spiele')\n    .send(spiel)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.exist;\n        neuesSpielid = response.body._id;\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(10);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1b657c28-d6a9-406f-8abb-a28b76cdae5b",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Löschen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2e4da117-3197-4efe-b97b-e4daebeba8cc",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll ein Spiel löschen können",
      "fullTitle": "Route: Spiele soll ein Spiel löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele?id=' + neuesSpielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            alleSpiele = res;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b8d02066-0989-4ba7-899a-8e0526e52407",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll alle Spiele löschen können",
      "fullTitle": "Route: Spiele soll alle Spiele löschen können",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(0);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0f7e5c05-1cff-49c2-a533-83877d4cc4db",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll alle Spiele speichern können",
      "fullTitle": "Route: Spiele soll alle Spiele speichern können",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/alle')\n    .set('Authorization', server.adminToken)\n    .send(alleSpiele)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SPIELPLAN_CREATED_MESSAGE');\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "13a8697c-6824-4276-a1f0-7d5889c63dd0",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spiele wenn keine Spielid zum Zurücksetzen gesendet wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "30afb70f-2aed-4732-856f-be1727510124",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll die Tore zurücksetzen können",
      "fullTitle": "Route: Spiele soll die Tore zurücksetzen können",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(0);\n        expect(response.body.toreB).to.equal(0);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(0);\n        expect(response.body.beendet).to.equal(false);\n        mongoose.model('Spiel').findById(spielid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.toreA).to.equal(0);\n            expect(res.toreB).to.equal(0);\n            expect(res.punkteA).to.equal(0);\n            expect(res.punkteB).to.equal(0);\n            expect(res.beendet).to.equal(false);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "066bc29b-bfc4-4fcc-b027-b87b6deedcc1",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis speichern",
      "fullTitle": "Route: Spiele soll das Ergebnis speichern",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spiele/tore?id=' + spielid)\n    .set('Authorization', server.adminToken)\n    .send({toreA: 5, toreB: 8})\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.toreA).to.equal(5);\n        expect(response.body.toreB).to.equal(8);\n        expect(response.body.punkteA).to.equal(0);\n        expect(response.body.punkteB).to.equal(2);\n        expect(response.body.beendet).to.equal(true);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9db56cae-4714-46a4-ba96-00e9d4458976",
      "parentUUID": "22271119-10ad-45e3-9bfd-13d06c725dd4",
      "skipped": false
    },
    {
      "title": "soll den Spielplan laden können",
      "fullTitle": "Route: Spielplan soll den Spielplan laden können",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.startzeit).to.be.equal('09:00');\n        expect(response.body.spielzeit).to.be.a('Number');\n        expect(response.body.pausenzeit).to.be.a('Number');\n        expect(response.body.ausnahmen).to.be.a('Array');\n        expect(response.body.ausnahmen).not.to.be.empty;\n        ausnahme = response.body.ausnahmen[0];\n        ausnahmenVorher = response.body.ausnahmen.length;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3e8d27e4-219b-48e3-9f09-5d86f9809e73",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Startzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8839746e-6e84-4213-acb0-c0621e2002ff",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Spielzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c1b47f3-4668-4707-9d9b-bfb55f184d74",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Spielplan wenn keine Pausenzeit angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "56e80c8f-f54e-4b86-b966-daf300e4bd4e",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Zeiten updaten können",
      "fullTitle": "Route: Spielplan soll die Zeiten updaten können",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spielplan = {\n    startzeit: '10:00',\n    spielzeit: 6,\n    pausenzeit: 4\n};\nrequest(server)\n    .put('/api/spielplan/zeiten')\n    .set('Authorization', server.adminToken)\n    .send(spielplan)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.startzeit).to.be.equal(spielplan.startzeit);\n            expect(res.spielzeit).to.be.equal(spielplan.spielzeit);\n            expect(res.pausenzeit).to.be.equal(spielplan.pausenzeit);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "997cf9c7-79cc-41f7-a764-40f008aa35b3",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen speichern",
      "fullTitle": "Route: Spielplan soll die Ausnahmen speichern",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan/ausnahmen')\n    .send(ausnahme)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body[0]._id).to.exist;\n        mongoose.model('Spielplan').findOne().exec(function (err, res) {\n            if (err) throw err;\n            expect(res.ausnahmen).to.have.lengthOf(1);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2af19492-1484-402a-a065-e225eefe207d",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll die Ausnahmen laden",
      "fullTitle": "Route: Spielplan soll die Ausnahmen laden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/spielplan/ausnahmen')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(1);\n        expect(response.body[0]._id).to.be.equal(ausnahme._id);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a41429fc-7272-4c1e-983f-3c409e01cf5c",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll den Spielplan generieren",
      "fullTitle": "Route: Spielplan soll den Spielplan generieren",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/spielplan')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SPIELPLAN_CREATED_MESSAGE');\n        expect(response.body.STATUSCODE).to.equal(200);\n        mongoose.model('Spiel').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(9);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0b18bfaa-1039-4673-bbca-0b1155c79d32",
      "parentUUID": "1d8ed0ea-895e-4606-8d8e-d1bfbb82118f",
      "skipped": false
    },
    {
      "title": "soll alle Teams laden können",
      "fullTitle": "Route: Teams soll alle Teams laden können",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(8);\n        teamid = response.body[0]._id;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "797a5af8-530d-404f-98db-8c792e84d64c",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein einzelnes Team laden können",
      "fullTitle": "Route: Teams soll ein einzelnes Team laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?id=' + teamid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body._id).to.be.equal(teamid);\n        expect(response.body.name).to.be.equal('Team BA 1');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cab7893-d785-4012-ba56-aeefb86dd9ee",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Jugend laden können",
      "fullTitle": "Route: Teams soll die Teams einer Jugend laden können",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?jugend=' + jugendid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(5);\n        expect(response.body[0].jugend._id.toString()).to.be.equal(jugendid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e99df993-e061-4094-8dc9-290d166223ba",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Teams einer Gruppe laden können",
      "fullTitle": "Route: Teams soll die Teams einer Gruppe laden können",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams?gruppe=' + gruppeid)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.have.lengthOf(2);\n        expect(response.body[0].gruppe._id.toString()).to.be.equal(gruppeid.toString());\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c5edfd02-ff30-499b-8111-c8bf7e0dc497",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Hinzufügen kein Name angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "25816acb-4bed-4885-879c-7f0a53106125",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein Team hinzufügen können",
      "fullTitle": "Route: Teams soll ein Team hinzufügen können",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var neuesTeam = {\n    name: 'FC Bayern München'\n};\nrequest(server)\n    .post('/api/teams?jugend=' + jugendid + '&gruppe=' + gruppeid)\n    .send(neuesTeam)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(neuesTeam.name);\n        neuesTeamid = response.body._id;\n        mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.teams).to.have.lengthOf(3);\n            expect(res.teams).to.contain(neuesTeamid.toString());\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "908dba4c-cef5-47bc-9fa8-3ae007b37c3e",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn bei der Aktualisierung keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=')\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "392af9d7-cad7-4337-a959-8416b42d6f2a",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll den Namen eines Teams aktualisieren können",
      "fullTitle": "Route: Teams soll den Namen eines Teams aktualisieren können",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reqbody = {\n    name: 'Neuer Name'\n};\nrequest(server)\n    .put('/api/teams?id=' + neuesTeamid)\n    .send(reqbody)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.name).to.be.equal(reqbody.name);\n        expect(response.body._id).to.be.equal(neuesTeamid.toString());\n        mongoose.model('Team').findById(neuesTeamid).exec(function (err, res) {\n            if (err) throw err;\n            expect(res.name).to.be.equal(reqbody.name);\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3aec248f-8110-4b4d-9746-50074c099ea3",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Teams wenn beim Löschen keine ID angegeben wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=')\n    .set('Authorization', server.adminToken)\n    .expect(400)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(400);\n        expect(response.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1eacd81d-966b-4023-8cc7-467912d562a5",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll ein Team löschen",
      "fullTitle": "Route: Teams soll ein Team löschen",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .del('/api/teams?id=' + neuesTeamid)\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            expect(res).to.have.lengthOf(8);\n            mongoose.model('Gruppe').findById(gruppeid).exec(function (err, res) {\n                if (err) throw err;\n                expect(res.teams).to.have.lengthOf(2);\n                expect(res.teams).not.to.contain(neuesTeamid.toString());\n                return done();\n            });\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2fa2cbc6-1957-497d-9705-f244d687bcd5",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll die Ergebnisse aller Teams zurücksetzen",
      "fullTitle": "Route: Teams soll die Ergebnisse aller Teams zurücksetzen",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/teams/resetErgebnisse')\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('RESET_MESSAGE');\n        mongoose.model('Team').find().exec(function (err, res) {\n            if (err) throw err;\n            res.forEach(function (team) {\n                expect(team.tore).to.be.equal(0);\n                expect(team.gtore).to.be.equal(0);\n                expect(team.punkte).to.be.equal(0);\n                expect(team.gpunkte).to.be.equal(0);\n            });\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2f0e4801-9691-478a-86ae-6bb84d183c5b",
      "parentUUID": "2ac68e82-cdb7-41d7-907b-4390fa152b1e",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer registrieren können",
      "fullTitle": "Route: Users soll einen Nutzer registrieren können",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send(user)\n    .expect(200)\n    .set('Accept', 'application/json')\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        mongoose.model('User').findOne({username: user.username}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res.username).to.be.equal(user.username);\n            expect(res.salt).to.exist;\n            expect(res.hash).to.exist;\n            expect(res.resetToken).to.exist;\n            token = res.generateJWT();\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4958e12b-6dee-40af-9b5b-397ca60a8f64",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler zurückgeben bei fehlenden Feldern",
      "fullTitle": "Route: Users soll einen Fehler zurückgeben bei fehlenden Feldern",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test'})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "eeac9b9b-e073-499c-b119-6827a01e8175",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll keine doppelten Nutzernamen geben",
      "fullTitle": "Route: Users soll keine doppelten Nutzernamen geben",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/register')\n    .set('Authorization', server.adminToken)\n    .send({username: 'test-user', email: 'test2@byom.de', role: 'Bearbeiter'})\n    .expect(500)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(500);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR');\n        expect(res.body.ERROR.code).to.equal(11000);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e6e07ab5-47f3-4397-a141-79bd0dba717e",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer einloggen können",
      "fullTitle": "Route: Users soll einen Nutzer einloggen können",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({username: user.username}).exec(function (err, usr) {\n    if (err) return done(err);\n    usr.setPassword(user.password);\n    usr.save(function (err, res) {\n        if (err) return done(err);\n        request(server)\n            .post('/api/users/login')\n            .send(user)\n            .expect(200)\n            .end(function (err, res) {\n                if (err) return done(err);\n                expect(res).not.to.be.undefined;\n                expect(res.statusCode).to.equal(200);\n                expect(res.body.token).to.exist;\n                user.token = res.body.token;\n                return done();\n            });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "539023ff-4958-4a5c-897b-20042ec4ad0c",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "fullTitle": "Route: Users Bei Fehlenden Feldern soll eine Meldung zurückgegeben werden",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00cf144d-d0dd-44be-8f23-c4b55a61b29d",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Passwort",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Passwort",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3d934c1c-e194-4533-8561-b60b418321dd",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Fehler liefern, bei falschem Nutzernamen",
      "fullTitle": "Route: Users soll einen Fehler liefern, bei falschem Nutzernamen",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .post('/api/users/login')\n    .send({username: 'test-user2', password: 'bruteforce'})\n    .expect(401)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(401);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_FALSCHE_ANMELDEDATEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f336a02c-4a00-464f-ad89-498d18c1f914",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Bei falschem Nutzername soll ein Fehler geliefert werden",
      "fullTitle": "Route: Users Bei falschem Nutzername soll ein Fehler geliefert werden",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'tippfehler'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.equal('ERROR_USER_NOT_FOUND');\n        expect(res.body.MESSAGE).to.equal('Benutzer tippfehler wurde nicht gefunden');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c08044e3-a2dd-42d9-a7df-05dc3a888d44",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Der Nutzername berni soll nicht gelöscht werden können",
      "fullTitle": "Route: Users Der Nutzername berni soll nicht gelöscht werden können",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'berni'})\n    .expect(403)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(403);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NICHT_LOESCHBAR');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e89ef19f-7aa1-488a-9545-a7864942aaa0",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll den Nutzernamen ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll den Nutzernamen ändern können",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.username).to.equal('testuser');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a9045d8-ca61-412c-b375-27a7d742ec5c",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll ein neues Passwort anfordern können",
      "fullTitle": "Route: Users Ein Nutzer soll ein neues Passwort anfordern können",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-forgot')\n    .set('Authorization', server.bearbeiterToken)\n    .send({email: 'test@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6c31116-da69-4944-946b-67ce1de07d65",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll prüfen können ob ein ResetToken gültig ist",
      "fullTitle": "Route: Users soll prüfen können ob ein ResetToken gültig ist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mongoose.model('User').findOne({email: 'test@byom.de'}).exec(function (err, usr) {\n    if (err) return done(err);\n    resetToken = usr.resetToken;\n    hashBefore = usr.hash;\n    username = usr.username;\n    request(server)\n        .put('/api/users/password-reset/check')\n        .send({token: resetToken})\n        .expect(200)\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res).not.to.be.undefined;\n            expect(res.statusCode).to.equal(200);\n            expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n            return done();\n        });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3ab89297-54f8-4bb3-b25b-b477f65b06d0",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll ein neues Passwort speichern",
      "fullTitle": "Route: Users soll ein neues Passwort speichern",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/password-reset')\n    .send({token: resetToken, username: username, password: 'allesneumachtdermai'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.equal('SUCCESS_MESSAGE');\n        return mongoose.model('User').findOne({username: username}).exec(function (err, usr) {\n            if(err) return done(err);\n            expect(usr.hash).not.to.be.equal(hashBefore);\n            expect(usr.resetToken).not.to.exist;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1ef0a49b-5e21-41a7-b90b-e6b65fff17a6",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll die Email ändern können",
      "fullTitle": "Route: Users Ein Nutzer soll die Email ändern können",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/user-details')\n    .set('Authorization', user.token)\n    .send({username: 'testuser', email: 'test1@byom.de'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        user.token = res.body.token;\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "19f8c743-e864-444f-bc4a-7ca54887d51b",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "fullTitle": "Route: Users Ein Nutzer soll seine eigenen NutzerDetails laden können",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/users/user-details')\n    .set('Authorization', user.token)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.email).to.equal('test1@byom.de');\n        expect(res.body.username).to.equal('testuser');\n        expect(res.body.role.name).to.equal('Bearbeiter');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d83bea9d-eae9-44b8-b411-8720e6ba09ad",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn zum Löschen kein Nutzername angegeben ist, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({})\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(400);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_BAD_REQUEST');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "53ecef21-4a31-4a21-930b-561c09f4d213",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "fullTitle": "Route: Users wenn der Nutzername nicht gefunden Wird, soll ein Fehler geworfen werden",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'wrongname'})\n    .expect(404)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(404);\n        expect(res.body.MESSAGEKEY).to.be.equal('ERROR_USER_NOT_FOUND');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03206b80-4cdb-41ea-9cff-c139299bf808",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "soll einen Nutzer löschen können",
      "fullTitle": "Route: Users soll einen Nutzer löschen können",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .set('Authorization', server.adminToken)\n    .send({username: 'testuser'})\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res).not.to.be.undefined;\n        expect(res.statusCode).to.equal(200);\n        expect(res.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        mongoose.model('User').find({username: 'test-user'}).exec(function (err, res) {\n            if (err) return done(err);\n            expect(res).to.be.empty;\n            return done();\n        });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0e56f70c-7a98-4cee-bc6b-f747688f6cfd",
      "parentUUID": "c055cd74-bfbd-4307-a5d5-f537b4c6c51a",
      "skipped": false
    },
    {
      "title": "Der Request soll ausgeführt werden",
      "fullTitle": "API Authorization: Es wird keine bestimmte Rolle benötigt Der Request soll ausgeführt werden",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .get('/api/teams/')\n    .set('Authorization', token)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db5b097f-6984-4c53-b187-2d85d673a9d6",
      "parentUUID": "23f8c296-3097-4624-80aa-12d135b6bd5a",
      "skipped": false
    },
    {
      "title": "wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn kein Token vorhanden ist soll, ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .expect(401)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8baa59f-6a2d-40c0-8696-df2d4797082b",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn ein falscher Token vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'FALSESECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0fadb651-5a00-46f5-b8e7-dabf8f79b9ea",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht in der Datenbank vorhanden ist, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ecfdcab-cc98-4512-93f5-ad8bba80cbff",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn die Rollen nicht übereinstimmen, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "exampleTokenPayload.username = userData.username;\nrequest(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', jwt.sign(exampleTokenPayload, 'TEST-SECRET'))\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "59835da5-2eb1-4380-ba64-90542c3f08b5",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer nicht die passende Rolle hat, soll ein Fehler gemeldet werden",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.bearbeiterToken)\n    .expect(403)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "00b664d3-efe8-4025-a176-42ab61fa0408",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "fullTitle": "API Authorization: Es wird eine bestimmte Rolle benötigt wenn der Nutzer eine passende Rolle hat, soll der Request ausgeführt werden",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server)\n    .put('/api/users/delete')\n    .send({username: userNameToBeDeleted})\n    .set('Authorization', server.adminToken)\n    .expect(200)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.MESSAGEKEY).to.be.equal('SUCCESS_DELETE_MESSAGE');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "66ac0fb5-43ef-4443-bf27-5c2d397f6995",
      "parentUUID": "4e52a27e-b654-4735-b099-cc9ffa70979e",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "df0bd9fd-64d6-4610-b09f-88b2113546ad",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f7a71687-c929-4e9b-aab0-d85c9031a47b",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "POST /api/email: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email soll geschützt sein POST /api/email: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e343791b-8890-4d41-a103-3a9f2df4a53e",
      "parentUUID": "b0656831-1e97-405e-a5fb-aa8d8560873b",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d7ee8ed3-78d9-4788-98bb-a6d82f69ab67",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "10e2dd9c-1a75-4ee0-b196-c9bfaca55773",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "GET /api/email/subscriber: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/email/subscriber soll geschützt sein GET /api/email/subscriber: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e96c024d-cf98-42a6-9bf3-d0c44d762b3e",
      "parentUUID": "658e43b8-c2f4-4b43-a729-7ad362524c2c",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99fa0ae0-f874-4989-a9c9-045832ac07cb",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7a0b62b5-f08e-423b-ab1a-319d50e6fa3d",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein POST /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "895f3ff3-d09b-43f2-8329-e19f9995d694",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c17cf445-e7a7-4596-9068-532a32d1775d",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "87cbd32c-f39d-463a-81f3-cf79884b9165",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "DELETE /api/gruppen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/gruppen soll geschützt sein DELETE /api/gruppen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89709ac6-8841-40a8-8b7e-dd0c314f1dab",
      "parentUUID": "0ef3203c-b9d6-4d40-b74f-089de3050afa",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99171e94-3649-4250-bf8a-0f580e90a470",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a18210f3-5167-428d-ae87-f5aa6e8537ec",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "POST /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein POST /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c0b12b0f-0a7e-4cdd-be2e-07d5874f4541",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a19e9b5a-94de-4587-92bb-33910e7e8d1f",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "041189dd-e61e-49fb-a654-7a161203ef36",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "PUT /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein PUT /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5bb84041-1f02-46fd-9897-b88a9c33fe62",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4df3c3f-fcbe-43c6-852c-dbf2695531d3",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9408b69-365a-4d6e-94d8-8bd6a2a1716c",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams soll geschützt sein DELETE /api/teams: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fab27027-ab0a-4e30-baf2-4cbc18388ddc",
      "parentUUID": "99f8d336-3217-4d46-b693-092f7c7d1131",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "153fddef-646a-4798-9d64-1230a84599c2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "312b0661-d134-4ed6-8ff5-45a2bc4da263",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein GET /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a0351ac1-1e74-410c-af59-868b1ff6d7aa",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d274fdbd-8e35-45ef-b104-8396c8706734",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "41a27211-eab4-4276-8e69-c8b3fdb1897f",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein POST /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "36998e6c-3947-4bac-91d8-768df07aa1b2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c263b78-cc59-45d2-9501-75eb2a878425",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3f0660b2-6c2e-4ea1-8347-3a939867c27c",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein PUT /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c11d3125-5f86-475f-bc39-679a15899c9f",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "855db2ce-2b73-4ed0-b19e-1ad9d49032f6",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "642ac373-becc-46d1-a782-41192f3b90d4",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/teams/resetErgebnisse soll geschützt sein DELETE /api/teams/resetErgebnisse: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6e91ad85-2163-4129-ad59-d4b82cdab7a2",
      "parentUUID": "e10bee32-3cdd-4d59-9212-7cdb3e260784",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8c69b7b-1872-4c20-adbf-f1e3fe065d63",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "b9b91ccf-4c66-4e30-9224-46bb3fc2cb42",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein POST /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f067eb8c-7062-42c7-8e1e-d75b85d4feb1",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "07e3b010-eea6-4c48-95d2-81c8d49355a8",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "06d310fe-dd4a-4254-8f86-169a08fc3115",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "DELETE /api/jugenden: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/jugenden soll geschützt sein DELETE /api/jugenden: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "92da04c7-15eb-4431-963d-5dd6fc4fda63",
      "parentUUID": "5c81e0ad-9bbd-497e-a992-77998dfa47df",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "90eedcea-9a31-43ee-bef1-c6aa5721eae7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "68dbfc2d-4a3b-4d2f-aee5-1dfec14383d7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "POST /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein POST /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "feaa19d7-9824-4d59-a0c7-b280a3d00f3a",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "58f70562-947b-46ee-8a28-60ae314affb7",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "674e72a6-7945-4f5f-bac0-674581364a01",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele soll geschützt sein DELETE /api/spiele: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "fb617c21-5108-4fda-a546-f2fdf53cac3c",
      "parentUUID": "4d83dbfd-2fc1-4552-987f-b7c74b9253f5",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9cbf5391-e944-44fb-9131-f06f3abf32c1",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3c58bc7a-4804-44bc-955f-826cc3259870",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "GET /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein GET /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9afe5235-b8cb-4087-8f05-b32919f1a2c9",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83314f64-b5ca-4c2c-a6dc-a95bcc06fe0b",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8b188cf-d3a0-4280-bb33-c72b9c2fb002",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "POST /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein POST /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e107e63c-63f2-41f8-8045-efcb5dd5630d",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "6ce82cfc-dca4-40b7-a096-d4637307f58d",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "99e008e1-9c56-484f-bd1d-62f6af7c13a6",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein PUT /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f9e22467-e80e-4dcb-a0cd-eb555f4456c8",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5e1d3e2b-b5e3-44c7-a1b7-1907a1b2dcf0",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5156ba75-78a3-4e69-9c13-260243586a06",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/alle soll geschützt sein DELETE /api/spiele/alle: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "165d47c4-ea8d-4c12-980c-98be13920fac",
      "parentUUID": "a01f58a2-9ebb-4f1c-b091-9852f526ede7",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "2ebf229f-3826-4725-83e5-150505a054cb",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "836161ee-e3ac-4644-82c5-a5bbcc147429",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein PUT /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "83ee0df1-dd69-412b-ad00-461f1db4dd58",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ba59ccbe-3663-4b9a-abdc-fa8f2872b8df",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "025aa7cc-576d-43a0-9bf9-2db4f08c55c3",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spiele/tore soll geschützt sein DELETE /api/spiele/tore: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ad2e1a33-7875-412b-9553-137ef8422ee1",
      "parentUUID": "a2da9a8b-92ff-42ba-aab8-3e6dfe0647b0",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "65388ba1-0381-4d38-9562-34c3735c628f",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d080045e-fa0e-464b-9aac-5f289cc700b0",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan soll geschützt sein PUT /api/spielplan: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4c12d89e-32c9-42df-8b8e-991798a2f5b4",
      "parentUUID": "0e298d8f-3a20-430a-8b76-acf0345396d7",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e26e19e9-3a58-4da0-82d9-f646ccd22941",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "12d69db6-038c-4f7b-b3c7-74a60a16920b",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/zeiten soll geschützt sein PUT /api/spielplan/zeiten: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e8ace05b-2301-400e-9cdb-4f9b0a661c67",
      "parentUUID": "0d0bddd8-cf38-4bc5-9d67-16cf29df10ba",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "9c2cf24b-f41a-471f-8b8f-b38949a98e44",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "60d3a08a-cd0b-451b-9d92-b7b1586df59b",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein GET /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47146135-0021-4ba8-9ef7-17f6f8c69286",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b674822-17e0-4a22-8896-4b516c8366fa",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "414329ab-8b29-42f2-8875-7b4996327ce2",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein POST /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b037b52-8b4c-45f5-90d1-42ee0a513d24",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e554fe49-1b37-4cfa-8f8a-6c5aaa2dc431",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "85b16463-cd73-437c-afa9-aa14dfa0f990",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein PUT /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "612d0dbf-c8c3-441a-a36d-2cf3c9c47086",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c8b448fc-522d-41c0-91dc-aee59e9a280c",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e31a8952-7402-42f5-b919-ad8bf46ee906",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/spielplan/ausnahmen soll geschützt sein DELETE /api/spielplan/ausnahmen: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c47c478d-4374-44e5-b8c1-89b62ac6e947",
      "parentUUID": "076e2f24-ad6f-461d-8b89-1561c7896978",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7aa573ed-69d3-430b-8aed-f1204cfd997d",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "27a22588-52b1-4f3e-97c3-be86b51944e7",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein GET /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "89b21a3d-50b2-4333-bd02-5751073eeaa2",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ecf117fa-6568-45a5-845c-58e813756cc4",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "db149c3d-830f-4623-97fe-06394386a115",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "POST /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein POST /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5ab3c738-2366-4a92-89c9-93c6632d36b9",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "729d61c2-cefa-486e-ad34-d2784bcc95d7",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "4630bda2-8358-43f3-9573-942cf6163d86",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "PUT /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein PUT /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "c01c2b7d-0f06-4e65-96b4-67bfb980a557",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "28006a12-bc10-4d8a-8c1d-30a34d98f54e",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "459c3eff-699d-4e13-ae74-6ea44e9100fc",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/register: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/register soll geschützt sein DELETE /api/users/register: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "297dd5b4-06c9-4893-a215-68fe4d339347",
      "parentUUID": "70516810-f857-4920-ad04-43da20cccc13",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bdc1bc54-3a5b-4788-92f8-ab3cde339ea5",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "027bf674-76d4-4068-8a3d-0cb1b4dc22bb",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein GET /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "8c92e87f-7ea8-4f17-80d8-dd2da2b933d1",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "1fd1e456-697a-4d1e-8b72-06d6cb51c264",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "0c451e98-d64c-407f-b453-7cec0e095d01",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "POST /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein POST /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "5a015a68-274a-4b73-8be3-c1277c5b94e8",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "74d57fc0-3fa6-4977-a81b-67aaf2a11113",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "775eb2d9-6a81-4e7a-8db0-69bd6343c694",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "PUT /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein PUT /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "3b9ad18f-ede3-4f37-b1cd-06b7105d7b85",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f3f768a2-2a47-46cb-b5a3-93d6553c1f16",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für bearbeiter nicht zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[falseRole])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(403);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_FORBIDDEN');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "7350968c-97b7-4e37-9ef3-7599b134efae",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/delete: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/delete soll geschützt sein DELETE /api/users/delete: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a8bc9ff2-666d-4267-8ed5-03d37e3543b0",
      "parentUUID": "b316083f-960a-4315-b5a8-808067cdeb6e",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "47b1b768-ea4e-4524-8ecb-be23db7412c6",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "745d0b40-94d9-4c81-a400-fb072fdc91ae",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "GET /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein GET /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "bef33699-1bd4-4769-bead-c1e9a0d1b5f8",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "491830c1-ea1a-4be7-a2f9-181f3a364b94",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d493e377-8e85-4325-8c49-b3dcba51aec8",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "POST /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein POST /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "95f2ab78-fea6-4969-ac61-87e1203d0e4a",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "75ee07e8-f2cb-4d84-aa20-1784c753db0d",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "076a1beb-b00e-400e-b7c3-447d78a04cc6",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein PUT /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "03660cf5-702c-4ffc-9587-723682b4ee79",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte ohne Authorisierung nicht zugänglich sein",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).to.equal(401);\n        expect(response.body.MESSAGEKEY).to.be.equal('ERROR_NOT_AUTHORIZED');\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "97128c5f-3db2-478a-a08e-7596d86f615d",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für bearbeiter zugänglich sein",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "829c6a57-cdd4-47b3-8fbb-9b2bdd1c55b5",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    },
    {
      "title": "DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "fullTitle": "die Route /api/users/userDetails soll geschützt sein DELETE /api/users/userDetails: sollte für admin zugänglich sein",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "getRequestByMethod(method, routeKey)\n    .set('Authorization', roleTokens[role])\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response).not.to.be.undefined;\n        expect(response.statusCode).not.to.be.equal(403);\n        expect(response.statusCode).not.to.be.equal(401);\n        return done();\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "ce65f489-1b86-490d-9c7c-e77a7d4c2ffd",
      "parentUUID": "52291d9f-75f8-4fbb-858f-64ca07c026b3",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}