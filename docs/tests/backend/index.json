{
  "stats": {
    "suites": 16,
    "tests": 69,
    "passes": 69,
    "pending": 0,
    "failures": 0,
    "start": "2017-02-25T19:25:41.645Z",
    "end": "2017-02-25T19:25:41.946Z",
    "duration": 301,
    "testsRegistered": 69,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Helpers",
        "suites": [
          {
            "title": "soll die Datenbank query basierend auf Parametern laden",
            "suites": [],
            "tests": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "588591d8-f3cc-4e37-a51d-0ccdfaee0500",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "cc2814a8-360f-4f32-b9e0-fcd1cb30862a",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "e68e7276-41bf-4a18-850c-6dec20efe4da",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "a5f45fb2-9397-480e-989a-ee897551db18",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "e3af0e19-649c-47c0-ab78-651c5aaa79c8",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Query für alle Entities zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
                "err": {},
                "isRoot": false,
                "uuid": "588591d8-f3cc-4e37-a51d-0ccdfaee0500",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein einzelnes Entity zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
                "err": {},
                "isRoot": false,
                "uuid": "cc2814a8-360f-4f32-b9e0-fcd1cb30862a",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
                "err": {},
                "isRoot": false,
                "uuid": "e68e7276-41bf-4a18-850c-6dec20efe4da",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
                "err": {},
                "isRoot": false,
                "uuid": "a5f45fb2-9397-480e-989a-ee897551db18",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              },
              {
                "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "fullTitle": "Helpers soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
                "err": {},
                "isRoot": false,
                "uuid": "e3af0e19-649c-47c0-ab78-651c5aaa79c8",
                "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll das Team-Ergebnis zurücksetzen können",
            "suites": [],
            "tests": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "01b1d242-4866-4758-b583-0c5592170665",
                "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "25393055-2f1a-462b-ac14-0b784cbf8f34",
                "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll das Ergebnis für Team A zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "01b1d242-4866-4758-b583-0c5592170665",
                "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
                "skipped": false
              },
              {
                "title": "soll das Ergebnis für Team B zurücksetzen",
                "fullTitle": "Helpers soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "25393055-2f1a-462b-ac14-0b784cbf8f34",
                "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "soll den letzten Slash bei einem Pfad entfernen können",
            "suites": [],
            "tests": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "a4ad7257-fb08-43be-8b72-75860208fbeb",
                "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "be737c0d-d627-4f0f-8992-9e7d78c6cd87",
                "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "a009910c-15f6-4d97-b033-6645ae25c0dc",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
                "err": {},
                "isRoot": false,
                "uuid": "a4ad7257-fb08-43be-8b72-75860208fbeb",
                "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
                "skipped": false
              },
              {
                "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "fullTitle": "Helpers soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
                "err": {},
                "isRoot": false,
                "uuid": "be737c0d-d627-4f0f-8992-9e7d78c6cd87",
                "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "soll die Route-Konfiguration laden",
            "suites": [],
            "tests": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "95ff2545-49ed-479c-9eb2-9888b2c4b6c1",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "a07aba60-d30c-46b8-b04f-bf60d8966fd5",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "bcff05b2-e290-4105-b721-b4c539b51f3f",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "1de0ac0d-c51c-4e97-aad6-70223d50695c",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ed96b109-be36-4c58-bc81-13a7301fd002",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "0ad0d929-d709-47a9-8210-dabba932182f",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "73a01dc7-0372-4ec8-8308-f9931f4af367",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "eec4b19a-d9f5-443a-8936-ff89ab83a947",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "de9a3ccc-09b5-4966-a173-009b5608c639",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "913af713-b224-40ec-b765-2eb3d49c673e",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll einen AUTH-Rolle laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "95ff2545-49ed-479c-9eb2-9888b2c4b6c1",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll eine benötigten Request PARAMS laden",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "a07aba60-d30c-46b8-b04f-bf60d8966fd5",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll ein Array verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll ein Array verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "bcff05b2-e290-4105-b721-b4c539b51f3f",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einen String verwalten können",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einen String verwalten können",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "1de0ac0d-c51c-4e97-aad6-70223d50695c",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einzelne Methoden verwalten",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "ed96b109-be36-4c58-bc81-13a7301fd002",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "0ad0d929-d709-47a9-8210-dabba932182f",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "73a01dc7-0372-4ec8-8308-f9931f4af367",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
                "err": {},
                "isRoot": false,
                "uuid": "eec4b19a-d9f5-443a-8936-ff89ab83a947",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              },
              {
                "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
                "fullTitle": "Helpers soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
                "err": {},
                "isRoot": false,
                "uuid": "de9a3ccc-09b5-4966-a173-009b5608c639",
                "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 9,
            "totalPasses": 9,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6
          },
          {
            "title": "soll den Spielplan auf Korrektheit prüfen",
            "suites": [],
            "tests": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "463f82c4-6fa0-4773-af7a-04a1447281f4",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "a2523d04-8635-4e3e-9819-0e03797c3194",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "fe2a9f2d-3583-491a-9aaf-63547a30d656",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "d28acf53-bb6f-454b-a580-63b5ba3188d6",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [
              {
                "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "463f82c4-6fa0-4773-af7a-04a1447281f4",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll bei doppelten Teams false zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "a2523d04-8635-4e3e-9819-0e03797c3194",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll auch mit leeren Spielen zurechtkommen",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "fe2a9f2d-3583-491a-9aaf-63547a30d656",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              },
              {
                "title": "soll den korrekten Index des Fehlers zurückgeben",
                "fullTitle": "Helpers soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "d28acf53-bb6f-454b-a580-63b5ba3188d6",
                "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4
          },
          {
            "title": "soll das richtige Datum und Zeit für ein Spiel berechnen",
            "suites": [
              {
                "title": "Eintägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ff20764b-6fc0-416b-bd1f-b55ce2cad72d",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5a063e63-cfe9-4245-aba6-56ccb951d95b",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dc50c0dc-3a29-4144-9a15-09f8b19be6bf",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ffb828c-6310-4e5f-ace7-be34d8963680",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f375981f-b5b6-4e8b-af15-8b57531046c4",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ff20764b-6fc0-416b-bd1f-b55ce2cad72d",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5a063e63-cfe9-4245-aba6-56ccb951d95b",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dc50c0dc-3a29-4144-9a15-09f8b19be6bf",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ffb828c-6310-4e5f-ace7-be34d8963680",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f375981f-b5b6-4e8b-af15-8b57531046c4",
                        "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 63
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "106d8688-00bf-4c5d-8295-8d10faeb50b6",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2118a081-e9d9-4c9b-81bc-042db15c0553",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dea1127e-30d2-4a0e-955c-66b939c94792",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a6aa19a5-4b35-4547-b30b-9fb83a2941f9",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ca8fda1a-89a6-473c-a9c0-9ca4a2c192df",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "106d8688-00bf-4c5d-8295-8d10faeb50b6",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2118a081-e9d9-4c9b-81bc-042db15c0553",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dea1127e-30d2-4a0e-955c-66b939c94792",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a6aa19a5-4b35-4547-b30b-9fb83a2941f9",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel richtig berechen",
                        "fullTitle": "Eintägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ca8fda1a-89a6-473c-a9c0-9ca4a2c192df",
                        "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 14
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "e892e60a-d1bf-44ec-96e4-cf4803e7c0db",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "Zweitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9815d97b-8c2a-4c60-9340-7867bb1e0e8e",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "90dc0d99-2db5-4663-b27f-0462f00e70ba",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e85c5a0d-d9d7-48b0-83c6-0d3cf0d6b1ca",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "081e258f-6a97-4235-96df-359ad3da5ede",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8cbe2bde-1e59-4016-b8c6-dae81538c154",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22831298-7ef6-4451-8d34-8a4b0d862eb1",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5e3ebe34-5aee-4214-bfda-2981a6d2681b",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9815d97b-8c2a-4c60-9340-7867bb1e0e8e",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "90dc0d99-2db5-4663-b27f-0462f00e70ba",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e85c5a0d-d9d7-48b0-83c6-0d3cf0d6b1ca",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "081e258f-6a97-4235-96df-359ad3da5ede",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8cbe2bde-1e59-4016-b8c6-dae81538c154",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22831298-7ef6-4451-8d34-8a4b0d862eb1",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5e3ebe34-5aee-4214-bfda-2981a6d2681b",
                        "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 19
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a6c9622-e95a-420c-b107-616dfbfc2132",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d805a42d-3c30-4bce-8c45-8574191a44e2",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b3e3fe04-6756-4fb9-a37c-3aaa42b351ed",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ee7f1a0-e468-4262-9204-9561594a735f",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3eec7dd5-72bc-4a39-b86b-46443e3e409f",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "900c4d1b-7911-4100-b840-595c32f8054d",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c28307cf-496e-49e1-b87a-6fc570b2e9a7",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "f3225a4e-e456-428a-beb9-df222bb8b040",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a6c9622-e95a-420c-b107-616dfbfc2132",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d805a42d-3c30-4bce-8c45-8574191a44e2",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b3e3fe04-6756-4fb9-a37c-3aaa42b351ed",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ee7f1a0-e468-4262-9204-9561594a735f",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3eec7dd5-72bc-4a39-b86b-46443e3e409f",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "900c4d1b-7911-4100-b840-595c32f8054d",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Zweitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c28307cf-496e-49e1-b87a-6fc570b2e9a7",
                        "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 7,
                    "totalPasses": 7,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 22
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "42f5f151-4348-4d49-8d43-888e43c3adf0",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "Dreitägiges Event",
                "suites": [
                  {
                    "title": "die Spielzeiten passen genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "834ccd21-7c35-4afa-842f-69e718971c81",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12e95f85-5935-4496-8546-8ca904d90258",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c3f829ff-0c15-40b7-b84d-580df1d1b886",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "83bf1d6c-90c8-4df7-8fa7-84b2b3ace526",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c93bcf47-9815-4707-8bb7-190940ae5084",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1feed9dc-1e21-461f-8751-26c1fb446deb",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "292c0ed5-5aa8-40e4-b534-96be3721cf68",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f816ad3a-b466-4f83-8996-88b23901b803",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fd6df442-6d64-45fd-ba17-aec7b8ccee9b",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "834ccd21-7c35-4afa-842f-69e718971c81",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12e95f85-5935-4496-8546-8ca904d90258",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c3f829ff-0c15-40b7-b84d-580df1d1b886",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "83bf1d6c-90c8-4df7-8fa7-84b2b3ace526",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c93bcf47-9815-4707-8bb7-190940ae5084",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1feed9dc-1e21-461f-8751-26c1fb446deb",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "292c0ed5-5aa8-40e4-b534-96be3721cf68",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f816ad3a-b466-4f83-8996-88b23901b803",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fd6df442-6d64-45fd-ba17-aec7b8ccee9b",
                        "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 47
                  },
                  {
                    "title": "die Spielzeiten passen nicht genau",
                    "suites": [],
                    "tests": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "46201753-65e6-469d-9214-2c1c4d7c2bac",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ab26b59-446a-4644-adb1-174e8cadc1ee",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e04f75e3-48dc-48af-b843-c95d11821ad6",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe21896f-939e-4ed5-aeae-b0bf067c9e40",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ef30048-a68c-428b-898d-c43f44294c66",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6193c26f-4bae-4aae-9b73-6079075f6b7b",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "88ef069a-965e-4c9e-8224-a69d852861ab",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85868785-2af7-4b5e-9b9e-701336380009",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "488d5879-19ef-454c-ac73-d5b1c3f1606a",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 5000,
                    "file": "/test/backend/helpers.spec.js",
                    "uuid": "87555dda-4133-4a11-9037-774748cce0c7",
                    "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                    "passes": [
                      {
                        "title": "soll für das erste Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "46201753-65e6-469d-9214-2c1c4d7c2bac",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das zweite Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ab26b59-446a-4644-adb1-174e8cadc1ee",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das dritte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e04f75e3-48dc-48af-b843-c95d11821ad6",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll für das vierte Spiel richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe21896f-939e-4ed5-aeae-b0bf067c9e40",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am ersten Tag richtig berechen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ef30048-a68c-428b-898d-c43f44294c66",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6193c26f-4bae-4aae-9b73-6079075f6b7b",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "88ef069a-965e-4c9e-8224-a69d852861ab",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das erste Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85868785-2af7-4b5e-9b9e-701336380009",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      },
                      {
                        "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
                        "fullTitle": "Dreitägiges Event die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "488d5879-19ef-454c-ac73-d5b1c3f1606a",
                        "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 9,
                    "totalPasses": 9,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 21
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 5000,
                "file": "/test/backend/helpers.spec.js",
                "uuid": "2619df9e-dbf9-48ad-8fb7-a2b0cc0a0047",
                "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 5000,
            "file": "/test/backend/helpers.spec.js",
            "uuid": "7b9e5400-e5c0-4197-9afc-bc847a257936",
            "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "457553e9-e341-42e8-9655-29ba2cae3a09",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "cedae62e-97a4-429f-b86b-4792d5ab7f4a",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "1d422e43-8559-4002-8fab-8181c734bb7b",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "8ea8985d-9d99-4494-b1fc-169de67c678b",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "13db7b78-fe02-4690-98ff-4eb34a7fd34e",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 5000,
        "file": "/test/backend/helpers.spec.js",
        "uuid": "452a8a8f-c464-4842-a1d8-2c21323ce787",
        "fullFile": "/Users/Berni/DEV/Projects/spielplanismaning/test/backend/helpers.spec.js",
        "passes": [
          {
            "title": "soll einem Entity ein Team hinzufügen",
            "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "457553e9-e341-42e8-9655-29ba2cae3a09",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll ein Entity anhand eines Parameters enfernen",
            "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
            "err": {},
            "isRoot": false,
            "uuid": "cedae62e-97a4-429f-b86b-4792d5ab7f4a",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll einen Token validieren",
            "fullTitle": "Helpers soll einen Token validieren",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
            "err": {},
            "isRoot": false,
            "uuid": "1d422e43-8559-4002-8fab-8181c734bb7b",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll einen User speichern und eine Email schicken",
            "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "8ea8985d-9d99-4494-b1fc-169de67c678b",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          },
          {
            "title": "soll ein neues Entity speichern",
            "fullTitle": "Helpers soll ein neues Entity speichern",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
            "err": {},
            "isRoot": false,
            "uuid": "13db7b78-fe02-4690-98ff-4eb34a7fd34e",
            "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 13
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 5000,
    "uuid": "6c3630e8-5cbf-4551-a278-33077ddb5dfc",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "457553e9-e341-42e8-9655-29ba2cae3a09",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "cedae62e-97a4-429f-b86b-4792d5ab7f4a",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "1d422e43-8559-4002-8fab-8181c734bb7b",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "8ea8985d-9d99-4494-b1fc-169de67c678b",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "13db7b78-fe02-4690-98ff-4eb34a7fd34e",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "588591d8-f3cc-4e37-a51d-0ccdfaee0500",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "cc2814a8-360f-4f32-b9e0-fcd1cb30862a",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "e68e7276-41bf-4a18-850c-6dec20efe4da",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "a5f45fb2-9397-480e-989a-ee897551db18",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "e3af0e19-649c-47c0-ab78-651c5aaa79c8",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "01b1d242-4866-4758-b583-0c5592170665",
      "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "25393055-2f1a-462b-ac14-0b784cbf8f34",
      "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "a4ad7257-fb08-43be-8b72-75860208fbeb",
      "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "be737c0d-d627-4f0f-8992-9e7d78c6cd87",
      "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "95ff2545-49ed-479c-9eb2-9888b2c4b6c1",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "a07aba60-d30c-46b8-b04f-bf60d8966fd5",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "bcff05b2-e290-4105-b721-b4c539b51f3f",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "1de0ac0d-c51c-4e97-aad6-70223d50695c",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ed96b109-be36-4c58-bc81-13a7301fd002",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "0ad0d929-d709-47a9-8210-dabba932182f",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "73a01dc7-0372-4ec8-8308-f9931f4af367",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "eec4b19a-d9f5-443a-8936-ff89ab83a947",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "de9a3ccc-09b5-4966-a173-009b5608c639",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "463f82c4-6fa0-4773-af7a-04a1447281f4",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "a2523d04-8635-4e3e-9819-0e03797c3194",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "fe2a9f2d-3583-491a-9aaf-63547a30d656",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "d28acf53-bb6f-454b-a580-63b5ba3188d6",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ff20764b-6fc0-416b-bd1f-b55ce2cad72d",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "5a063e63-cfe9-4245-aba6-56ccb951d95b",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dc50c0dc-3a29-4144-9a15-09f8b19be6bf",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5ffb828c-6310-4e5f-ace7-be34d8963680",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "f375981f-b5b6-4e8b-af15-8b57531046c4",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "106d8688-00bf-4c5d-8295-8d10faeb50b6",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "2118a081-e9d9-4c9b-81bc-042db15c0553",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dea1127e-30d2-4a0e-955c-66b939c94792",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a6aa19a5-4b35-4547-b30b-9fb83a2941f9",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ca8fda1a-89a6-473c-a9c0-9ca4a2c192df",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9815d97b-8c2a-4c60-9340-7867bb1e0e8e",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "90dc0d99-2db5-4663-b27f-0462f00e70ba",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e85c5a0d-d9d7-48b0-83c6-0d3cf0d6b1ca",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "081e258f-6a97-4235-96df-359ad3da5ede",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8cbe2bde-1e59-4016-b8c6-dae81538c154",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "22831298-7ef6-4451-8d34-8a4b0d862eb1",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5e3ebe34-5aee-4214-bfda-2981a6d2681b",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2a6c9622-e95a-420c-b107-616dfbfc2132",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "d805a42d-3c30-4bce-8c45-8574191a44e2",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b3e3fe04-6756-4fb9-a37c-3aaa42b351ed",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9ee7f1a0-e468-4262-9204-9561594a735f",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3eec7dd5-72bc-4a39-b86b-46443e3e409f",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "900c4d1b-7911-4100-b840-595c32f8054d",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c28307cf-496e-49e1-b87a-6fc570b2e9a7",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "834ccd21-7c35-4afa-842f-69e718971c81",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "12e95f85-5935-4496-8546-8ca904d90258",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c3f829ff-0c15-40b7-b84d-580df1d1b886",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "83bf1d6c-90c8-4df7-8fa7-84b2b3ace526",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c93bcf47-9815-4707-8bb7-190940ae5084",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1feed9dc-1e21-461f-8751-26c1fb446deb",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "292c0ed5-5aa8-40e4-b534-96be3721cf68",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f816ad3a-b466-4f83-8996-88b23901b803",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "fd6df442-6d64-45fd-ba17-aec7b8ccee9b",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "46201753-65e6-469d-9214-2c1c4d7c2bac",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "1ab26b59-446a-4644-adb1-174e8cadc1ee",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e04f75e3-48dc-48af-b843-c95d11821ad6",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "fe21896f-939e-4ed5-aeae-b0bf067c9e40",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1ef30048-a68c-428b-898d-c43f44294c66",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6193c26f-4bae-4aae-9b73-6079075f6b7b",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "88ef069a-965e-4c9e-8224-a69d852861ab",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "85868785-2af7-4b5e-9b9e-701336380009",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "488d5879-19ef-454c-ac73-d5b1c3f1606a",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "soll einem Entity ein Team hinzufügen",
      "fullTitle": "Helpers soll einem Entity ein Team hinzufügen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = {\n    pushTeams: function (team, cb) {\n        data.pushed = team;\n        return cb();\n    },\n    callback: function () {\n        data.callbacked = true;\n    },\n    pushed: undefined,\n    callbacked: false\n};\nvar model = {\n    findById: function () {\n        return {\n            exec: function (cb) {\n                return cb(null, data)\n            }\n        }\n    }\n}\nvar team = {id: '123', name: 'test'};\nhelpers.findEntityAndPushTeam(model, '123', team, {}, data.callback);\nexpect(data.pushed).to.deep.equal(team);\nexpect(data.callbacked).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "457553e9-e341-42e8-9655-29ba2cae3a09",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll ein Entity anhand eines Parameters enfernen",
      "fullTitle": "Helpers soll ein Entity anhand eines Parameters enfernen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var model = {\n    remove: function (query, cb) {\n        model.query = query;\n        return cb();\n    },\n    query: undefined\n};\nvar query = {\n    id: '1234'\n};\nhelpers.removeEntityBy(model, 'id', '1234', {}, function () {\n});\nexpect(model.query).to.deep.equal(query);",
      "err": {},
      "isRoot": false,
      "uuid": "cedae62e-97a4-429f-b86b-4792d5ab7f4a",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll einen Token validieren",
      "fullTitle": "Helpers soll einen Token validieren",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var token = server.adminToken;\nvar req = {\n    get: function (text) {\n        if (text === 'Authorization') {\n            return token;\n        }\n        return undefined;\n    }\n};\nvar result = helpers.verifyToken(req, 'TEST-SECRET');\nexpect(result).not.to.be.undefined;\nexpect(result.username).to.equal('berni');",
      "err": {},
      "isRoot": false,
      "uuid": "1d422e43-8559-4002-8fab-8181c734bb7b",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll einen User speichern und eine Email schicken",
      "fullTitle": "Helpers soll einen User speichern und eine Email schicken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var user = {\n    save: function (cb) {\n        user.saved = true;\n        return cb();\n    },\n    saved: false\n};\nvar email = {\n    mail: function () {\n        email.sent = true\n    },\n    sent: false\n};\nhelpers.saveUserAndSendMail(user, {}, email.mail);\nexpect(user.saved).to.be.true;\nexpect(email.sent).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "8ea8985d-9d99-4494-b1fc-169de67c678b",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll ein neues Entity speichern",
      "fullTitle": "Helpers soll ein neues Entity speichern",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = undefined;\nvar model = function (body) {\n    data = body;\n    return {\n        save: function (cb) {\n            return cb(null, body);\n        }\n    }\n};\nvar req = {\n    body: {\n        data: '123'\n    }\n};\nvar res = {\n    json: function (data) {\n        res.data = data;\n    },\n    status: function (statusCode) {\n        res.statusCode = statusCode;\n        return {\n            json: res.json\n        }\n    },\n    data: undefined,\n    statusCode: undefined\n};\nhelpers.addEntity(model, req, res);\nexpect(data).to.equal(req.body);\nexpect(res.statusCode).to.equal(200);\nexpect(res.data).to.equal(req.body);",
      "err": {},
      "isRoot": false,
      "uuid": "13db7b78-fe02-4690-98ff-4eb34a7fd34e",
      "parentUUID": "452a8a8f-c464-4842-a1d8-2c21323ce787",
      "skipped": false
    },
    {
      "title": "soll das Query für alle Entities zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für alle Entities zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('all');",
      "err": {},
      "isRoot": false,
      "uuid": "588591d8-f3cc-4e37-a51d-0ccdfaee0500",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein einzelnes Entity zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein einzelnes Entity zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {id: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.true;\nexpect(data.query).to.equal('id');",
      "err": {},
      "isRoot": false,
      "uuid": "cc2814a8-360f-4f32-b9e0-fcd1cb30862a",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Team zurückgegeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {team: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('team');",
      "err": {},
      "isRoot": false,
      "uuid": "e68e7276-41bf-4a18-850c-6dec20efe4da",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Gruppe zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {gruppe: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('gruppe');",
      "err": {},
      "isRoot": false,
      "uuid": "a5f45fb2-9397-480e-989a-ee897551db18",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "fullTitle": "soll die Datenbank query basierend auf Parametern laden soll das Query für ein Entity gefiltert nach Jugend zurückgegeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var req = {query: {jugend: '1234'}, body: {}};\nvar data = helpers.getEntityQuery(model, req);\nexpect(data.searchById).to.be.false;\nexpect(data.query).to.equal('jugend');",
      "err": {},
      "isRoot": false,
      "uuid": "e3af0e19-649c-47c0-ab78-651c5aaa79c8",
      "parentUUID": "6524acd4-76f1-41ff-b36f-9ebf37997ce2",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team A zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team A zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamA', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "01b1d242-4866-4758-b583-0c5592170665",
      "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
      "skipped": false
    },
    {
      "title": "soll das Ergebnis für Team B zurücksetzen",
      "fullTitle": "soll das Team-Ergebnis zurücksetzen können soll das Ergebnis für Team B zurücksetzen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "helpers.resetErgebnis({}, spiel, oldData, 'teamB', mock.callback);\nexpect(mock.called).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "25393055-2f1a-462b-ac14-0b784cbf8f34",
      "parentUUID": "8359484c-fbb7-4f49-b9f6-d0ccdb44ad77",
      "skipped": false
    },
    {
      "title": "wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad einen Slash am Ende hat, soll er abgeschnitten werden",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path/';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal('/test/path');",
      "err": {},
      "isRoot": false,
      "uuid": "a4ad7257-fb08-43be-8b72-75860208fbeb",
      "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
      "skipped": false
    },
    {
      "title": "wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "fullTitle": "soll den letzten Slash bei einem Pfad entfernen können wenn der Pfad keinen Slash am Ende hat, soll er unverändert bleiben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var path = '/test/path';\nvar result = helpers.removeLastSlashFromPath(path);\nexpect(result).to.equal(path);",
      "err": {},
      "isRoot": false,
      "uuid": "be737c0d-d627-4f0f-8992-9e7d78c6cd87",
      "parentUUID": "a009910c-15f6-4d97-b033-6645ae25c0dc",
      "skipped": false
    },
    {
      "title": "soll einen AUTH-Rolle laden",
      "fullTitle": "soll die Route-Konfiguration laden soll einen AUTH-Rolle laden",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "95ff2545-49ed-479c-9eb2-9888b2c4b6c1",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll eine benötigten Request PARAMS laden",
      "fullTitle": "soll die Route-Konfiguration laden soll eine benötigten Request PARAMS laden",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "a07aba60-d30c-46b8-b04f-bf60d8966fd5",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll ein Array verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll ein Array verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "bcff05b2-e290-4105-b721-b4c539b51f3f",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einen String verwalten können",
      "fullTitle": "soll die Route-Konfiguration laden soll einen String verwalten können",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/all/string', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "1de0ac0d-c51c-4e97-aad6-70223d50695c",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einzelne Methoden verwalten",
      "fullTitle": "soll die Route-Konfiguration laden soll einzelne Methoden verwalten",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'PUT', 'PARAMS');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "ed96b109-be36-4c58-bc81-13a7301fd002",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Methode ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Methode ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'POST', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "0ad0d929-d709-47a9-8210-dabba932182f",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einer falschen Route ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einer falschen Route ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/false', 'GET', 'AUTH');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "73a01dc7-0372-4ec8-8308-f9931f4af367",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll bei einem falschen KEY ein leeres Array zurückgeben",
      "fullTitle": "soll die Route-Konfiguration laden soll bei einem falschen KEY ein leeres Array zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method', 'GET', 'WRONG');\nexpect(result).to.deep.equal([]);",
      "err": {},
      "isRoot": false,
      "uuid": "eec4b19a-d9f5-443a-8936-ff89ab83a947",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll einn zusätzlichen String am Ende des Pfads handlen",
      "fullTitle": "soll die Route-Konfiguration laden soll einn zusätzlichen String am Ende des Pfads handlen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = helpers.getRequiredRouteConfig(routes, 'test/route/method/', 'GET', 'AUTH');\nexpect(result).to.deep.equal(data);",
      "err": {},
      "isRoot": false,
      "uuid": "de9a3ccc-09b5-4966-a173-009b5608c639",
      "parentUUID": "913af713-b224-40ec-b765-2eb3d49c673e",
      "skipped": false
    },
    {
      "title": "soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll wenn kein Team doppelt vorkommt, true zurückgeben",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "463f82c4-6fa0-4773-af7a-04a1447281f4",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll bei doppelten Teams false zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll bei doppelten Teams false zurückgeben",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.above(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "a2523d04-8635-4e3e-9819-0e03797c3194",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll auch mit leeren Spielen zurechtkommen",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll auch mit leeren Spielen zurechtkommen",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {}, {}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "fe2a9f2d-3583-491a-9aaf-63547a30d656",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll den korrekten Index des Fehlers zurückgeben",
      "fullTitle": "soll den Spielplan auf Korrektheit prüfen soll den korrekten Index des Fehlers zurückgeben",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var spiele = [{\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '2'\n    }\n}, {\n    teamA: {\n        _id: '3'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '5'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '6'\n    }\n}, {\n    teamA: {\n        _id: '2'\n    },\n    teamB: {\n        _id: '4'\n    }\n}, {\n    teamA: {\n        _id: '1'\n    },\n    teamB: {\n        _id: '5'\n    }\n}];\nexpect(helpers.checkSpielOrderChangeAllowed(spiele)).to.be.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "d28acf53-bb6f-454b-a580-63b5ba3188d6",
      "parentUUID": "bdb772be-e36c-4bdf-b018-4c0600a3d09b",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "ff20764b-6fc0-416b-bd1f-b55ce2cad72d",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "5a063e63-cfe9-4245-aba6-56ccb951d95b",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dc50c0dc-3a29-4144-9a15-09f8b19be6bf",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5ffb828c-6310-4e5f-ace7-be34d8963680",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "f375981f-b5b6-4e8b-af15-8b57531046c4",
      "parentUUID": "0fd8b7ec-8b24-47b8-9d2c-efb09159f8e6",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "106d8688-00bf-4c5d-8295-8d10faeb50b6",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "2118a081-e9d9-4c9b-81bc-042db15c0553",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "dea1127e-30d2-4a0e-955c-66b939c94792",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a6aa19a5-4b35-4547-b30b-9fb83a2941f9",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel richtig berechen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ca8fda1a-89a6-473c-a9c0-9ca4a2c192df",
      "parentUUID": "79ef9e53-1896-4cb6-ac0c-8a2d26c59eda",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9815d97b-8c2a-4c60-9340-7867bb1e0e8e",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "90dc0d99-2db5-4663-b27f-0462f00e70ba",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e85c5a0d-d9d7-48b0-83c6-0d3cf0d6b1ca",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "081e258f-6a97-4235-96df-359ad3da5ede",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8cbe2bde-1e59-4016-b8c6-dae81538c154",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "22831298-7ef6-4451-8d34-8a4b0d862eb1",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "5e3ebe34-5aee-4214-bfda-2981a6d2681b",
      "parentUUID": "84f3d301-b017-4713-843c-ddc8f3c9bb8c",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "2a6c9622-e95a-420c-b107-616dfbfc2132",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "d805a42d-3c30-4bce-8c45-8574191a44e2",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "b3e3fe04-6756-4fb9-a37c-3aaa42b351ed",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "9ee7f1a0-e468-4262-9204-9561594a735f",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "3eec7dd5-72bc-4a39-b86b-46443e3e409f",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "900c4d1b-7911-4100-b840-595c32f8054d",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c28307cf-496e-49e1-b87a-6fc570b2e9a7",
      "parentUUID": "f3225a4e-e456-428a-beb9-df222bb8b040",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "834ccd21-7c35-4afa-842f-69e718971c81",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "12e95f85-5935-4496-8546-8ca904d90258",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c3f829ff-0c15-40b7-b84d-580df1d1b886",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:20');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "83bf1d6c-90c8-4df7-8fa7-84b2b3ace526",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "c93bcf47-9815-4707-8bb7-190940ae5084",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1feed9dc-1e21-461f-8751-26c1fb446deb",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "292c0ed5-5aa8-40e4-b534-96be3721cf68",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "f816ad3a-b466-4f83-8996-88b23901b803",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:40');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "fd6df442-6d64-45fd-ba17-aec7b8ccee9b",
      "parentUUID": "a73dc192-dfd0-4d9e-be3e-adca27b1a9a3",
      "skipped": false
    },
    {
      "title": "soll für das erste Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das erste Spiel richtig berechnen",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(1, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "46201753-65e6-469d-9214-2c1c4d7c2bac",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das zweite Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das zweite Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(2, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "1ab26b59-446a-4644-adb1-174e8cadc1ee",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das dritte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das dritte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(3, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "e04f75e3-48dc-48af-b843-c95d11821ad6",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll für das vierte Spiel richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll für das vierte Spiel richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(4, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:18');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "fe21896f-939e-4ed5-aeae-b0bf067c9e40",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am ersten Tag richtig berechen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am ersten Tag richtig berechen",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(9, spielplan);\nexpect(result.date).to.equal('01.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "1ef30048-a68c-428b-898d-c43f44294c66",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(10, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6193c26f-4bae-4aae-9b73-6079075f6b7b",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am zweiten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am zweiten Tag richtig berechnen",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(18, spielplan);\nexpect(result.date).to.equal('02.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "88ef069a-965e-4c9e-8224-a69d852861ab",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das erste Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das erste Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(19, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:00');\nexpect(result.platz).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "85868785-2af7-4b5e-9b9e-701336380009",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    },
    {
      "title": "soll das letzte Spiel am dritten Tag richtig berechnen",
      "fullTitle": "die Spielzeiten passen nicht genau soll das letzte Spiel am dritten Tag richtig berechnen",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var result = calcSpielDateTime(27, spielplan);\nexpect(result.date).to.equal('03.01.1970');\nexpect(result.time).to.equal('10:36');\nexpect(result.platz).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "488d5879-19ef-454c-ac73-d5b1c3f1606a",
      "parentUUID": "87555dda-4133-4a11-9037-774748cce0c7",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}